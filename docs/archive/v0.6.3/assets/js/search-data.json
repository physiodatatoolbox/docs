{"0": {
    "doc": "Skin Conductance Analyzer",
    "title": "Skin Conductance Analyzer",
    "content": "Preprocesses a Skin Conductance signal, and extracts tonic and phasic components, as well as SCRs (Skin Conductance Responses). | Introduction | User Corrections | Processing and Analysis Pipeline . | Step 1: Filtering the SCL signal | Step 2: Calculating the Tonic and Phasic signals | Step 3: SCR Detection and Analysis . | Valley-Peak Pair Detection | Inflection Point Detection | SCR Classification | . | . | Settings | Metrics | Resampled Signals | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html"
  },"1": {
    "doc": "Skin Conductance Analyzer",
    "title": "Introduction",
    "content": "The Skin Conductance Analyzer can be used to: processes Skin Conductance Level (SCL) data; extract Tonic and Phasic SCL components; and, detect and analyze Skin Conductance Responses (SCRs). &times; Figure 1: The Skin Conductance Analyzer GUI, showing the SCL (in axes labeled Skin Conductance) and the phasic channel (in the axes labeled Phasic SC). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#introduction"
  },"2": {
    "doc": "Skin Conductance Analyzer",
    "title": "User Corrections",
    "content": "The Skin Conductance Analyzer features the same correction method as the Generic Signal Analyzer; i.e., sections of the raw signal can be marked for exclusion and interpolation. Due to the way the tonic signal is measured—with a moving minimum filter—it is imperative to remove dipping artifacts, such as those cause by electrode disconnection. Figure 2: A section of the SCL signal (light blue line) showing a dipping artifact around t = 520 s, caused by an electrode-disconnection event. As a result, the tonic SCL (dark blue line) gets pulled downwards, which also leads to artifacts in the phasic SCL (not shown), as it’s calculated using the tonic signal. To correct this, a zone can be created inside which the raw signal is discarded and interpolated, see Figure 50. Figure 3: After inserting an interpolation zone is created, visualized as the red rectangle in the top 'Raw-Skip' graph, the raw signal is interpolated over the ‘skip zone’ and the filtered and tonic SCL signals no longer feature the dipping artifact. Additionally, the module includes the ability to add zones in which SCR detection is disabled; referred to as SCR rejection zones. These zones, visualized as red rectangles in the second graph from the top, have two effects: . | SCR removal: If an SCR onset or peak lies within the SCR-rejection zone, that SCR is removed. | Inflection point removal: If an inflection point lies within the SCR-rejection zone, it is removed. This effectively merges the SCRs that were split by the inflection zone, see Figure below. | . Figure 4: Inserting a 'SCR rejection' zone over an inflection point causes the Toolbox to merge bordering SCRs. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#user-corrections"
  },"3": {
    "doc": "Skin Conductance Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "The Skin Conductance module uses the following terminology. | SCL: The SCL (Skin Conductance Level) refers to the low pass filtered Skin Conductance signal; i.e. it is the smoothed but not decomposed skin conductance signal. The unfiltered signal is referred to as the Raw SCL. | Tonic SCL: The Tonic SCL refers to the tonic (slow moving) component of the SCL signal. | Phasic SCL: The Phasic SCL refers to the phasic (fast moving) component of the SCL signal. | SCR: The SCR (Skin Conductance Response) refers to a section in the SCL signal with a specific shape–namely an upwards hump suggesting a sudden increase in skin conductance activity, followed by a decay. The Toolbox identifies SCRs by scanning the signal for sections that conform to specific SCR definition. Any SCRs that conform are classified, regardless of their proximity to epochs. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#processing-and-analysis-pipeline"
  },"4": {
    "doc": "Skin Conductance Analyzer",
    "title": "Step 1: Filtering the SCL signal",
    "content": "The raw SCL signal is fetched from the specified channel, and if enabled, the shock removal moving median filter is applied. The result is then multiplied by the gain, and if enabled, low pass filtered at the specified cutoff frequency. It is from this filtered signal that the SCL_filt metrics are calculated. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#step-1-filtering-the-scl-signal",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#step-1-filtering-the-scl-signal"
  },"5": {
    "doc": "Skin Conductance Analyzer",
    "title": "Step 2: Calculating the Tonic and Phasic signals",
    "content": "First, the filtered SCL signal is resampled using spline interpolation applied to a new 20 Hz time-vector spanning the length of the filtered SCL signal. The tonic SCL signal is then calculated by first applying a moving minimum filter with the user-specifiable window size to the resampled SCL signal, then smoothing the result using a Gaussian kernel of the same window size. The phasic SCL signal is calculated by applying a 1st order high pass Butterworth filter with the specified cutoff frequency to the down sampled and interpolated SCL signal. It is from these tonic and phasic signals, which all have 20 Hz resolution, that the SCL_tonic and SCL_phasic metrics are calculated. Figure 5: The filtered SCL signal (light blue line, top graph); tonic SCL signal (dark blue line, top graph); and phasic SCL signal (orange line, bottom graph). Additionally, the area under the phasic line is visualized in light orange (bottom graph). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#step-2-calculating-the-tonic-and-phasic-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#step-2-calculating-the-tonic-and-phasic-signals"
  },"6": {
    "doc": "Skin Conductance Analyzer",
    "title": "Step 3: SCR Detection and Analysis",
    "content": "If enabled, SCRs are detected on the resampled SCL signal described in Step 2, which has a 20 Hz resolution, using the approach described here. Valley-Peak Pair Detection . Using peak and valley detection, each occurrence of a valley succeeded by a peak, henceforth collectively valley-peak pairs, are identified. Inflection Point Detection . If superimposed SCR detection is enabled, SCRs are split at inflection points location on their up slope. To find these inflection points, the resampled SCL signal is first smoothed using a Gaussian filter with the user-specified window size, then derived to attain the first time derivative of the SCL, the SCL’. Subsequently, this signal is also smoothed and derived in the same manner to attain the second time derivative of the SCL signal, the SCL’’. For each previously found valley-peak pair, the section of the SCL’’ signal between the valley and the peak is searched for negative-to-positive zero-crossings. Zero-crossings inside SCR rejection zones are discarded. The remaining negative-to-positive zero-crossings become inflection points, and each valley-peak pair featuring inflection points are split at their respective inflection points, where the inflection point becomes the peak to the previous valley, and the valley to the subsequent peak, forming new valley-peak pairs. Figure 6: An SCR that has not been split at its inflection points; i.e., superimposed SCRs detection is disabled. The rising edge of the SCR clearly features an inflection point around t = 1935.4 s; and one less distinguishable inflection point at t = 1933.5 s. Figure 7: Left: when superimposed SCR detection is enabled, the rising SCR is split at its two inflection points, which are defined as the negative-to-positive zero-crossings of the second derivative of the SCL (the pink dotted lines). Right: increasing the derivative smoothing window size smooths out the second derivative of the SCL, thereby reducing the inflection point detection sensitivity. SCR Classification . Valley-peak pairs, which may now include those generated by inflection-point splitting, are filtered using the user-specified amplitude and rise time criteria. Additionally, any valley-peak pair with a valley and/or peak inside a SCR rejection zone is discarded. The remaining valley-peak pairs are classified as SCRs, with the valley being defined as the SCRs onset time, and the peak as its peak. When assigning SCRs to epochs, an SCR is associated with an epoch if the SCR’s onset time lies within that epoch’s start time plus the user-specified start-latency, and the epoch’s end time plus the specified end-latency. SCRs can belong to multiple overlapping epochs, and as a result of the latency compensation, also to multiple non-overlapping epochs. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#step-3-scr-detection-and-analysis",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#step-3-scr-detection-and-analysis"
  },"7": {
    "doc": "Skin Conductance Analyzer",
    "title": "Settings",
    "content": "The Skin Conductance analyzer assumes that the unit of the raw signal is µS. If this is not the case, fill in an appropriate gain value (multiplier) to transform the raw signal into µS. The auto-generated list below shows the settings available in the Skin Conductance Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings: Settings for processing the raw Skin Conductance signal. This module assumes that the signal is in μS, if it is not, fill in a multiplier (gain) to convert it. The signal is then (optionally) lowpass filtered to produce a smooth Skin Conductance (SC) signal. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Lowpass filter [Hz]: The low-pass filter and its cutoff frequency. | . | SCR Detection Settings: Skin Conductance Responses (SCRs) are detected using the “valley to peak” method. If enabled, superimposed SCRs are detected by splitting rising SCRs at inflection points. When performing epoch analysis, an SCR is assigned to an epoch if its onset time falls within that epoch’s start time plus the “start-shift”, and that epoch’s end time plus the “end-shift”. | Detect SCRs in the SC signal [ ]: Toggles the detection of SCRs. | Min. and max. SCR amplitude [μS]: The minimum and maximum allowable SCR amplitude. | Min. and max. SCR rise time [s]: The minimum and maximum allowable SCR rise time. | Derivative smoothing window [s]: The window length, in seconds, used to smooth the SC and SC’ signals when deriving SC’’. | Detect superimposed SCRs: Superimposed SCRs may feature inflections rather than valleys and/or peaks. As such, enabling superimposed SCR detection will split ongoing SCRs at the inflection points. | Epoch-assignment start/end shifts [s]: The epoch start and end shifts used when assigning SCRs to epochs (for SCR latency compensation). | . | Tonic and Phasic Calculation: The Toolbox generates a tonic SCL signal by applying moving minimum and gaussian filters to the SC signal. The phasic SCL is generated by high-pass filtering the SC signal. | Tonic window size [s]: The window size, in seconds, of the moving minimum and gaussian filters used to generate the tonic SCL signal. | Phasic highpass filter [Hz]: The cutoff frequency of the high-pass filter used to calculate the phasic channel. | . | Electrical Shock Removal: If participants underwent electrical stimulation during the data acquisition, electrical spike artifacts that cannot be removed by the lowpass filter may be present in the skin conductance signal. Enable the median filter to remove them. | Median filter window length [ms]: The window length of the median filter applied to the raw SC signal. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#settings"
  },"8": {
    "doc": "Skin Conductance Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the Skin Conductance Analyzer module. Table 1: The metrics calculated by the Skin Conductance Analyzer module. | Variable: | Unit: | Description: | . | SCL_filt_min | uS | The min. of the filtered SCL signal in the current epoch. | . | SCL_filt_max | uS | The max. of the filtered SCL signal in the current epoch. | . | SCL_filt_mean | uS | The mean of the filtered SCL signal in the current epoch. | . | SCL_filt_median | uS | The median of the filtered SCL signal in the current epoch. | . | SCL_filt_std | uS | The standard deviation of the filtered SCL signal in the current epoch. | . | SCL_tonic_min | uS | The min. of the tonic SCL signal in the current epoch. | . | SCL_tonic_max | uS | The max. of the tonic SCL signal in the current epoch. | . | SCL_tonic_mean | uS | The mean of the tonic SCL signal in the current epoch. | . | SCL_tonic_median | uS | The median of the tonic SCL signal in the current epoch. | . | SCL_tonic_std | uS | The standard deviation of the tonic SCL signal in the current epoch. | . | SCL_phasic_min | uS | The min. of the phasic SCL signal in the current epoch. | . | SCL_phasic_max | uS | The max. of the phasic SCL signal in the current epoch. | . | SCL_phasic_mean | uS | The mean of the phasic SCL signal in the current epoch. | . | SCL_phasic_median | uS | The median of the phasic SCL signal in the current epoch. | . | SCL_phasic_std | uS | The standard deviation of the phasic SCL signal in the current epoch. | . | SCL_phasic_area_norm | uS/s | The area under the phasic signal in the current epoch, normalized by dividing it by the epoch duration. | . | SCL_rawSkipZone | % | The percentage of the current epoch in which the raw SC signal was discarded and regenerated using interpolation. | . | SCR_count | n | The count of all SCRs in the current epoch. | . | SCR_first_amp | uS | The amplitude of the first SCR in the current epoch. | . | SCR_first_riseTime | s | The rise time of the first SCR in the current epoch. | . | SCR_first_onsetValue | uS | The onset value of the first SCR in the current epoch. | . | SCR_first_latency | s | The latencies of the first SCR in the current epoch. | . | SCR_amp_min | uS | The min. of the amplitudes of all SCRs in the current epoch. | . | SCR_amp_max | uS | The max. of the amplitudes of all SCRs in the current epoch. | . | SCR_amp_mean | uS | The mean of the amplitudes of all SCRs in the current epoch. | . | SCR_amp_median | uS | The median of the amplitudes of all SCRs in the current epoch. | . | SCR_amp_std | uS | The sample standard deviation of the amplitudes of all SCRs in the current epoch. | . | SCR_riseTime_min | s | The min. of the rise-times of all SCRs in the current epoch. | . | SCR_riseTime_max | s | The max. of the rise-times of all SCRs in the current epoch. | . | SCR_riseTime_mean | s | The mean of the rise-times of all SCRs in the current epoch. | . | SCR_riseTime_median | s | The median of the rise-times of all SCRs in the current epoch. | . | SCR_riseTime_std | s | The sample standard deviation of the rise-times of all SCRs in the current epoch. | . | SCR_onsetValue_min | uS | The min. of the onset values of all SCRs in the current epoch. | . | SCR_onsetValue_max | uS | The max. of the onset values of all SCRs in the current epoch. | . | SCR_onsetValue_mean | uS | The mean of the onset values of all SCRs in the current epoch. | . | SCR_onsetValue_median | uS | The median of the onset values of all SCRs in the current epoch. | . | SCR_onsetValue_std | uS | The sample standard deviation of the onset values of all SCRs in the current epoch. | . | SCR_latency_min | s | The min. of the latencies of all SCRs in the current epoch. | . | SCR_latency_max | s | The max. of the latencies of all SCRs in the current epoch. | . | SCR_latency_mean | s | The mean of the latencies of all SCRs in the current epoch. | . | SCR_latency_median | s | The median of the latencies of all SCRs in the current epoch. | . | SCR_latency_std | s | The sample standard deviation of the latencies of all SCRs in the current epoch. | . | SCR_scrSkipZone | % | The percentage of the current epoch covered in 'Reject SCR' zones. | . | SCR_inflection_userRemoval | n | The number of otherwise present inflection-points that were manually rejected by the user in the current epoch. Note, for this metric, the inflection-point timestamps are assigned to epochs without considering the min. and max. latencies. | . | SCR_userRemoval | n | The number of otherwise valid SCRs manually rejected by the user in the current epoch. | . In addition to the epoch-based metrics above, the Skin Conductance Analyzer also outputs a table with all SCR data. Table 2: The SCR-specific data. This table is also exported by the module when epoch analysis is run. | Variable: | Unit: | Description: | . | dataSource | filename | The filename of the data source. | . | scrError | | Possible error preventing SRCs from being detected. | . | index | - | The SCR index. | . | totalCount | - | The total number of SCRs in the current signal (see dataSource). | . | onsetTime | s | The onset time of the SCR. | . | riseTime | s | The SCR rise-time. | . | onsetValue | uS | The Skin Conductance value at the SCR onset. | . | amp | uS | The SCR amplitude. | . | isOnsetInflection | | Indicates if the onset of the SCR is an inflection. | . | isPeakInflection | | Indicates if the 'peak' of the SCR is an inflection. | . | inEpoch_name | | The name(s) of the epochs that the SCR is assigned to, with the latency range being considered. | . | inEpoch_count | | The number of epochs that the SCR is assigned to, with the latency range being considered. | . | inEpoch_latency_min | s | The minimum latency of the current SCR, with the latencies being calculated relative to the start times of each epoch that the SCR is assigned to. | . | inEpoch_latency_max | s | The maximum latency of the current SCR, with the latencies being calculated relative to the start times of each epoch that the SCR is assigned to. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#metrics"
  },"9": {
    "doc": "Skin Conductance Analyzer",
    "title": "Resampled Signals",
    "content": "When exporting the resampled epoch signals, the Skin Conductance Analyzer resamples and extracts the filtered, tonic and phasic SCL signals. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/SC-module.html#resampled-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/SC-module.html#resampled-signals"
  },"10": {
    "doc": "About",
    "title": "About",
    "content": "The PhysioData Toolbox is custom software written to fulfill specific research needs at the Social and Behavioral Sciences Faculty of the Leiden University in the Netherlands 🌷. ",
    "url": "/docs/archive/v0.6.3/docs/about.html",
    
    "relUrl": "/docs/about.html"
  },"11": {
    "doc": "About",
    "title": "Team",
    "content": "The PhysioData Toolbox is being developed and maintained by:   . Elío E. Sjak-Shie Lead developer Research Engineer @ Leiden University .   . Iris M. Spruit Contributor Research Technician @ Leiden University .   Contact us at: physiodatatoolbox@fsw.leidenuniv.nl. ",
    "url": "/docs/archive/v0.6.3/docs/about.html#team",
    
    "relUrl": "/docs/about.html#team"
  },"12": {
    "doc": "About",
    "title": "Affiliations",
    "content": "The above-mentioned souls are affiliated with the following groups:   . &times; Faculty of Social and Behavioral Sciences Leiden University Leiden, The Netherlands Website .   . Leiden Institute for Brain and Cognition Leiden, The Netherlands Website . This site uses the just-the-docs theme for Jekyll 🧪. ",
    "url": "/docs/archive/v0.6.3/docs/about.html#affiliations",
    
    "relUrl": "/docs/about.html#affiliations"
  },"13": {
    "doc": "Area of Interest Hit Analyzer",
    "title": "Area of Interest Hit Analyzer",
    "content": "The Area of Interest (AOI) Hit Analyzer performs epoch-based analyses of prescored AOI hit data. | Introduction | User Corrections | Settings | Metrics | Resampled Signals | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/aoi-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/aoi-module.html"
  },"14": {
    "doc": "Area of Interest Hit Analyzer",
    "title": "Introduction",
    "content": "The Area of Interest Hit Analyzer visualizes pre-classified hit data inside an eye-tracking dataset, and performs epoch-based descriptive analysis or resampling. AOI hit data consists of an AOI name, and the start and end times of the hits. The Toolbox itself cannot score AOI hits based on gaze coordinates. &times; Figure 1: The Area of Interest Hit GUI, showing the hit data per AOI. In the current file there were four AOIs. Notice that the EXP_AOIEyes AOI was hit most frequently. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/aoi-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/aoi-module.html#introduction"
  },"15": {
    "doc": "Area of Interest Hit Analyzer",
    "title": "User Corrections",
    "content": "The Area of Interest Hit Analyzer does not allow for corrections to be made. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/aoi-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/aoi-module.html#user-corrections"
  },"16": {
    "doc": "Area of Interest Hit Analyzer",
    "title": "Settings",
    "content": "The auto-generated list below shows the settings available in the Area of Interest Hit Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Eye-Tracking dataset number: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/aoi-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/aoi-module.html#settings"
  },"17": {
    "doc": "Area of Interest Hit Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the Area of Interest Hit Analyzer module. Table 1: The metrics calculated by the Area of Interest Hit Analyzer module. | Variable: | Unit: | Description: | . | AOI_Total_Hit_Time | s | The total cumulative hit time in the AOI (AOI), per epoch. | . | AOI_Time_to_First_Hit | s | The time from the start of the epoch to the first hit in the AOI (AOI), per epoch. Is zero if the epoch started during a hit, blank/NaN if the epoch did not feature any hits. | . | AOI_First_Hit_Duration | s | The duration of the first hit in the AOI (AOI), per epoch. If the epoch started or ended while a hit, was active, only the duration during the epoch is considered. | . | AOI_Hit_Count | - | The total distinct times that the AOI (AOI) was hit, per epoch. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/aoi-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/aoi-module.html#metrics"
  },"18": {
    "doc": "Area of Interest Hit Analyzer",
    "title": "Resampled Signals",
    "content": "When exporting the resampled epoch signals, the AOI Hit Analyzer resamples and extracts the AOI hits. This results in a hit fraction per bin indicating the fraction of the bin the AOI was hit (0 = no hit, 1 = complete hit). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/aoi-module.html#resampled-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/aoi-module.html#resampled-signals"
  },"19": {
    "doc": "Basic Walkthrough",
    "title": "Basic Walkthrough",
    "content": "The basic tutorial will teach users the core concepts of the Toolbox, and how to import, visualize, clean and analyze data. | Introduction . | Converting Raw Data | Example Dataset | . | Running the Toolbox | Importing Files . | View Raw Data | . | Creating PhysioAnalyzer modules . | Creating the ECG PhysioAnalyzer | Defining Epochs . | Define the habituation epochs | Define the stimulus epochs | Define the extinction supra epochs | Finish creating the ECG PhysioAnalyzer | . | Creating the SC PhysioAnalyzer | Adding the HRV PhysioAnalyzer | Applying the Settings to the PhysioData files | . | Reviewing PhysioAnalyzer Data . | Launching and Using the PhysioAnalyzer Viewer | Correcting the ECG data | Correcting the SC data | Viewing the HRV data | Viewing results | . | Updating the Settings | Exporting Analysis | Saving the session | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html",
    
    "relUrl": "/docs/tutorial/basics.html"
  },"20": {
    "doc": "Basic Walkthrough",
    "title": "Introduction",
    "content": "This tutorial uses an ECG, Skin Conductance and Blood Pressure example dataset provided in the PhysioData Toolbox zip file. However, core concepts of the PhysioData Toolbox that apply to all data types are introduced. Following this basic tutorial is recommended for all first-time users, including researchers seeking to analyze other data types, such as eye-tracking data. This tutorial will take approximately 1.5 hours to complete. Please note that the Toolbox is designed for use with a 3-button mouse (e.g. a mouse with a clickable scroll wheel). A track-pad will not allow full interaction with the graphs. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#introduction",
    
    "relUrl": "/docs/tutorial/basics.html#introduction"
  },"21": {
    "doc": "Basic Walkthrough",
    "title": "Converting Raw Data",
    "content": "The PhysioData Toolbox can only read PhysioData Files, which are special MATLAB files with the .physioData format. To convert your own data for use in the PhysioData Toolbox, use the File Converter. For the current tutorial, use the provided files, as explained below. If your raw data is stored in a format that is not supported by the File Converter, you can still generate PhysioData files for processing in the Toolbox using a custom MATLAB script (more info). ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#converting-raw-data",
    
    "relUrl": "/docs/tutorial/basics.html#converting-raw-data"
  },"22": {
    "doc": "Basic Walkthrough",
    "title": "Example Dataset",
    "content": "The Shock-Conditioning example files loosely represent a classic supra/sub perceptual electrical shock conditioning task. The experiment consisted of several phases and trials, which can be identified using the markers, events and pre-generated epochs found in the files. During the experiment, ECG, Skin Conductance and Blood Pressure signals were obtained. The example dataset is specifically designed to exhibit the usage of several Toolbox features. Example Dataset Details Below a description of the six phases of the experiment and their associated events, markers, and pregenerated epochs is given. Events and markers signal important moments in the data. Events are messages that describe a certain moment. Markers are recorded as signal and assume numeric values that signify certain moments. Epochs are segments of data that are created by referencing events and markers. See the Epochs chapter for more information on events, markers, and epochs. Habituation Phase: . The habituation phase was split into two sections, both demarked by ‘Habituation_Start’ and ‘Habituation_End’ events. | Event: | Event indicates: | . | Habituation_Start | start of first habituation phase | . | Habituation_End | end of first habituation phase | . | Habituation_Start | start of second habituation phase | . | Habituation_End | end of second habituation phase | . Baseline Phase: . During the baseline, participants watched one of three available movies. The start and end, as well as the movie, are indicated by events. | Event: | Event indicates: | . | Baseline_Start (&lt;MOVIENAME&gt;) | start of baseline movie | . | Baseline_End (&lt;MOVIENAME&gt;) | end of baseline movie | . Acquisition Phase: . The acquisition phase consisted of trials in which conditioned stimuli (images) were shown. The onset of these images are indicated by markers, as described below. These markers are pulses with a duration of 50 ms, that immediately precede the image onset. Note that CS++ is CS+ which is actually followed by an electrical shock. The trials were presented in random order. Each trial has the following sequence: . | Trial baseline: starts at 2 seconds before the image onset, and ends at the image onset. | Trial response: starts at the image onset, and ends 8 seconds after. | . In addition to the markers, a pregenerated epoch named ‘Acquisition’ spanning the complete acquisition phase is included in the files. | Marker: | Marker indicates: | Trial Type | Image ID: | Perceptual Level | . | 11 | impending image onset | CS+ | 1 | supra | . | 12 | impending image onset | CS+ | 2 | supra | . | 21 | impending image onset | CS++ | 1 | supra | . | 22 | impending image onset | CS++ | 2 | supra | . | 33 | impending image onset | CS- | 3 | supra | . | 34 | impending image onset | CS- | 4 | supra | . Extinction Phase: . The extinction phase consists of trials showing either supra-perceptual or sub-perceptual stimuli. The supra and sub conditions were counterbalanced between participants; half got the sub, half got the supra. The trials were presented in random order. Each trial consists of: . | Fixation: 3 seconds, | Onset of image, indicated by the start of the marker, | A mask in case of sub-perceptual stimuli. | A wait period, the end of which corresponds to the end of the marker. | . In addition to the markers, a pregenerated epoch named ‘Extinction’ spanning the complete extinction phase is included in the files. | Marker: | Marker indicates: | Perceptual Level | . | 100 | duration of extinction image and wait | supra | . | 101 | duration of extinction image and wait | sub | . Rating Phase: . In the rating phase, participants were asked to rate the four image stimuli on a scale of 1 to 5. The images were presented in random order, and the four rating events were recorded as events. The value of the four rating events include the image ID (1, 2, 3 or 4, shown as &lt;ID&gt; below); and the rating (1, 2, 3, 4 or 5, shown as &lt;RAT&gt; below). | Event: | Event indicates: | . | Pic_&lt;ID&gt;_rated_&lt;RAT&gt; | Rating event, with encoded image ID and rating | . | Pic_&lt;ID&gt;_rated_&lt;RAT&gt; | Rating event, with encoded image ID and rating | . | Pic_&lt;ID&gt;_rated_&lt;RAT&gt; | Rating event, with encoded image ID and rating | . | Pic_&lt;ID&gt;_rated_&lt;RAT&gt; | Rating event, with encoded image ID and rating | . Questionnaire Phase: . After the experiment, the participants were asked to fill in a questionnaire. The span of this event is indicated by a pregenerated epoch named ‘Questionnaire’. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#example-dataset",
    
    "relUrl": "/docs/tutorial/basics.html#example-dataset"
  },"23": {
    "doc": "Basic Walkthrough",
    "title": "Running the Toolbox",
    "content": "Download the Toolbox as described here, and launch it by running the PhysioDataToolbox.exe file. When run for the first time, it may take a few minutes before the Toolbox loads. Once the Toolbox loads, read the welcome message and launch the Session Manager. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#running-the-toolbox",
    
    "relUrl": "/docs/tutorial/basics.html#running-the-toolbox"
  },"24": {
    "doc": "Basic Walkthrough",
    "title": "Importing Files",
    "content": "Click on the Open button in the Session Manager and select the folder with the example files (PhysioDataToolbox\\​data\\​example_datasets\\​ECG_EDA_BP_ShockCS\\). Alternatively, you can open the example files by going to Menu, selecting Open Example Files and clicking ECG EDA BP ShockCS. The Session Manager should now list all PhysioData files inside the folder (12 in total). Note the PhysioAnalyzers within the files in red. Because we will make new Analyzers in this walkthrough, start by clicking the Remove Analyses button below the file tree, checking all PhysioAnalyzer Tags checkboxes, and clicking the Remove from all files button. &times; Figure 1: The Session Manager with the example files loaded. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#importing-files",
    
    "relUrl": "/docs/tutorial/basics.html#importing-files"
  },"25": {
    "doc": "Basic Walkthrough",
    "title": "View Raw Data",
    "content": "Click on the View Raw Data button to launch the Raw Data Viewer. The Raw Data Viewer displays all signal channels, events, eye-tracking data, and epochs inside the PhysioData file. When a marker channel is detected, it is automatically analyzed and visualized in a separate tab. | Which file is currently being shown is specified in the Current File bar above the tabs. To navigate to a different file, either select it using the dropdown menu, or use the buttons. | Click on the Raw Signals tab to see the data. Scroll up and down using the scrollbar to reveal more channels. Take note of what data are in which channel. To zoom, select a section of the graph using the right mouse button. Double-clicking the graph resets the view. Additional zooming and panning options are available through (a combination of) the other mouse buttons, see the Data Viewers section. | . Figure 2: Raw Signals tab of the Raw Data Viewer. | To view the markers inside the current file, click on the Markers in signal channel 4 tab. In the example files, channel 4 is a digital marker channel, which is automatically detected by the Toolbox. | . Figure 3: Markers tab of the Raw Data Viewer. | Click on the Events tab to see the events inside the current file. | . Figure 4: Events tab of the Raw Data Viewer. | Click on the File events tab to view the file events inside the current file. | Click on the Prebuilt Epochs tab to view the epochs that were prebuilt in the PhysioData File. Below, in the Defining Epochs chapter we will generate more epochs. | When done inspecting the raw data, close the Raw Data Viewer and return to the Session Manager. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#view-raw-data",
    
    "relUrl": "/docs/tutorial/basics.html#view-raw-data"
  },"26": {
    "doc": "Basic Walkthrough",
    "title": "Creating PhysioAnalyzer modules",
    "content": "PhysioAnalyzer modules are signal-specific preprocessing, visualization and analysis pipelines that users can construct and apply to the files. If, for instance, a PhysioData file contains electrocardiogram (ECG) and skin conductance (SC) signals, the user can add ECG and SC modules to the file in order to perform ECG and SC specific analyses on the respective data. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#creating-physioanalyzer-modules",
    
    "relUrl": "/docs/tutorial/basics.html#creating-physioanalyzer-modules"
  },"27": {
    "doc": "Basic Walkthrough",
    "title": "Creating the ECG PhysioAnalyzer",
    "content": ". | In the Session Manager, click on the Create New Analyzer button and choose the ECG Signal Analyzer. | Since ‘ECG’ is a fitting name for the module and the ECG signal is in channel 1 (click the See Channels button to verify this), these settings can be left at their default values. | Click on the View/Edit Epochs button to open the Epoch Builder. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#creating-the-ecg-physioanalyzer",
    
    "relUrl": "/docs/tutorial/basics.html#creating-the-ecg-physioanalyzer"
  },"28": {
    "doc": "Basic Walkthrough",
    "title": "Defining Epochs",
    "content": "Epochs, also called trails or segments, are sections of interest within a recording. Epochs are generally defined relative to markers or events, which are special timestamped moments within the recorded data. The toolbox is designed to automatically segment a signal into epochs using a collection of user-specified rules, and extract relevant metrics for each epoch. For more information on epochs, markers, and events, see the Epochs chapter. The Define Epochs tab of the Epoch Builder window shows the Epoch Definition Table. Here, the rules for defining epochs are created. By default, an epoch spanning the whole file is created. Notice that in the Preview of epochs graph the prebuilt epochs are also visible. | Click on the second tab to see all referenceable data inside the current file. In the example files, these are the markers in channel 4, the events, and the file events. Let’s say we want to create the following epochs: . | Habituation epochs that span from the events ‘Habituation_Start’ to ‘Habituation_End’ | Stimulus epochs: . | CS+ image 1 epochs, that span from the onset of marker with value 11 to 8 seconds later | CS+ image 2 epochs, that span from the onset of marker with value 12 to 8 seconds later | . | Extinction supra epochs that span for the duration of the marker with value 100 | . | . NOTE: for more details about the phases of the experiment and their associated markers and events, see the Example Dataset section. Define the habituation epochs . The epoch definition of the habituation epochs is provided in the Figure below. | Go back to the Define Epochs tab. | Click add row. | In the newly created row, fill in the epochName: Habituation. | Define the start of the epoch: . | Since we want to reference an event, fill in events in the startChannel field, or right-click on the field and select Channels available in test file and Use Events (26 found). | Fill in the startValue, which is the name of the event, in this case Habituation_Start (note that the start- and endValue are case-sensitive!), or right-click on the field, select Events available in channel and select Habituation_Start (2 occurrences). | Because we want to create epochs of all habituation segments, we want to reference all ‘Habituation_Start’ events. This is achieved by filling in 1:last in startOccur, or right-clicking on the field and selecting All occurrences. | The epochs should start directly on the ‘Habituation_Start’ events, therefore we can leave the startDelay at 0. | . | Define the end of the epoch: . | The definition of the end of the epoch is pretty similar to the definition of the start of the epoch. We can quickly copy the information of the start of the epoch by right-clicking on any of the end fields, and selecting Copy from start definition. | Because we want the epoch to end at the ‘Habituation_End’ events, modify the endValue to Habituation_End, or right-click on the field and select Events available in channel and select Habituation_End (2 occurrences). | . | Hit the Generate Epochs button in the top left corner and observe that two epochs are added in the Preview of epochs graph. | . Figure 5: The Epoch Definition Table with the Habituation epochs added. Define the stimulus epochs . The epoch definition of the stimulus epochs is provided in the Figure below. | Add another row to the Epoch Definition Table. | In the new row, fill in the epochName: CS_plus_Resp_img_1. | Define the start of the epochs: . | Since we want to reference markers in channel 4, fill in 4 in the startChannel cell (or right-click on the cell and select the appropriate option). | For the CS+ with image 1 trials, marker 11 was used, fill in 11 in startValue (or right-click on the cell and select the appropriate marker). | Because we want to generate epochs from all markers with value 11, fill in 1:last in startOccur which will take all occurrences (or right-click and select All occurrences). Note that although in file ‘CS_Example_01’ there is only one occurrence of marker 11, this is not the case for other files! | The epochs start at the onset of the marker, therefore the startDelay can be left at 0. | . | Define the end of the epochs: . | Copy the information of the start of the epoch to the end of the epoch. | Adjust the endDelay to 8 (note that the start- and endDelay are in seconds!). | . | Since the CS+ with image 2 epoch definition is very similar to the CS+ image 1 epoch definition, right click on any of the cells of the row we just created and select Duplicate row. | In the new row, we only need to adjust the epoch name and the marker value to reference the CS+ image 2 trials: . | Fill in CS_plus_Resp_img_2 in epochName. | Fill in 12in startValue and in endValue. | . | Hit the Generate Epochs button and check whether the epochs were created correctly. | . Figure 6: The Epoch Definition Table with the stimulus epochs added. Define the extinction supra epochs . The epoch definition of the extinction supra epochs is provided in the Figure below. | Add another row. | Fill in the epochName: Ext_Supra. | Define the start of the epochs: . | Again, we want to reference markers in channel 4, fill in 4 in the startChannel cell (or right-click on the cell and select the appropriate option). | Fill in 100 in startValue (or right-click on the cell and select the appropriate marker) to reference markers with value 100. | Fill in 1:last in startOccur to reference all occurrences (or right-click and select All occurrences). | The startDelay can be left at 0. | . | Define the end of the epochs: . | Copy the information of the start of the epoch to the end of the epoch. | Adjust the endDelay to dur, or right-click on the cell and select Duration of the marker. This will create epochs that span for the duration of the markers (onset to offset). | . | Hit the Generate Epochs button and notice that 12 small epochs were created. | . Figure 7: The Epoch Definition Table with the extinction supra epochs added. Advanced epoch definitions using regular expressions The following part shows how to create epochs by referencing multiple events with regular expressions. Most users will not need to use them. Let’s say we also want to create the following epochs: . | Baseline epoch that spans from the event ‘Baseline_Start (&lt;MOVIENAME&gt;)’ to the event ‘Baseline_End (&lt;MOVIENAME&gt;)’. | Rating epochs that start 5 seconds before the ‘Pic_&lt;ID&gt;_rated_&lt;RATING&gt;’ events and end at the ‘Pic_&lt;ID&gt;_rated_&lt;RATING&gt;’ events. | . Define the baseline epoch . The epoch definition of the baseline epoch is provided in the Figure below. | Add another row to the Epoch Definition Table. | Fill in the epochName: Baseline. | Define the start of the epoch: . | Fill in events in the startChannel field or right click and navigate to the right channel. | Fill in the startValue. The baseline events start with ‘Baseline_Start’, followed by a space and then the name of the video clip the participant watched in parentheses: ‘Baseline_Start (&lt;MOVIENAME&gt;)’. We can reference all baseline events with all different movie names using one regular expression: ^Baseline_Start (.*)$ . | ^ and $ mark the start and end of the regular expression, respectively. | . means any single character. | * means 0 or more consecutive times. | . | Leave startOccur to 1 (there is only one baseline segment). | Leave startDelay at 0. | . | Define the end of the epoch: . | Copy the information of the start of the epoch to the end of the epoch by right-clicking and selecting Copy from start definition. | Modify the endValue to ^Baseline_End (.*)$ | . | Hit the Generate Epochs button and check whether the epoch was created correctly. | . Figure 8: The Epoch Definition Table with the Baseline epochs added. Define the rating epochs . The epoch definition of the rating epochs is provided in the Figure below. | Click Add Row. | Fill in the epochName: Rating. | Define the start of the epochs: . | Fill in events (or use the right-click option) in startChannel. | We want to reference all the rating events, but because participants gave different ratings to different pictures, the names of these events differ per participant. Again, we can use regular expressions to reference all events with the same pattern. In our case, we want to reference all events with the following pattern: ‘Pic_&lt;ID&gt;_rated_&lt;RATING&gt;’, where &lt;ID&gt; can be a digit ranging 1-4 and &lt;RATING&gt; can be a digit ranging 1-5. In regular expression this translates to Pic_\\d_rated_\\d, where \\d means any numeric digit. When using regular expressions in the Epoch Builder, always start with ^ and end with $. Thus, fill in ^Pic_\\d_rated_\\d$ in startValue. | Reference all occurrences in startOccur. | We want the epochs to start 5 seconds before the events, therefore, fill in -5 in startDelay. | . | Define the end of the epochs: . | Copy the start epoch fields to the end epoch fields. | We want the epochs to end at the events, therefore fill in 0 in endDelay. | . | Hit the Generate Epochs button and notice that 4 small epochs were created. | . Figure 9: The Epoch Definition Table with the rating epochs added. Finish creating the ECG PhysioAnalyzer . When done with creating epochs, click OK to close the Epoch Builder window and return to the PhysioAnalyzer settings window. We’ll leave the settings to their default values for now (see the ECG Analyzer chapter in the User Guide for more information on the ECG analyzer settings). Click OK to save the changes and return to the Session Manager. Note that although we created an analyzer, the analyzer and the settings and epochs it contains are not applied to the data files yet. We will first create the other analyzers, then apply all analyzers to our data files. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#defining-epochs",
    
    "relUrl": "/docs/tutorial/basics.html#defining-epochs"
  },"29": {
    "doc": "Basic Walkthrough",
    "title": "Creating the SC PhysioAnalyzer",
    "content": ". | Click the Create New Analyzer button again and select the Skin Conductance Analyzer. | Fill in 2 in the channel number field to make the module use the EDA signal in channel 2. | We will use the same epochs as we defined in the ECG module, therefore, select PhysioAnalyzer with tag: from the drop-down menu, and fill in ECG in the field below. This will make this module dynamically use any epochs we defined in the ECG module. | Click Ok to close the window and add these settings to the PhysioAnalyzer tree (we’ll leave the settings at their default values, for more information on the Skin Conductance Analyzer settings, see the Skin Conductance Analyzer chapter in the User Guide). | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#creating-the-sc-physioanalyzer",
    
    "relUrl": "/docs/tutorial/basics.html#creating-the-sc-physioanalyzer"
  },"30": {
    "doc": "Basic Walkthrough",
    "title": "Adding the HRV PhysioAnalyzer",
    "content": ". | Click the Create New Analyzer button again and select the HRV Analyzer | Fill in ECG in the Tag of the ECG Analyzer field. In order for it to function, the HRV analyzer must be linked to an ECG module. | As with the previous analyzer, we will use the same epochs as we defined in the ECG module. Select PhysioAnayzer with tag from the epoch drop-down menu and fill in ECG in the field below. | Click Ok to close the window. We’ll leave the HRV settings to their default, for more information on these settings, consult the HRV Analyzer chapter in the User Guide. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#adding-the-hrv-physioanalyzer",
    
    "relUrl": "/docs/tutorial/basics.html#adding-the-hrv-physioanalyzer"
  },"31": {
    "doc": "Basic Walkthrough",
    "title": "Applying the Settings to the PhysioData files",
    "content": ". | In the Session Manager’s PhysioAnalyzer Configurator panel, click the Apply to PhysioData Files and the Apply to all 12 file(s) buttons to propagate the settings of the listed PhysioAnalyzers to all the files. This will create one ECG, one SC, and one HRV module inside each file. Note that the modules inside the PhysioAnalyzer tree on the right side of the Session Manager don’t do anything until they are applied. | You should now see ECG, HRV and SC after each file in the PhysioData file tree. The red color indicates that these modules have not yet been marked as ‘accepted’ by the user. You can expand each file to reveal the PhysioAnalyzers inside it, and each PhysioAnalyzer to reveal its current settings and state. | Click Remove Analyzer in the PhysioAnalyzer Configurator panel three times to remove the analyzers from this panel. Note that they are still in the files. To reimport the settings from a file, select the desired file and click Import From PhysioData File. This will copy the PhysioAnalyzer settings in that file back to the PhysioAnalyzer Configurator. | . Figure 10: The file tree after the PhysioAnalyzers have been applied to the files. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#applying-the-settings-to-the-physiodata-files",
    
    "relUrl": "/docs/tutorial/basics.html#applying-the-settings-to-the-physiodata-files"
  },"32": {
    "doc": "Basic Walkthrough",
    "title": "Reviewing PhysioAnalyzer Data",
    "content": "This section shows the basics of reviewing and correcting PhysioAnalyzer data. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#reviewing-physioanalyzer-data",
    
    "relUrl": "/docs/tutorial/basics.html#reviewing-physioanalyzer-data"
  },"33": {
    "doc": "Basic Walkthrough",
    "title": "Launching and Using the PhysioAnalyzer Viewer",
    "content": ". | In the Session Manager, click the View Analyses button in the PhysioData Files panel to open the PhysioAnalyzer Viewer window. This window visualizes each PhysioAnalyzer present inside the current file. One tab is created per analyzer. | The top graph shows the epochs that were generated from the epoch definition. Click on the epochs bar for more epoch information. Below that are the Analyzer-specific data graphs, e.g. for ECG it contains the ECG, Interbeat Interval (IBI) and Instantaneous Heart Rate (IHR) plots. In the legend you can click on a line to hide it. Right-clicking the ECG graph reveals some extra options. | Inspect the plots inside the ECG and SC tabs using the zooming and panning commands described previously. Use the file bar to navigate through the files. | Corrections can be saved in individual physioData files by using the Save button next to the Menu. | . Figure 11: The PhysioAnalyzer Viewer. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#launching-and-using-the-physioanalyzer-viewer",
    
    "relUrl": "/docs/tutorial/basics.html#launching-and-using-the-physioanalyzer-viewer"
  },"34": {
    "doc": "Basic Walkthrough",
    "title": "Correcting the ECG data",
    "content": "The ECG module features the ability to mark and reject erroneous R-peaks and IBIs. | Navigate to the ECG tab in ‘CS_Example_01’. | Looking at the ECG and IBI plots, a few anomalies can be noticed: . | In the ECG plot there are two R-peaks clearly higher than the other R-peaks at around 500 s and 1100 s. This does not necessarily mean these peaks are faulty, but it is worth checking out. | In the IBI plot there are a few clear outliers around 300 and 900 s, with high IBI values, and some possible outliers between 400 and 600 s and around 1100 s, with low IBI values. Note that deviating QRS waves can also be detected by using the View R-Waves button, introduced in version 0.6.2 (info). | . | Zoom in (by selecting an area with the right mouse button) at the high R-peak around 500s. Notice that this peak is not a ‘real’ R-peak, but an extra peak between two R-peaks, resulting in two short IBIs. The R-peak can be removed by selecting an area covering the faulty R-peak (using the left mouse button), and selecting Disregard R-Peaks in selected section. The disregarded region is visualized in the R-Skip graph above the ECG plot. Notice how removing this R-peak also corrects the faulty IBIs at this time point. | . Figure 12: Selecting and disregarding an R-peak. Figure 13: Newly created R-skip zone. | Zoom in at the 300 s outliers in the IBI plot and notice how this is caused by missing R-waves in the ECG signal, resulting in two instances of doubly long IBIs. Since R-peaks cannot be manually added in this version of the toolbox, correction must involve removing the bad IBIs. | The IBI artifacts can be manually corrected in a similar manner as removing the R-Peak. Zoom in to the IBI artifact at 274 s, and, using the left mouse button, select an area covering the IBI. Subsequently, select Disregard IBIs in selected section from the menu. The toolbox will now refrain from using any IBIs located inside this newly inserted IBI skip zone, which is visualized in the IBI-skip graph. | . Figure 14: IBI artifacts. Figure 15: Select and disregard IBI. | Since manually removing individual IBIs can be time consuming, a better approach may be to adjust the Maximum IBI value setting in this particular PhysioAnalyzer. Zoom the IBI plot completely out by double clicking it. Notice how the correct IBIs in this file are never located above 1.3 s. Click the View/Edit Settings button in the ECG tab and set the Maximum IBI value to 1.3. After clicking Ok, the ECG module will automatically remove all IBIs above the said threshold. In the IBI graph, these automatically rejected IBIs are displayed as diamonds and are not used to generate the Instantaneous Heart Rate (IHR), which is calculated by interpolating all non-rejected IBIs. Note that adjusting the settings within the PhysioAnalyzer Viewer will only affect the current file. Other files are not affected and keep the settings as originally specified when the PhysioAnalyzer was created. | . Figure 16: Edit ECG settings of current PhysioData file. | Check out and if necessary remove the possible outliers located around 550 s and 1100 s. | When done, mark the ECG module in ‘CS_Example_01’ as accepted by clicking the checkbox. | Press the Save button next to the Menu button to save the corrections you just made in the current PhysioData file. | Navigate to the ECG tab in ‘CS_Example_04’ and notice that there seem to be a lot of artifacts in the IBI data. | . Figure 17: ECG containing a lot of IBI artifacts. | Zoom in at some of the artifacts. Many IBIs are automatically rejected, visualized by diamonds in the IBI graph. Notice that each time before an outlying IBI occurs, an R-peak is ‘missed’ by the PhysioData Toolbox. This means that a ‘true’ R-peak was not detected as R-peak. Rather than manually removing each IBI, we can fix this by adjusting the Minimum R-peak value setting in this particular PhysioAnalyzer. Zoom completely out by double clicking on the ECG graph. Notice that the R-peaks hover around 0.5 mV, but do not go below 0.3 mV. Click the View/Edit Settings button in the ECG tab and set the Minimum R-peak value value to 0.3. After clicking Ok, the ECG module will automatically detect the R-peaks with a value above 0.3. | . Figure 18: R-peaks missed by the PhysioData Toolbox. Figure 19: Adjusting the settings of the PhysioAnalyzer for the current PhysioData file. | One outlying IBI remains at around 800 s. Remove this IBI. | When done, mark this module as accepted by clicking the checkbox. | Press the Save button to save the corrections in the current PhysioData File. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#correcting-the-ecg-data",
    
    "relUrl": "/docs/tutorial/basics.html#correcting-the-ecg-data"
  },"35": {
    "doc": "Basic Walkthrough",
    "title": "Correcting the SC data",
    "content": "Data correction in the Skin Conductance graph consists of the user inserting Raw-Skip zones inside which the raw data are not used. Instead, the data inside the zone are replaced by linear interpolation before applying the low-pass filter, and performing the subsequent processing and analysis actions. | Go the the SC tab in ‘CS_Example_01’. Notice how the skin conductance signal features two downward spikes, possibly caused by the electrodes coming loose (driving down the conductance) and one upwards spike, possibly caused by the electrodes getting short circuited (driving up the conductance). | In the Skin Conductance graph, zoom in to the artifact at around 650 s. Notice how the (raw) signal is suddenly dropping to 0 and does not reflect any natural skin conductance reaction. However, the toolbox does assign SCR landmarks to this spike (SCR valley and peak). It is thus important to remove these faulty sections. | Select a section straddling the artifact. Focus on covering the spike in the gray raw data signal. Select Disregard raw skin conductance data and interpolate and Do not detect SCRs with landmarks in selected section to remove the spike and to not use the section for SCR detection. | . Figure 20: Selecting and disregarding a SC zone. Figure 21: Newly created SC raw skip zone. | Do the same for the other artifacts. | When done, mark the SC module in ‘CS_Example_01’ as accepted by clicking the checkbox. | Press the Save button to save the corrections you just made. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#correcting-the-sc-data",
    
    "relUrl": "/docs/tutorial/basics.html#correcting-the-sc-data"
  },"36": {
    "doc": "Basic Walkthrough",
    "title": "Viewing the HRV data",
    "content": "The HRV module itself does not allow users to correct artifacts, this must instead be done in the linked ECG module. Any changes made to the IBIs in the linked ECG module are automatically transmitted to the HRV module, and the graphs and results table are automatically updated. Note that it is important to remove artifacts in both the R-peak and IBI signals in the ECG module. When, for example, the analyzer incorrectly identified an extra R-peak, correcting the corresponding IBI alone will incorrectly mark the preceding and succeeding IBI as noncontiguous, which can have an effect on the HRV results. | Navigate to the HRV tab in ‘CS_Example_01’. Note that we previously corrected the IBI signal in the ECG module of this file and that this is also visible when looking at the IBI plot in the top. Zoom in and notice the missing IBIs around 270 s. | . Figure 22: The HRV module zoomed in at the IBIs around 270 s. | Select the epoch that you wish to review the results of by using the dropdown menu at the left, or by clicking the buttons next to it, or by clicking on one of the epoch rectangles in the epoch plot in the top of the window. | Inspect the plots using the zooming and panning commands. In the right bottom part of the window the Detrended IBIs, Successive Differences, Poincare Plot, and Lomb-Scargle Periodogram are displayed. These plots can be minimized by clicking the arrow button in the right upper corner. | When reviewed, mark the HRV module in ‘CS_Example_01’ as accepted. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#viewing-the-hrv-data",
    
    "relUrl": "/docs/tutorial/basics.html#viewing-the-hrv-data"
  },"37": {
    "doc": "Basic Walkthrough",
    "title": "Viewing results",
    "content": ". | Review the other modules in the other files, correct where necessary, and mark them as accepted. | You can view each module’s individual results by clicking the View Results button. This will perform descriptive analyses on each epoch in the current PhysioAnalyzer, and show the results in Excel. In the INFO tab summaries of all current settings and states are provided. | Close the PhysioAnalyzer Viewer when done and go back to the Session Manager. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#viewing-results",
    
    "relUrl": "/docs/tutorial/basics.html#viewing-results"
  },"38": {
    "doc": "Basic Walkthrough",
    "title": "Updating the Settings",
    "content": "At times it may be necessary to update one or more specific settings within multiple existing PhysioAnalyzers, without overwriting other customized settings, and without removing the corrections. This can be done using the PhysioAnalyzer Configurator in the Session Manager. Say we want to update the epoch definitions in all files, but leave the other settings intact: . | Select any file in the file tree, and click the Import from PhysioData file button. Remove the Skin Conductance Analyzer and the HRV Analyzer from the PhysioAnalyzer tree by selecting them (by clicking them) and clicking the Remove Analyzer button. | Click the View/Edit Analyzer button, then in the settings dialog, the Click to View/Edit Epochs button. | We are going to add trial baseline epochs (ranging 2 seconds before stimulus onset to stimulus onset) that precede the already existing CS+ epochs. | Add a row. | Fill in CS_plus_Base_img_1 in epochName. | Leave startChannel at 4. | Fill in 11 in startValue. | Fill in 1:last in startOccur. | Fill in -2 in startDelay. | Copy the start definition fields to the end definition fields. | Modify the endDelay to 0. | Right click in a field of the row that was just created and select Duplicate row. | Modify the epochName to CS_plus_Base_img_2. | Modify the startValue and endValue to 12. | Click Generate Epochs and verify that the epochs were created correctly. | . | We will also add a Metadata Column so that more information is included in the exported data: . | Click Add Metadata Column | Enter Type in the Column Name field. | In the newly created column, fill in response in ‘Resp’ epochs (rows 3 and 4) and baseline in the ‘Base’ epochs (rows 6 and 7). | . | . Figure 23: The Epoch Definition table with the baseline epochs and metadata column added. | Click Ok in the Epoch Builder and the Settings dialog to return to the Session Manager. | Expand the ECG module in the PhysioAnalyzer tree, and deselect all settings except the Epochs (labeled Epochs from definition: 7 row(s) in table). | . Figure 24: The ECG module with only the Epochs setting checked. | Click the Apply to PhysioData Files. This will open a summary of the settings that are to be pushed to the files. In this window, click Apply to all files to propagate the listed settings, in this case the epochs, to all the PhysioData files. This will leave the other settings intact. | . Figure 25: The Batch PhysioAnalyzer Propagator window. It shows a summary of the PhysioAnalyzers that are about to be pushed to the files, including their settings. Note that the Maximum IBI value setting in ‘CS_Example_01’ and the Minimum R-peak value in ‘CS_Examples_04’ were previously customized and differ from the other files. As such, if that setting were not unchecked in the PhysioAnalyzer tree, its value would be pushed to all files overwriting any file-specific values. | Use the PhysioAnalyzer viewer to verify that the new epochs are present in all files, and that the customized Maximum IBI value setting in ‘CS_Example_01’ and Minimum R-peak value in ‘CS_Examples_04’ are still intact. | . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#updating-the-settings",
    
    "relUrl": "/docs/tutorial/basics.html#updating-the-settings"
  },"39": {
    "doc": "Basic Walkthrough",
    "title": "Exporting Analysis",
    "content": "The results of all the PhysioAnalyzers inside multiple PhysioData files can be exported to different file formats, by first selecting the desired PhysioData files in the file tree, then clicking the Epoch Summaries button in the Data Export panel. We will export the data to an Excel file. | Select all PhysioData files (tip: use ctrl + A). | Click the Epoch Summaries button, then click Analyze all files, wait for the toolbox to collect the descriptive analyses and then select As one Excel file, with one table per worksheet and click Ok. Finally, click the Open Excel File button to view the file. The results are automatically saved to a new timestamped Excel file in the current data directory. | . Figure 26: The Data Export panel. | For each unique PhysioAnalyzer tag, two new sheets are created: the &lt;tag&gt;_RESULTS and &lt;tag&gt;_INFO sheets. These sheets can be accessed using the tabs in the bottom left corner of the Excel window. The ‘RESULTS’ sheet contains all the results for all epochs in that PhysioAnalyzer, inside all selected files. Notice that these results include the user created Metadata column Type_user. The ‘INFO’ sheet contains information about the settings and state. Rows that belong to the same file are grouped together by color in the first column. | Note that the data are automatically formatted as Excel tables, allowing you to easily filter and sort the data. As an example, the table can be filtered to only show the stimulus baseline and response epochs by clicking the button in the epochName table header (cell D:5), and selecting only the stimulus epochs (that start with ‘ECG_CS’). | . Figure 27: The Excel data export format. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#exporting-analysis",
    
    "relUrl": "/docs/tutorial/basics.html#exporting-analysis"
  },"40": {
    "doc": "Basic Walkthrough",
    "title": "Saving the session",
    "content": "Edits made to PhysioData files can be saved in individual files by clicking the Save button in the PhysioAnalyzer Viewer. This will save the PhysioAnalyzers, including their settings and state, and all user corrections in that PhysioData file. To save all files, click the Save all files button in the Session Manager. It is strongly advised to save often to prevent data loss in case the PhysioData Toolbox inadvertently closes. Note, only PhysioAnalyzers that have been applied to PhysioData files are saved inside their respective files. Those PhysioAnalyzers are visualized in the file tree inside the PhysioData files panel in the Session Manager. PhysioAnalyzers in the PhysioAnalyzer configurator are not saved and will be lost when the Toolbox is closed. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/basics.html#saving-the-session",
    
    "relUrl": "/docs/tutorial/basics.html#saving-the-session"
  },"41": {
    "doc": "Blood Pressure Analyzer",
    "title": "Blood Pressure Analyzer",
    "content": "The Blood Pressure Analyzer extracts the systolic, diastolic and mean arterial blood pressures, as well as the pulse, from a continuous blood pressure signal, and calculates descriptive statistics for each epoch. | Introduction | User Corrections | Settings | Metrics | Resampled Signals | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/bp-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/bp-module.html"
  },"42": {
    "doc": "Blood Pressure Analyzer",
    "title": "Introduction",
    "content": "The Blood Pressure (BP) Analyzer performs standard epoch-based analyses on a BP signal. The module features automatic calibration event detection, pulse estimation, and user-correction of the systolic peak detection. &times; Figure 1: The BP Analyzer GUI, showing the BP signals and the estimated pulse. Note the automatically detected calibration event around 1865 seconds. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/bp-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/bp-module.html#introduction"
  },"43": {
    "doc": "Blood Pressure Analyzer",
    "title": "User Corrections",
    "content": "The Blood Pressure Analyzer allows the user to define zones in which the systolic and diastolic landmarks are disregarded. The module also estimates the pulse, in BPM, using the detected systolic peaks. The pulse signal itself cannot be corrected, and is instead automatically filtered using MATLAB’s hampel filter (k = 10, nSigma = 4). Artifacts in the pulse signal must thus be corrected indirectly by inserting correction zones in the blood pressure signal. When a noisy section is detected, the user can insert a correction zone by left-clicking in the graph and dragging the mouse. Once a section is selected, landmarks can either be disabled or enabled. It is advisable to select a segment that is as big as possible, maximizing the interval in which no peaks should be detected. Figure 2: A blood pressure plot showing some deviating waveforms around 1880 seconds. Figure 3: Once the noisy section is selected, systolic and diastolic peak detection can be enabled or disabled within that section. Figure 4: Disabling the peak detection within the previously selected section removes the deviation from the interpolated blood pressure signals. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/bp-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/bp-module.html#user-corrections"
  },"44": {
    "doc": "Blood Pressure Analyzer",
    "title": "Settings",
    "content": "The Blood Pressure Analyzer assumes that the unit of the BP signal is mmHg. If this is not the case, fill in an appropriate gain value (multiplier) to transform the raw signal into mmHg. The toolbox automatically detects calibration segments in the raw signal, and removes them from the filtered signal. The user cannot modify the segments that were classified as calibration segments. In the case that the calibration fails, the user may tweak the sensitivity, or completely disable the calibration detection by setting the sensitivity to zero. A calibration sensitivity values below have been found to work well: . | BMEYE Nexfin: 0.02 (default). | Finapres: 0.02 (default). | BIOPAC NIBP100D (CNAP Monitor by CN systems): 0.002. | . The auto-generated list below shows the settings available in the Blood Pressure Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings Settings for processing the raw blood pressure signal. This module assumes that the signal is in mmHg, if it is not, fill in a multiplier to convert it (e.g. 100). | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Lowpass filter [Hz]: The low-pass filter and its cutoff frequency. | . | Calibration Detection Settings: The Toolbox automatically detects calibration segments in the raw signal, and cuts these parts out. The setting below determines the detection sensitivity (0.02 recommended). | Calibration detection sensitivity: The sensitivity of the automatic calibration detection. | . | Systolic Peak Detection: To increase robustness, the Toolbox automatically applies a minimum separation criteria to the detected Systolic peaks. | Minimum systolic-peak separation [s]: Systolic peaks must be this distance from each other. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/bp-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/bp-module.html#settings"
  },"45": {
    "doc": "Blood Pressure Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the Blood Pressure Analyzer module. Table 1: The metrics calculated by the Blood Pressure Analyzer module. | Variable: | Unit: | Description: | . | Min_Sys_BP | mmHg | The minimum systolic blood pressure, per epoch. | . | Max_Sys_BP | mmHg | The maximum systolic blood pressure, per epoch. | . | Mean_Sys_BP | mmHg | The mean systolic blood pressure, per epoch. | . | Count_of_Sys_Points | - | The number of systolic peaks detected inside the epoch. | . | Min_Dia_BP | mmHg | The minimum diastolic blood pressure, per epoch. | . | Max_Dia_BP | mmHg | The maximum diastolic blood pressure, per epoch. | . | Mean_Dia_BP | mmHg | The mean diastolic blood pressure, per epoch. | . | Count_of_Dia_Points | - | The number of diastolic valleys detected inside the epoch. | . | Min_MAP | mmHg | The minimum MAP (Mean Arterial Pressure), per epoch. | . | Max_MAP | mmHg | The maximum MAP (Mean Arterial Pressure), per epoch. | . | Mean_MAP | mmHg | The mean MAP (Mean Arterial Pressure), per epoch. | . | Mean_Pulse | BPM | The mean of the interpolated pulse, as estimated from the intervals between the systolic peaks, per epoch. | . | Pulse_Coverage | % | The percentage of the epoch for which there is (interpolated) pulse data. | . | Missing_Data | % | Percentage of missing data (either due to calibrations or user rejection), per epoch. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/bp-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/bp-module.html#metrics"
  },"46": {
    "doc": "Blood Pressure Analyzer",
    "title": "Resampled Signals",
    "content": "When exporting the resampled epoch signals, the Blood Pressure Analyzer resamples and extracts the filtered BP signal, the systolic BP signal, the diastolic BP signal, and the MAP signal. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/bp-module.html#resampled-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/bp-module.html#resampled-signals"
  },"47": {
    "doc": "Version History",
    "title": "Version History",
    "content": "The PhysioData Toolbox is in constant development. The latest public version is 0.6.3. ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html",
    
    "relUrl": "/docs/change-log.html"
  },"48": {
    "doc": "Version History",
    "title": "Version Compatibilities",
    "content": "Although the Toolbox can generally open files from older versions, it is not guaranteed that the results obtained in different PhysioData Toolbox versions are completely equal. It is therefore not advisable to compare data analyzed using different Toolbox versions. In any case, always double-check the PhysioAnalyzer data, settings and user-corrections when loading older files. ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#version-compatibilities",
    
    "relUrl": "/docs/change-log.html#version-compatibilities"
  },"49": {
    "doc": "Version History",
    "title": "Documentation Archive",
    "content": "Archival snapshots of this website representing older PhysioData Toolbox versions can be found here. ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#documentation-archive",
    
    "relUrl": "/docs/change-log.html#documentation-archive"
  },"50": {
    "doc": "Version History",
    "title": "PhysioData Toolbox v0.6.3 (Latest)",
    "content": "PhysioData Toolbox version 0.6.3 contains several minor bugfixes and improvements. It was released on Jan 27th, 2022. Download it here. | Bug fixes and improvements: . | Fixed an issue that may cause referenceable events to be plotted in an incorrect graph. | The Pupil size module’s fast-mode has been improved and documented (link). | The minimum selection size has been decreased (narrower areas can now be selected). | Resampling timestamps (in the time_Epoch variable) are now rounded to the nearest 0.0001 second to avoid floating point errors from preventing equivalent time-points from being grouped together. Additionally, the variable resampled_index has been added, which indicates the index of the resampled data-point. | Other minor GUI corrections and framework updates. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#physiodata-toolbox-v063-latest",
    
    "relUrl": "/docs/change-log.html#physiodata-toolbox-v063-latest"
  },"51": {
    "doc": "Version History",
    "title": "PhysioData Toolbox v0.6.2",
    "content": "PhysioData Toolbox version 0.6.2 contains several improvements to its framework, user-interface and documentation. It was released on Dec 23rd, 2021. Download it here. The most user-relevant updates are: . | New converters: The MRI scanner Physlog and BioSemi converters have been updated and reintroduced. | Bug fixes and improvements: Version 0.6.2 contains several bugfixes, including: . | Resampling when files contain multiple modules of the same type no longer crashes. | The Skin Conductance module no longer crashes when analyzing epochs with a duration of 100 ms or less. | The Biopac converter no longer saves ‘New Rate’ events as labels. | Fixed an issue causing the Data Previewer to not regenerate the data. | . | New features (beta): . | The ECG module now allows users to manually add R-peaks. | The ECG module can now visualize superimposed QRS waves for easier anomaly detection. | The Pupil Module now also supports ‘Fast Mode’ for easier corrections. | The referenceable events table (in the Raw Data Viewer or the Epoch Builder) can now also show a summary of the events. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#physiodata-toolbox-v062",
    
    "relUrl": "/docs/change-log.html#physiodata-toolbox-v062"
  },"52": {
    "doc": "Version History",
    "title": "PhysioData Toolbox v0.6.1",
    "content": "Contains all the improvements of v0.6.0, as well as a minor bugfix relating to the Gazedata Converter. It was released on July 8th, 2021. Download v0.6.1 here. ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#physiodata-toolbox-v061",
    
    "relUrl": "/docs/change-log.html#physiodata-toolbox-v061"
  },"53": {
    "doc": "Version History",
    "title": "PhysioData Toolbox v0.6.0",
    "content": "PhysioData Toolbox version 0.6 contains several improvements over v0.5. | New epoch definition rules: PhysioData Toolbox Version 0.6 contains a completely new epoch definition rule-set, which makes it possible to define multiple epochs using the same rule. Additionally, the use of regular expression and integer ranges for marker/event matching has been implemented. | Various bug and framework fixes: The new version features a partially refactored codebase, with several bug-fixes and performance improvements. | SCR detection: The Toolbox now detects Skin Conductance Responses. | New example datasets: Included now are new example datasets. | This website: The PhysioData Toolbox documentation has been updated and moved from a pdt document to this website. | Less converters: The MRI scanner Physlog and BioSemi converters have been removed until a future release. | . ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#physiodata-toolbox-v060",
    
    "relUrl": "/docs/change-log.html#physiodata-toolbox-v060"
  },"54": {
    "doc": "Version History",
    "title": "PhysioData Toolbox v0.5.0",
    "content": "Versions older than 0.6 are considered legacy. A zip file containing PhysioData Toolbox v0.5.0, including all documentation, can be downloaded here. ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#physiodata-toolbox-v050",
    
    "relUrl": "/docs/change-log.html#physiodata-toolbox-v050"
  },"55": {
    "doc": "Version History",
    "title": "PhysioData Toolbox v&lt;0.5",
    "content": "Please contact us if you require versions older than v0.5.0. ",
    "url": "/docs/archive/v0.6.3/docs/change-log.html#physiodata-toolbox-v05",
    
    "relUrl": "/docs/change-log.html#physiodata-toolbox-v05"
  },"56": {
    "doc": "Data Viewers",
    "title": "Data Viewers",
    "content": "The Toolbox features data viewers to visualize and allow interaction with the raw data and analysis pipelines inside the PhysioData files. | Introduction . | Graph Interactions . | Zooming and Panning | Graph Context Menu and Legend | Zooming and Panning with Keyboard | . | . | Raw Data Viewer | The PhysioAnalyzer Viewer . | User Correction Zones . | Fast-Mode | . | Menu | Tab Toolbar | Accepted Checkbox | Epoch and Event Graphs | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html",
    
    "relUrl": "/docs/user-guide/data-viewers.html"
  },"57": {
    "doc": "Data Viewers",
    "title": "Introduction",
    "content": "Data Viewers are graphical user interfaces that display data, such as graphs and tables, and allow the user to navigate and interact with the displayed data. The PhysioData Toolbox contains two types of Viewers: . | The Raw Data Viewer: This viewer displays information about the raw data inside the PhysioData. To open the Raw Data Viewer, select a file in the Session Manager and click the View Raw Data button. | The PhysioAnalyzer Viewer: The PhysioAnalyzer Viewer is a window for inspecting and interacting with the PhysioAnalyzers inside each PhysioData file. The data of each PhysioAnalyzer is visualized in a separate tab. To open the PhysioData Viewer, select a file in the Session Manager and click the View Analyses button. | . The Data Viewers feature a navigation bar just below the banner, which can be used to change the file currently displayed in the Viewer. &times; Figure 1: The Raw Data Viewer, showing the raw data inside the current file. Figure 2: The PhysioAnalyzer Viewer, showing the PhysioAnalyzer modules inside the current file. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#introduction",
    
    "relUrl": "/docs/user-guide/data-viewers.html#introduction"
  },"58": {
    "doc": "Data Viewers",
    "title": "Graph Interactions",
    "content": "The graphs shown in the Raw Data and PhysioAnalyzer Viewer windows all exhibit the same general zooming and panning behavior, which is controlled using the scroll wheel, and the left and right mouse buttons. Zooming and Panning . The following zooming actions can be performed when interacting with axes: . | Selection Zooming: Right-clicking inside a graph and moving the mouse while holding down the right mouse button creates a transparent blue selection rectangle, releasing the mouse button then zooms in to that rectangle. | Horizontal Zooming: Zooming the horizontal axis is done by scrolling the mouse scroll-wheel; scrolling up zooms in and scrolling down zooms out. | Vertical Zooming: Zooming the vertical axis is done by pressing the mouse scroll-wheel, then scrolling it while holding it down; scrolling up zooms in and scrolling down zooms out. | Dragging: You can drag the graph left, right, up and down by clicking the mouse scroll-wheel button while the cursor is positioned inside the graph, then holding the button down and moving the mouse. | Horizontal Panning: You can pan horizontally—i.e., shift the graphs left or right—by scrolling up or down while holding down the right mouse button. | Reset: Double-click on a graph using the left mouse button to reset the zoom. This will zoom out to a level where all data points fit inside the graph. | . Figure 3: Animations of basic graphs interactions (zooming, panning, etc.). Graph Context Menu and Legend . Each module creates its own customized set of graphs and plots. Generally, right-clicking inside a graph without moving the mouse opens a menu with zooming and PhysioAnalyzer-specific analysis and interaction options. When a graph has a legend, the legend entries can be clicked to hide the corresponding lines. Hiding unnecessary lines may improve performance when scrolling and panning long recordings. Figure 4: Graph context menu and legend actions. Zooming and Panning with Keyboard . The graphs can also be controlled using the keyboard. However, this feature is still in development and may be slow and buggy. The keys currently only work in the PhysioAnalyzer Viewer, and you can’t combine keys. | Keyboard Panning: WASD/arrows for up, down and sideways panning. Hold down SHIFT for faster movement. | Keyboard Zooming: ALT + WASD/arrows for zooming. | Fit Y-axis to contents: q . | Zoom out completely: e . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#graph-interactions",
    
    "relUrl": "/docs/user-guide/data-viewers.html#graph-interactions"
  },"59": {
    "doc": "Data Viewers",
    "title": "Raw Data Viewer",
    "content": "The Raw Data Viewer visualizes the raw data inside a PhysioData file. For more information about raw data, see the Session Manager section. The Raw Data viewer is launched using the View Raw Data button in the Session Manager. The viewer consists of the following tabs: . | File Info: Information about the PhysioData file are displayed in the File Info tab. | Raw Signals: All signals are plotted in their raw form in the Raw Signals tab. It may be necessary to scroll down to see all channels. Each graph can be collapsed or re-expanded by clicking the button with the arrow in the top right corner of the graphs panel. | Markers: The toolbox automatically classifies a raw signal as a marker signal if it only contains non-negative integers with a max value of 65535. Signals classified as a marker signal are automatically analyzed and the detected markers are visualized and tabulated. | Events: Events, if present, are plotted and tabulated in the Events tab. | File events: File events are plotted and tabulated in the File events tab. | Eye Tracking Dataset #: Each eye-tracking dataset, if present, is visualized in its own tab, with each type of eye-tracking data occupying a subtab: . | Pupil Diameters: The raw pupil diameters are visualized as a scatter plot, with each dot representing a sample point. | Gaze &amp; Fixation Data: Both the gaze and fixation coordinates are visualized in an XY map, per snapshot. The snapshot image, if present, is also displayed in the graph. Note that gaze and fixation data is currently not included in the conversion to PhysioData files when using the File Converter to convert EyeLink .edf files or EET .gazedata or .txt files. | Areas of Interest: The AOIs are plotted as a series of horizontal bars, with each bar signifying the duration of a single hit. Like gaze and fixation data, AOIs are visualized per snapshot. | Events: Each eye-tracking dataset can contain its own set of events. | Scored Sections: Scored sections are visualized in a similar manner to AOIs, but are independent of snapshots. Note that scored sections are currently not included in the conversion to PhysioData files when using the File Converter to convert EyeLink .edf files or EET .gazedata or .txt files. | . | Prebuilt Epochs: Pre-generated epochs inside the PhysioData files, if present, are plotted and tabulated in the Prebuilt Epochs tab. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#raw-data-viewer",
    
    "relUrl": "/docs/user-guide/data-viewers.html#raw-data-viewer"
  },"60": {
    "doc": "Data Viewers",
    "title": "The PhysioAnalyzer Viewer",
    "content": "The PhysioAnalyzer Viewer generates one tab for each PhysioAnalyzer inside the current PhysioData file. The contents of the tabs are then custom generated by the PhysioAnalyzers. The PhysioAnalyzer viewer is launched using the View Analyses button in the Session Manager. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#the-physioanalyzer-viewer",
    
    "relUrl": "/docs/user-guide/data-viewers.html#the-physioanalyzer-viewer"
  },"61": {
    "doc": "Data Viewers",
    "title": "User Correction Zones",
    "content": "The standard method for correcting data in the toolbox involves the user defining special correction zones, within which the toolbox treats the data points differently; e.g., by disregarding detected peaks, or skipping the raw data and interpolating over the section instead. Once a correction zone has been selected, a dialog—the Section Editor—pops up presenting the available correction options. Defining zones rather than having corrections be associated with specific features allows the State of the PhysioAnalyzer to be independent of its Settings, which in turn allows the settings to be changed without invalidating the corrections. User correction zones are plotted as bars in one or more Corrections Graphs. These thin axes display the sections where the user inserted a correction zone. Each PhysioAnalyzer determines what corrections the user may apply, and how these corrections are used. A light green colored corrections-graph indicates that the user did not enter any correction zones in that particular axes. A green-colored bar indicates that there are correction zones present, which are usually plotted using red bars. Fast-Mode . Some modules support Fast-Mode, which uses the selection direction to determine if a zone is to be added or removed. Fast-Mode can be enabled through the Menu button in the top-left corner of the PhysioAnalyzer Viewer (info). In Fast-Mode, the Section Editor does not appear, instead, the correction zone is immediately created thereby allowing faster data correction: . | Adding a correction zone in Fast-Mode: Left-click in the graph, then drag to the right. | Removing a correction zone in Fast-Mode: Left-click in the graph, then drag to the left. | . Not all modules support Fast-Mode. Figure 5: Inserting a correction zone using the Section Editor (the default mode), and using 'Fast-Mode'. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#user-correction-zones",
    
    "relUrl": "/docs/user-guide/data-viewers.html#user-correction-zones"
  },"62": {
    "doc": "Data Viewers",
    "title": "Menu",
    "content": "The Menu button in the PhysioAnalyzer Viewer offers the following options: . | Automatically plot all tabs: When this option is checked, data in all tabs are plotted when the PhysioAnalyzer Viewer is opened as opposed to when the tab is clicked on. | Use Fast-Mode selection when possible: Click to enable or disable Fast-Mode. This setting applies to all opened PhysioData Viewers, and persists until the Toolbox is closed. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#menu",
    
    "relUrl": "/docs/user-guide/data-viewers.html#menu"
  },"63": {
    "doc": "Data Viewers",
    "title": "Tab Toolbar",
    "content": "Each tab has a toolbar displaying the PhysioAnalyzer type and its tag, and features an Accepted Checkbox, and the following buttons: . | Remove Corrections: Removes all user corrections in the current PhysioAnalyzer; i.e., it resets the PhysioAnalyzer’s state. The settings, however, keep their current parameters. | View/Edit Settings: Opens the settings window for the current PhysioAnalyzer. Only the settings in the current PhysioAnalyzer are affected by changes made here. Not all settings can be changed in the individual PhysioAnalyzers; the tag, and Epoch or Event Definitions, for instance, must be changed using the PhysioAnalyzer Creator in the Session Manager. | View Results: Opens a window containing a table showing the Epoch or Event analysis of the current PhysioAnalyzer. Multiple of these windows can be opened, and the tabulated results are ‘analyses snapshots’; i.e., they are not updated when the PhysioAnalyzer is changed. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#tab-toolbar",
    
    "relUrl": "/docs/user-guide/data-viewers.html#tab-toolbar"
  },"64": {
    "doc": "Data Viewers",
    "title": "Accepted Checkbox",
    "content": "The Accepted Checkbox can be used to mark PhysioAnalyzers as ‘reviewed’ or ‘accepted’. This feature exists purely for user reference as it does not influence how, or if, the PhysioAnalyzer is analyzed. Changing the settings, or adding or removing corrections, does not reset the accepted status. Figure 6: The Accepted Checkbox, in its default (top) and activated (bottom) states ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#accepted-checkbox",
    
    "relUrl": "/docs/user-guide/data-viewers.html#accepted-checkbox"
  },"65": {
    "doc": "Data Viewers",
    "title": "Epoch and Event Graphs",
    "content": "Epochs, which are sections within a signal, are usually plotted above graphs, and have their time-axis linked to the graphs below them. Epochs are visualized as rectangles, with their horizontal width indicating their span. Their colors are pseudo-randomly chosen, and their height and thickness do not carry any information. In case epochs overlap, they are stacked vertically so that they can be differentiated. Certain analyzers make use of Events rather than Epochs. Events are discrete—i.e., they have no duration—and are visualized with colored triangles. Clicking on an epoch rectangle or an event triangle opens a window displaying its information. Figure 7: Top: an epoch plot, showing three minute-long epochs that have been sliced into 10 second segments. Bottom: an event plot showing nine events. The time axis of the epoch and event graphs correspond to the time axis of the graphs below them. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/data-viewers.html#epoch-and-event-graphs",
    
    "relUrl": "/docs/user-guide/data-viewers.html#epoch-and-event-graphs"
  },"66": {
    "doc": "Documentation versions",
    "title": "Documentation Archive",
    "content": ". For the change log, please visit the Version History page. Documentation of all recent PhysioData Toolbox versions: . | PhysioData Toolbox v0.6.3 (latest version). | . ",
    "url": "/docs/archive/v0.6.3/docs/doc-versions.html#documentation-archive",
    
    "relUrl": "/docs/doc-versions.html#documentation-archive"
  },"67": {
    "doc": "Documentation versions",
    "title": "Documentation versions",
    "content": " ",
    "url": "/docs/archive/v0.6.3/docs/doc-versions.html",
    
    "relUrl": "/docs/doc-versions.html"
  },"68": {
    "doc": "ECG Signal Analyzer",
    "title": "ECG Signal Analyzer",
    "content": "The ECG Signal Analyzer performs epoch-based time-domain analysis of an ECG signal, and allows users to perform basic R-peak and IBI correction. | Introduction | User Corrections . | Correction Cases and Workflow | View R-Waves | Adding R-Peaks . | When to Add R-Peaks | . | . | Processing and Analysis Pipeline | Settings | Metrics | Resampled Signals | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html"
  },"69": {
    "doc": "ECG Signal Analyzer",
    "title": "Introduction",
    "content": "The ECG Signal Analyzer module and its GUI can be used to process ECG signals into user-reviewed and curated R-peaks and Inter-Beat Interval (IBI) time-series. On analysis, these data are then used to extract epoch-based time-domain ECG metrics. The R-peaks and IBIs processed by the ECG signal analyzer module can be referenced by other modules for additional analysis: . | HRV module: The HRV module uses the IBIs to calculate HRV metrics. | IBI module: The IBI module uses the R-peaks to calculate event-based heartbeat-specific IBI acceleration and deceleration. | ICG ensemble module: The ICG ensemble module uses the R-peaks to time-lock ECG and ICG waveforms to each heartbeat, and to calculate cardiac intervals. | . &times; Figure 1: The ECG Signal Analyzer interface, showing the raw and filtered ECG signals, the detected R-peaks, the IBIs and the instantaneous heart rate. The ECG signal analyzer module GUI contains the following plots: . | ECG (top): Shows the raw and the filtered ECG signals. | IBI (middle): Shows the IBI events, and draws a dashed line between them for easier visual detection of outliers. Note, however, that the IBIs are purely discrete events, and not a continuous signal. | IHR (bottom): Shows the continuous Instantaneous Heart Rate, as calculated from the IBIs. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#introduction"
  },"70": {
    "doc": "ECG Signal Analyzer",
    "title": "User Corrections",
    "content": "The ECG module allows users to specify automatic feature rejection parameters in the settings, which is the easiest way to automatically reject erroneously classified R-peaks or IBIs. Additionally, users can also correct the generated data by marking two types of rejection zones: R-peak rejection zones; and, IBI rejection zones. Data correction options of the ECG Signal Analyzer: . | Rejecting faulty R-peaks: To mark or unmark a section of the filtered ECG signal as an R-Peak exclusion zone, left-click in the ECG graph at the start-time of the desired section, drag the mouse, and release at the end-time of the desired section. Choose the desired action from the menu. | Rejecting faulty IBIs: To mark or unmark a section of the IBI time series as an IBI exclusion zone, left click in the IBI graph at the start-time of the desired section, drag the mouse, and release at the end-time of the desired section. Choose the desired action from the menu. | . Unlike the Generic Signal Analyzer, the raw data cannot be interpolated. As of version 0.6.2, R-peaks can also be manually added. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#user-corrections"
  },"71": {
    "doc": "ECG Signal Analyzer",
    "title": "Correction Cases and Workflow",
    "content": "Firstly, if the ECG Signal Analyzer consistently fails to properly detect R-peaks, it is best to change the automatic rejection criteria in the Settings window. This can be done per file via the PhysioAnalyzer Viewer; or, if the issue persists across files, via the PhysioAnalyzer Configurator, and then applied to selected files. In the case that either noise or a secondary ECG wave is erroneously detected as an R-Peak, two distinctly shorter consecutive IBIs will be visible in the plot. To correct this, insert an R-peak exclusion zone that covers the wave producing the erroneous R-peak. This will cause the faulty R-peak to be rejected, and will merge the two short IBIs into a single valid IBI. Figure 2: Excluding an erroneous R-peak, located at approximately 341 seconds: first select the section in the ECG axes using the left mouse button, then select the disregard option from the popup menu. Figure 3: An R-peak exclusion zone has now been created, and the erroneous R-peak removed. Notice how the IBIs and IHR lines are updated. Conversely, a missed R-peak results in a single distinctly long IBI. This can be corrected by inserting an IBI exclusion zone over the long IBI. Missed R-peaks can be caused by temporary loss of transmission when using wireless systems. In those cases, the loss of transmission produces a flat-line in the raw signal, which can sometimes be seen at the spot where the missing R-peak is expected to have been. Figure 4: Excluding an erroneous IBI, located at approximately 335.7 seconds: first select the section in the IBI axes by clicking the left mouse button and dragging the cursor; then, select the 'disregard' option from the menu. Figure 5: An IBI exclusion zone has now been created, and the erroneous IBI removed. Notice how the IHR line is also updated. IBIs that are rejected based on the criteria defined in the Feature Detection Settings are marked using a diamond, whereas IBIs that are rejected based on the exclusion zones are marked using squares, as in the figure above. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#correction-cases-and-workflow",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#correction-cases-and-workflow"
  },"72": {
    "doc": "ECG Signal Analyzer",
    "title": "View R-Waves",
    "content": "Clicking on the View R-Waves button reveals the “R-waves” side-panel, which displays superimposed signal-sections (aka waves) around all R-peaks–both automatically-detected and user-defined ones, with the latter plotting as dotted lines. Only R-peaks that are located inside one or more epochs are considered. The superimposed waves are plotted relative to their R-peak locations. This feature can be used to quickly detect whether all accepted R-peaks (inside epochs) are valid. Clicking on a wave in the side-panel will cause the main graphs to zoom in on that wave. Figure 6: The R-waves side-panel. Note that the deviating QRS wave can be quickly identified using the side-panel, without having to asses each wave individually. When the deviating line is clicked, the Toolbox zooms into that section on the main axes. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#view-r-waves",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#view-r-waves"
  },"73": {
    "doc": "ECG Signal Analyzer",
    "title": "Adding R-Peaks",
    "content": "Users can manually add R-peaks at any time-point inside the ECG signal by right clicking inside the ECG or IBI axes, and selecting the desired option from the Add/remove user-defined R-peaks submenu: . | Add R-peak here: This option adds an R-peak at the time-point where the user right-clicked inside the axes. | Add R-peak at nearest peak: This adds an R-peak at the peak that is nearest to the time-point where the user clicked. The peak detection is performed on the filtered ECG signal (plotted in blue). | Add R-peaks that split the gap equally.: This estimates how many R-peaks are missing using the adjacent IBIs, then splits the gap accordingly so that each new IBI has the same value. This only works when 1, 2 or 3 IBIs are likely missing. | . Figure 7: Example of an R-peak that was not detected, but that has a discernable location. Figure 8: Right-clicking in the ECG axes shows the context menu, and the sub-options for manually adding and removing R-peaks. Figure 9: A manually added R-peak. In this case, the option 'Add at nearest peak' was chosen, which placed the R-peak at the top of the peak. Note that the large jump in the IBI times-series has now disappeared. The user-defined R-peaks are not influenced by the R-rejection zones, and have precedence over the automatically detected R-peaks. As such, automatically detected R-peaks that are too close to the user-defined R-peaks are automatically rejected. This distance is determined by the R-separation parameter in the module’s settings, but it is regardlessly always at least 100 ms. Similarly, new user-defined R-peaks have precedence over older ones, so when a new one is added, old ones that are too close are deleted. When to Add R-Peaks . It is generally not necessary to add R-peaks if only a few are missing (compared to the length of the epoch). Furthermore, R-peaks should only be added when their locations can be visually determined, but when the detection parameters can not be tweaked further to enable the Toolbox to find them automatically. The exception to this rule is if users are specifically interested in the R-peak count, in which case adding missing R-peaks will enable the correction of that metric (even if the exact location cannot be determined). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#adding-r-peaks",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#adding-r-peaks"
  },"74": {
    "doc": "ECG Signal Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "In the ECG module, the desired channel is extracted from the current file’s raw data using the user-specified channel. Then, the user-specified gain, and low-pass and high-pass filtering options are applied to produce the filtered ECG signal, on which the R-peaks are detected. From the R-Peaks that fit the relevant criteria and user-approval, all IBIs are calculated. IBIs that fall withing a user rejection zone, or violate a criteria, are then filtered out. The remaining IBIs are used in the analysis, and to generate the Instantaneous Heart Rate (IHR). IBIs are defined as having the value of the interval between the current R-peak and the previous; i.e., they are timestamped at the R-peak that ends that IBI. As such, IBIs that start outside of an epoch but end inside it are still considered part of that epoch. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#processing-and-analysis-pipeline"
  },"75": {
    "doc": "ECG Signal Analyzer",
    "title": "Settings",
    "content": "The ECG signal analyzer assumes that the unit of the ECG signal is mV. If this is not the case, fill in an appropriate gain value (multiplier) to transform the raw signal into mV; e.g., if the signal is in V, the gain should be 1000. Additionally, the gain can be used to flip the ECG signal if necessary. Since the toolbox cannot detect downwards pointing R-waves, ‘upside-down’ ECG signals must be flipped by applying a negative gain. The auto-generated list below shows the settings available in the ECG Signal Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings: The gain is the value with which the raw ECG signal needs to be multiplied to convert it into mV. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Highpass filter [Hz]: The high-pass filter and its cutoff frequency. | Lowpass filter [Hz]: The low-pass filter and its cutoff frequency. | . | ECG Feature Detection Settings Parameters for automatically rejecting R-Peaks and IBIs. Tick the checkboxes to enable the criteria. | Minimum R-peak value [mV]: Peaks in the ECG signal below this level are not classified as R-Peaks. | Maximum R-peak value [mV]: Peaks in the ECG signal above this level are not classified as R-Peaks. | Minimum distance between R-peaks [s]: Only the highest peaks in the ECG signal within this distance of other peaks are classified as R-Peaks. | Minimum IBI value [s]: IBI’s with a value lower than this parameter are automatically rejected. | Maximum IBI value [s]: IBI’s with a value higher than this parameter are automatically rejected. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#settings"
  },"76": {
    "doc": "ECG Signal Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the ECG Signal Analyzer module. Table 1: The metrics calculated by the ECG Signal Analyzer module. | Variable: | Unit: | Description: | . | HR_mean | BPM | Mean of the continuous Heart Rate, as interpolated from the accepted IBI data points. | . | R_peakCount | count | Count of accepted R-peaks inside current epoch, including user-defined added R-peaks. | . | R_peakUserDefinedCount | count | Count of user-defined R-peaks inside current epoch. | . | IBI_mean | s | Arithmetic mean of the accepted discrete IBIs. IBI values are defined as: IBI(n) = Rt(n)-Rt(n-1), and are timestamped using: IBIt(n) = Rt(n). | . | IBI_weighted_mean | s | Self-weighted mean of the accepted discrete IBIs; i.e., sum(IBIs.^2)/sum(IBIs). | . | IBI_min | s | Min value of the accepted discrete IBI data points. | . | IBI_max | s | Max value of the accepted discrete IBI data points. | . | IBI_std | s | Standard Deviation of the accepted discrete IBI data points (SD normalized by (N-1), where N is the sample size). | . | IBI_count | count | Count of accepted IBI data points inside current epoch. | . | IBI_coverage | % | The percentage-wise IBI coverage of the epoch; i.e., 100*(sum of the IBIs)/(Epoch Duration). | . | HRV_rmssd | ms | The Root Mean Squared of the Differences between Successive IBIs (nonadjacent IBIs disregarded). | . | HRV_ssdCount | count | Count of succesive IBIs inside current epoch. Nonadjacent IBIs are not considered succesive. | . | HRV_pNN20 | % | Percentage of absolute differences between successive IBIs that are greater than 20 ms. | . | HRV_pNN50 | % | Percentage of absolute differences between successive IBIs that are greater than 50 ms. | . Note that the ECG module does not detrend the IBIs, as opposed to the HRV module, which does detrend the IBIs and calculates similar metrics on the detrended IBI instead. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#metrics"
  },"77": {
    "doc": "ECG Signal Analyzer",
    "title": "Resampled Signals",
    "content": "When exporting the resampled epoch signals, the ECG Signal Analyzer resamples and extracts the filtered IHR signal. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ecg-module.html#resampled-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ecg-module.html#resampled-signals"
  },"78": {
    "doc": "Analyzing ECG and HRV Data",
    "title": "Analyzing ECG and HRV Data",
    "content": "A short tutorial specific to analyzing ECG data. 👷🏻‍♀️ 🚧 Under construction. 🚧 👷🏻 . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/ecg.html#analyzing-ecg-and-hrv-data",
    
    "relUrl": "/docs/tutorial/ecg.html#analyzing-ecg-and-hrv-data"
  },"79": {
    "doc": "Analyzing ECG and HRV Data",
    "title": "Analyzing ECG and HRV Data",
    "content": " ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/ecg.html",
    
    "relUrl": "/docs/tutorial/ecg.html"
  },"80": {
    "doc": "EMG Analyzer",
    "title": "EMG Analyzer",
    "content": "The EMG Signal preprocesses an EMG signal and performs standard epoch-based analyses. | Introduction | User Corrections | Settings | Metrics | References | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/emg-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/emg-module.html"
  },"81": {
    "doc": "EMG Analyzer",
    "title": "Introduction",
    "content": "The EMG Signal Analyzer filters a raw EMG signal, then rectifies and smooths it to obtain a smooth continuous representation of muscle activity. The module features two types of configurable EMG smoothing filters: a boxcar filter and a low pass filter. The default settings are based on A. van Boxtel (2010)1, which tested the efficacy of various filters when applied to blink reflex research. If artifacts are present, the module allows users to remove sections from the smooth signal, which are then interpolated over. &times; Figure 1: The EMG Signal Analyzer interface. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/emg-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/emg-module.html#introduction"
  },"82": {
    "doc": "EMG Analyzer",
    "title": "User Corrections",
    "content": "The EMG Signal Analyzer allows the user to define zones in which the smooth EMG signal is not used, but is instead interpolated over. This is similar to the process described in the Generic Signal Analyzer module, but does not affect the raw signal, only the smooth EMG signal. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/emg-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/emg-module.html#user-corrections"
  },"83": {
    "doc": "EMG Analyzer",
    "title": "Settings",
    "content": "The EMG signal analyzer assumes that the unit of the EMG signal is mV. If this is not the case, fill in an appropriate gain value (multiplier) to transform the raw signal into mV; e.g., if the signal is in V, the gain should be 1000. The EMG Analyzer additionally features a notch filter (iirnotch with Q = 35) that can be used to filter out line noise. The auto-generated list below shows the settings available in the EMG Analyzer module: . | General Settings: Name, source and epoch settings for this EMG PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings: Settings for prefiltering the raw EMG signal. The signal unit must be mV, if it is not, use a gain multiplier to transform it. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | High-pass FIR filter [Hz]: The high-pass filter and its cutoff frequency. | Low-pass FIR filter [Hz]: The low-pass filter and its cutoff frequency. | Notch filter [Hz]: The notch filter and its cutoff frequency. | . | Smoothing Settings: The rectified EMG signal can be smoothed using either a Boxcar filter (window size of 100 ms recommended) or a lowpass 201 coeff. FIR filter (frequency of 5 or 10 Hz recommended). | Smoothing filter type: The filter type to use for smoothing the filtered and rectified EMG signal. | Boxcar-size or filter-frequency [ms or Hz]: The window size of the smoothing boxcar filter or the low-pass cutoff freqeuncy of the smoothing FIR filter; depending on what was selected. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/emg-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/emg-module.html#settings"
  },"84": {
    "doc": "EMG Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table below lists all the metrics produced by the EMG Analyzer module. Table 1: The metrics calculated by the EMG Analyzer module. | Variable: | Unit: | Description: | . | Min_Smooth_EMG | mV | The minimum value of the filtered, rectified and smoothed EMG signal, per epoch. | . | Max_Smooth_EMG | mV | The maximum value of the filtered, rectified and smoothed EMG signal, per epoch. | . | Mean_Smooth_EMG | mV | The mean value of the filtered, rectified and smoothed EMG signal, per epoch. | . | BoundedArea_Smooth_EMG | mV/s | The area bounded by the filtered, rectified and smoothed EMG signal and the abscissa, per epoch. | . | TimeToMax_Smooth_EMG | s | The time between the start of the epoch and the point where the filtered, rectified and smoothed EMG signal reaches its maximum point in that epoch. | . | Min_Filt_EMG | mV | The minimum value of the filtered EMG signal, per epoch. | . | Max_Filt_EMG | mV | The maximum value of the filtered EMG signal, per epoch. | . | Mean_Filt_EMG | mV | The mean value of the filtered EMG signal, per epoch. | . | Min_FiltRect_EMG | mV | The minimum value of the filtered and rectified EMG signal, per epoch. | . | Max_FiltRect_EMG | mV | The maximum value of the filtered and rectified EMG signal, per epoch. | . | Mean_FiltRect_EMG | mV | The mean value of the filtered and rectified EMG signal, per epoch. | . | Interpolated_Smooth_EMG | % | The percentage of the epoch in which the user chose to interpolate the smooth signal; i.e. the size inside the epoch of the smooth signal section(s) that were interpolated over, relative to epoch size. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/emg-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/emg-module.html#metrics"
  },"85": {
    "doc": "EMG Analyzer",
    "title": "References",
    "content": ". | Van Boxtel, A. (2010). Filter for optimal smoothing of acoustic and electric blink reflex EMG responses to determine blink response magnitude. Biological Psychology, 85, 299-305. &#8617; . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/emg-module.html#references",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/emg-module.html#references"
  },"86": {
    "doc": "Epochs",
    "title": "Epochs",
    "content": "Epoch are relevant time segments within a recording. The Toolbox can automatically detect epochs based on predefined rule-sets, and perform descriptive analyses on them. ❕ The Epoch definition system was renewed in v0.6. If you are already familiar with how epochs worked in v0.5, please read this section for a summary of the new features. | Introduction | Referenceable Events . | Markers | . | Defining Epochs . | Epoch Definition Table | . | Advanced Epoch Definition Features . | Specifying the Values | Multiple Occurrence | Multiple Delays | Pairing Multiple Start and End Times | Epoch Data | . | Epoch Builder . | Outer Window | Tab 1: Define Epochs . | Epoch Definition Menus | Slicing Epochs | . | Tab 2: Markers and Events Inside Test File | Tab 3: Preview Epochs | . | New Epoch Features in v0.6+ | Events | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html",
    
    "relUrl": "/docs/user-guide/epochs.html"
  },"87": {
    "doc": "Epochs",
    "title": "Introduction",
    "content": "One key feature of the Toolbox is its ability to automatically segment data into relevant sections, aka epochs, for analysis. This automatic segmentation occurs by applying a user-defined rule-set to the data inside a PhysioData file, and resolving that into epochs. The rule-set, aka epoch definition, defines how each epoch must be constructed by referencing events, markers, etc. inside the file. These data are referred to as Referenceable Events. In the Toolbox, epochs are tied to the PhysioAnalyzer modules. Each PhysioAnalyzer has a setting labeled Generate epoch from and a drop down menu allowing the user to select Epoch Definition Table or PhysioAnalyzer with tag. If the former is selected, the module will generate its own epochs based on the epoch definition table provided; or, if the latter is selected, the module copies epochs from another module, selected via its tag. &times; Figure 1: The settings panel of the Generic Signal Analyzer, shown twice with different epoch settings. Note the setting labeled 'Generate epochs from', and the dropdown menu beside it. When the user selects 'Epoch Definition Table', the default option, then a button appears below the menu (left). Clicking the button opens the Epoch Builder GUI, where users can import, edit and test epoch definition tables. When 'PhysioAnalyzer with tag:' is selected (right), a text field appears allowing users to enter the tag of the PhysioAnalyzer from which the epochs should be copied (e.g. 'ECG'). Next to analyzing epochs generated using an epoch definition, the Toolbox will also analyze pre-made epochs saved in the PhysioData file. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#introduction",
    
    "relUrl": "/docs/user-guide/epochs.html#introduction"
  },"88": {
    "doc": "Epochs",
    "title": "Referenceable Events",
    "content": "Referenceable events are moments inside a recording that are logged for the purpose of marking relevant events, and that the Toolbox can reference for the purpose of generating epochs. The Toolbox automatically creates these referenceable events from labels, events, markers, sections, etc. Each referenceable event has the following properties . | Value: The value of the referenceable event refers to its contents: e.g., a marker has a numeric value; an event has a word or sentence, etc. | Time: The time of the referenceable event is its timestamp; e.g. the time associated with an event, or the time a marker was received. For each referenceable event, its time property reflects the timestamp of its onset. | Duration: The duration of a referenceable event refers to the time interval between its onset and its offset. In the case of markers, it would refer to the interval between when the marker assumes its value and releases it. When a referenceable event is discreet, i.e. it consists of a single time point, its duration is zero. | Occurrence: The occurrence of a referenceable event refers to the ordinal number (1st, 2nd, etc.) of that event’s value within the set. | . Referenceable events are always ordered chronologically. Figure 2: An example set of 5 referenceable events, of which one—the second—is not discrete. Discrete events are visualized in the Toolbox as a triangles pointing downwards towards their timestamps with their values hovering above. In the case of indiscrete events, the triangles are replaced by horizontal bars, which start at the event's timestamp and span its duration. As an example, take the 15 second recording shown in Figure 2, where 5 events were logged: . | Event 1: The first event has the value ‘Label A’, a time of 2 s, a duration of zero, and an occurrence of 1 (it is the first label with value ‘Label A’). Note that this event is discrete, and therefore has a duration of zero. | Event 2: The second event has the value ‘Label B’, a time of 4 s, a duration of 5 s, and an occurrence of 1 (it is the first label with value ‘Label B’). Note that this event is not discrete, and therefor as a positive duration, and is plotted as a section. | Event 3: The third event has the value ‘Label C’, a time of 10 s, and an occurrence of 1. | Event 4: The forth event has the value ‘Label D’*, a time of 12 s, and an occurrence of 1. | Event 5: The fifth event has the value ‘Label C’, a time of 14 s, and an occurrence of 2; i.e., it is the second label with that value. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#referenceable-events",
    
    "relUrl": "/docs/user-guide/epochs.html#referenceable-events"
  },"89": {
    "doc": "Epochs",
    "title": "Markers",
    "content": "One common technique for logging events is to record markers, aka triggers, in a separate channel alongside the physiological signals. These markers are usually sent by the task-pc to the recording device (e.g. BIOPAC), and assume different values to mark different events in the recording. The Toolbox automatically detects marker channels and converts them into referenceable events, with the same properties as described previously. As such, the Toolbox documentation may refer to markers as events. Markers are converted into referenceable events using the following rules: . | A signal is considered a marker channel if it is more that 75% flat, and has only non-negative integer values less than or equal to 65535. | A marker is defined as a contiguous section in the signal with an integer value of 1 or higher; i.e., a marker cannot have a value of 0. A zero in the signal is simply interpreted as the absence of a marker. | If a marker channel starts with a non-zero value, that section is not classified as a marker. Markers start being classified at the first value-change that produces a non-zero value. This is done to prevent marker values present before the task starts (but when the recording is already taking place) from being classified as markers. As a result, if the signal starts with a non-zero value, then goes to zero, that time point cannot be referenced as it is neither the end nor start of any marker. | If a marker channel holds a value only for a single sample, that value is not classified as a marker. This is done to prevent very short intermediate values from being classified as markers. | Markers are transformed into referenceable events with numeric values. | . Even though markers are converted to standard referenceable events by the Toolbox, they are visualized as continuous signals, since that is how they were originally recorded. Referenceable events produced from markers are never discrete. Figure 3: An example of a digital signal recorded while receiving markers. Five markers were logged. The green triangles indicate the onset of the markers, which corresponds to their timestamps; and the red triangles indicate their offsets, which corresponds with their timestamps plus their duration. The example marker channel visualized in Figure features the following markers: . | Marker 1: The first marker has a value of 10, a time of 1 s, a duration of 1 s, and an occurrence of 1. | Marker 2: The second marker has a value of 20, a time of 4 s, a duration of 0.1 s, and an occurrence of 1. | Marker 3: The third marker has a value of 30, a time of 6 s, a duration of 3 s, and an occurrence of 1. Notice that markers don’t have to end at zero, but end at any change in value, which if not zero, corresponds to the onset of the next marker. | Marker 4: The fourth marker has a value of 40, a time of 9 s, a duration of 2 s, and an occurrence of 1. | Marker 5: The fifth marker has a value of 10, a time of 12 s, a duration of 2 s, and an occurrence of 2. it is the second marker a the value of 10. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#markers",
    
    "relUrl": "/docs/user-guide/epochs.html#markers"
  },"90": {
    "doc": "Epochs",
    "title": "Defining Epochs",
    "content": "To create an epoch, two time points must be found: the epoch start time and the epoch end time. As such, an epoch can be defined by specifying its name, as well as where its start and end should be placed given the referenceable events in the file. Specifying how to separately resolve the start and end times of a single epoch, therefore, involves the user providing an answer to the following questions, twice: . Which set of referenceable events should the Toolbox use? Within that set, events with what values should be extracted? Of those extracted events, exactly which occurrence should be used? Taking that specific event as a reference, where should the time point be placed. In the Toolbox, the data that allows the resolution the questions above must are encoded in an Epoch Definition Table. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#defining-epochs",
    
    "relUrl": "/docs/user-guide/epochs.html#defining-epochs"
  },"91": {
    "doc": "Epochs",
    "title": "Epoch Definition Table",
    "content": "A definition for an epoch is built from three basic components: the epoch name; the start time definition; and the end time definition. The last two each resolve to a certain time in the recording, and are encoded using four parameters that the user must specify, the: channel, value, occurrence, and delay. These parameters, listed below, correspond the questions mentioned above: . | Channel: The channel indicates which set of referenceable events should be used to resolve the current time point. See the File-Converter documentation for info about how referenceable events are created from various data formats. The channel can be specified as: . | number: If a number is filled in, the Toolbox will use the markers found the that channel; e.g., specifying channel = 4, makes the Toolbox use the markers in signal channel 4. | events: If events is filled in, the Toolbox will use the events associated with the signals. For data converted from AcqKnowledge .acq files, this corresponds to the labels. For data recorded with VU-DAMS system, this corresponds to all events, labels and messages in the 5fs file. In addition to events; event, label or labels will do the same, and regardless of capitalizations. | et.events: If et.events is filled in, the Toolbox will use the events in the eye-tracking data. When using data recording with Tobii EET, the File Converter can automatically generate these events based on the variables (columns) in the gazedata file. When analyzing Eye-Link data, these events correspond to the messages sent to the eye-tracker. | file: If file is filled in for the channel, the Toolbox will use events it has automatically generated for the file. These include one event at the start of the file (t = 0) with the value SOF; one at the end of the file with the value EOF; and one event with value file that spans the whole recording. | epochs: Epochs are also referenceable events, and can be used to define new epochs. If epochs is filled in, the Toolbox will extract epoch(s) with names that match the specified value. | . | Value: The value parameter specifies the value used to extract the desired referenceable events. It can be a number or a string. For instance, value = 10 refers to all events (e.g. markers) with the value 10. Which of those need to be referenced is then decided by the occurrence. Similarly, value = Label A refers to all events with that value Label A. | Occurrence (aka Occur): After events have been retrieved from the specified channel and filtered by matching them to the specified value, the desired event is selected by specifying its occurrence. For instance, specifying channel = 1, value = 10 and occur = 2 indicates that from the markers in channel 4, the second occurrence of the marker with value 10 needs to be selected. | Delay: Once an event is selected, the delay specifies where the time-point must be placed relative to the time-stamp of the event. For instance, a delay = 10 states that the time point, be it the epoch start or end, must be placed 10 second after the event time. Stating delay = 10 would place the time point 10 seconds before the event. Additionally, the keyword dur can be used to refer to the duration of the event. For instance, stating delay = dur will place the time-point at the end of the event; delay = dur / 2 will place it in the middle of the event span; and delay = dur - 10 will place it 10 seconds before the end (regardless of the start time). | . As an example, let’s say we want to create the following four epoch based on the markers in Figure 3: . | Epoch 1: The first epoch must start at the first marker with value 10 (Marker 1), and end at the first marker with value 20 (Marker 2) . | Epoch 2: The second epoch must start one second before the end of the first marker with value 10 (Marker 3), and end at the end of that same marker. Note that the end of a marker, or any referenceable event, is its timestamp offset by its duration. | Epoch 3: The third epoch must start at the end of the first marker with value 40 (Marker 4), and end at the end of the second marker with value 10. | Epoch 4: The fourth epoch must start at the start of the first marker with value 10 (Marker 1), and end at the second marker with value 10 (Marker 5). | . In all cases, assume that the markers are located in channel 4. A table can now be built to define epochs by stating the epoch name, and two sets of the four parameters described above; one for the epoch start, and one for the epoch end. Table 1: Epoch definition example. | epochName: | startChannel: | startValue: | startOccur: | startDelay: | endChannel: | endValue: | endOccur: | endDelay: | . | Epoch_1 | 4 | 10 | 1 | 0 | 4 | 20 | 1 | 0 | . | Epoch_2 | 4 | 30 | 1 | dur-1 | 4 | 30 | 1 | dur | . | Epoch_3 | 4 | 40 | 1 | dur | 4 | 10 | 2 | dur | . | Epoch_4 | 4 | 10 | 1 | 0 | 4 | 10 | 2 | 0 | . Figure 4: The same markers as before, but with the epochs (on top) that were created by resolving the Epoch Definition Table using the markers. An epoch definition table, as presented above, can be applied to different files, and will always generate the right epochs based on each file’s markers. To help users build epoch definition tables, the Toolbox includes an Epoch Builder GUI. Epochs may only exist if they have a duration of 10 ms or more; i.e., their end time must occur 10 ms or more after their start time. The epoch will result in an error otherwise. The Toolbox places no other restrictions on epoch times; they may start and/or end before and/or after the recording. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#epoch-definition-table",
    
    "relUrl": "/docs/user-guide/epochs.html#epoch-definition-table"
  },"92": {
    "doc": "Epochs",
    "title": "Advanced Epoch Definition Features",
    "content": "The Toolbox’s epoch resolution engine can make use of numeric ranges and regular expressions when filtering values, and can reference multiple occurrences and delays in a single epoch definition. As such, epochs don’t have to be defined one by one, and explicitly. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#advanced-epoch-definition-features",
    
    "relUrl": "/docs/user-guide/epochs.html#advanced-epoch-definition-features"
  },"93": {
    "doc": "Epochs",
    "title": "Specifying the Values",
    "content": "The value parameter can be specified as a number or a string, but also as a numeric range, a numeric set, or a regular expressions. This allows the value-filtering step to match various events that don’t have the exact same value, or that have a value containing ‘non-conforming’ section (e.g. an event with a timestamp in the value, which will vary randomly between recordings). Specifying the value parameter as: . | A number: When a single number is specified—e.g. value = 10, the events with exactly those values are used. | A numeric set: When a numeric set is entered—e.g. value = [10:20] or value = [100 200], all events values that are a member of that set is matched. In the first case, all events with the values 10 through 20, and in the second, all events with values 100 or 200. Standard MATLAB syntax can be used to specify numeric sets. | A string: When specifying the value as a string—e.g. value = Label A, only labels with values that completely match (case sensitive) are used. Note that leading and trailing white spaces are ignored. | A regular expression: When the value is specified as a string enclosed in ^ and $—e.g. value = $Label [A-Z]^, it is treated as a regular expression, and any events with values matching the expression are used. Note that both the ^ and $ anchors are used as part of the expression. See MATLAB help for more information about regular expressions. Feel free to email the developers for help generating regular expression patterns. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#specifying-the-values",
    
    "relUrl": "/docs/user-guide/epochs.html#specifying-the-values"
  },"94": {
    "doc": "Epochs",
    "title": "Multiple Occurrence",
    "content": "Similar to specifying numeric values, occurrences can be specified as a single number or as a set. Additionally, the keyword last can be used, which will resolve to the index of the last event that matches the specified value. The usage of last is equal to the MATLAB usage of end (which can also be used instead of last). As an example, when specifying occur = 1:last, all occurrences of the events that match the specified value are selected. Note that when the value is not strictly specified—i.e., it is specified as a regular expression or a numeric range—the selected events may not have exactly the same value, but will still be ordered sequentially. For instance, when using these markers, and specifying value = [1:255], then occur = [2 3], the second and third of all the markers with values between 1 and 255 are selected; i.e., the 2nd and 3rd markers in the list. These are the occurrences 2 and 3 of the events that match the value specification ([1:255]), even though those events themselves don’t have occurrence 2 and 3; they are both the first occurrence of their exact values. The occur parameter targets the order of the events that were selected by the value filter, thus if the value is not strictly specified, the occurrences inside the set produced by the value filter might differ from the event occurrences. Occurrences must resolve to positive integers, and basic MATLAB functions can be used, like max(), min(), ceil(), floor(), round(), etc. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#multiple-occurrence",
    
    "relUrl": "/docs/user-guide/epochs.html#multiple-occurrence"
  },"95": {
    "doc": "Epochs",
    "title": "Multiple Delays",
    "content": "The delay parameter can be specified as a single number or as a vector; or as a formula that resolves into one of the two. When specified as a single number, that delay is applied to all events that match the value and occurrences specified in the definition. For instance, if the value and occurrence parameters produce 2 events, and the delay is specified as delay = 5, then two time points will be produces; 5 seconds after both events. When the delay is specified as a vector, then all delays are applied to all events. For instance, if the value and occurrence parameters produce 2 events, and the delay is specified as delay = [5 10], then four time points will be produces; 5 and 10 seconds after both events. Multiple delays will be applied occurrence by occurrence; e.g., the delay [5 10] when applied to two events (Event_A and Event_B), will produce the time sequence: Event_A + 5; Event_A + 10; Event_B + 5; Event_B + 10. When specifying multiple delays, standard MATLAB syntax can be used, including basic functions like max(), min(), ceil(), floor(), round(), etc. Additionally, the keyword dur can be used, which resolves into the duration of the event that the delay is applied to. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#multiple-delays",
    
    "relUrl": "/docs/user-guide/epochs.html#multiple-delays"
  },"96": {
    "doc": "Epochs",
    "title": "Pairing Multiple Start and End Times",
    "content": "The epoch start and end definitions are resolved separately, then paired up to form epochs. If the start or end definition produces more times than the other, the un-pairable times will produce epochs with errors. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#pairing-multiple-start-and-end-times",
    
    "relUrl": "/docs/user-guide/epochs.html#pairing-multiple-start-and-end-times"
  },"97": {
    "doc": "Epochs",
    "title": "Epoch Data",
    "content": "When an epoch analysis is run and exported, epoch data, which includes each epoch’s name, start and end times, as well as extra metadata, is included in the output. The extra metadata contains data about the epoch definition resolution, and the events referenced. This includes the actual values, durations and occurrences of the referenced events, as well as the delays applied. Since these parameters don’t have to be specified explicitly, the actual value that these parameters resolve to may emerge only after applying the epoch definition to the a file. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#epoch-data",
    
    "relUrl": "/docs/user-guide/epochs.html#epoch-data"
  },"98": {
    "doc": "Epochs",
    "title": "Epoch Builder",
    "content": "The Toolbox contains an Epoch Builder to help users build and test epoch definition tables. It is launched whenever users click View/Edit Epochs button in the PhysioAnalyzer settings panel. Figure 5: The Epoch Builder window. The Epoch Builder can be split into two main sections: the outer window and the tab group. The outer window contains the banner on top, the file bar below that, and the buttons on the bottom. The tab group contains tabs that display the current epoch definition table and its associated data. Note, the Epoch Builder can only manage epoch definition tables with 100 rows or less. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#epoch-builder",
    
    "relUrl": "/docs/user-guide/epochs.html#epoch-builder"
  },"99": {
    "doc": "Epochs",
    "title": "Outer Window",
    "content": "In the outer window, under the banner, lies the File Bar. It shows the current test file, which is the file used to resolve the current epoch definition when the Generate Epochs button is clicked. This button is also located in the file bar, and is only enabled if files are loaded into the Session Manager. At the bottom of the window lies three buttons: . | Ok: Accepts and saves the current epoch definition, and exits the Epoch Builder. | Reset: Undoes all changes and reloads the original epoch definition present when the builder was launched. | Cancel: Discards all changes and closes the Epoch Builder. | . If the Epoch Builder window is closed manually, all changes are discarded. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#outer-window",
    
    "relUrl": "/docs/user-guide/epochs.html#outer-window"
  },"100": {
    "doc": "Epochs",
    "title": "Tab 1: Define Epochs",
    "content": "The first tab, labeled Define Epochs, shows the epoch definition table and allows users to edit it. The tab contains the following buttons: . | Copy Table: Copies the current epoch definition table to the clipboard, allowing it to be pasted and edited in Excel. | Paste Table: Overwrites the current definition table with the contents of the clipboard. This allows tables to be copied from Excel. | Load From File: Overwrites the current definition table with the contents of an Excel file. | Add Metadata Column: Adds a metadata column to the epoch definition table. | Remove Metadata Column(s): Removes one or more columns from the epoch definition table. | Add Row: Add a new row to the bottom of the epoch definition table. | Removes Row(s): Removes one or more rows from the epoch definition table. | . Below the buttons, the epochs that the current epoch definition table produces when applied to the current file are visualized. This includes epochs already present in the file. The plot is refreshed whenever the ‘Generate Epochs’ button is clicked, and is only visible if files are loaded into the Session Manager. Below that, in the main section of the Define Epochs tabs, is the Epoch Definition Table. The first column (light blue) contains the epoch names, with the next 4 (light green) containing the start time definition, followed by the end time definition (light red). Subsequent columns contain optional metadata (light yellow). Users can freely modify the contents of the cells, or can use the cells’ right click menus. If a row in the epoch definition table produces one or more errors, they are shown in the table under the concerning row. Epoch Definition Menus . Right clicking the cells in the epoch definition table reveals a context menu. The contents of the menu reflects the actual contents of the current test file, and where applicable, is determined by the value of one or more other parameters. | Channel: When right-clicking the startChannel or endChannel cells, the first menu item lists the sets of referenceable events in the file. This determines what values are shown. | Value: When right-clicking the startValue or endValue cells, the first menu item lists all the unique values present in the selected set, specified by either the startChannel and endChannel, respectively. The number of occurrences for each value is also shown. The items below present additional options, such as referencing ‘all events’. | Occur: When right-clicking the startOccur or endOccur cells, the first menu item lists all the occurs matching the concerning value parameter. Additional items allow e.g. the selection of all occurrences. | Delay: When right-clicking the startDelay or endDelay cells, a set of delay options are presented. Below that, the option to slice the event is offered, see Slicing Epochs. | . The context menus also allow the current table row to be deleted or duplicated; and the start or end definitions to be copied from one to the other. Figure 6: The definition table in the Epoch Builder features cells with context menus reflecting the referenceable events in the current file. In the GIF, the menus are used to define epochs as starting at all events with value 100, and ending 10 seconds after. The events are taken from the markers in channel 4. Slicing Epochs . At times, users may wish to slice large epochs into smaller sections. To do this, the large epochs must first be defined in the epoch definition table (or must already be present in a file). The startChannel and endChannel must then be set to epochs so that these epochs can be referenced, and the startValue and endValue parameters, in combination with startOccur and endOccur, can be used to specify the name and occurrences of the to be referenced epoch(s). If the startDelay is set to 0, and the endDelay to dur, new epochs spanning the entirety of the referenced epoch(s) are created. Similarly, if the delays are set to [0 10] and [10 dur], two new epochs are created: one spanning the first 10 seconds of the referenced epoch(s), and the other starting after the first, and ending where the referenced epoch(s) end. To fully slice a epoch, right-click the startDelay or endDelay cells after the startChannel and endChannel have been set to epochs, and the value and occur parameters have been used to select the epoch(s) to be sliced. The Toolbox will then present a dialog with slicing options, and will automatically generate the necessary startDelay and endDelay parameters. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#tab-1-define-epochs",
    
    "relUrl": "/docs/user-guide/epochs.html#tab-1-define-epochs"
  },"101": {
    "doc": "Epochs",
    "title": "Tab 2: Markers and Events Inside Test File",
    "content": "The second tab, labeled Markers and Events inside Test File, displays all the referenceable events in the current (test) file. The epoch generated by the the current epoch definition table, as defined in tab 1, are shown above each graph. Additionally, the channel code—what needs to be entered in the channel parameter in order to reference the displayed set—is shown in the graph titles. Figure 7: The second tab of the Epoch Builder window, showing all referenceable events in the file. Here, the 'Events' tab is shown, which displays all events in the file. The first tab displays the markers, and the third the file events. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#tab-2-markers-and-events-inside-test-file",
    
    "relUrl": "/docs/user-guide/epochs.html#tab-2-markers-and-events-inside-test-file"
  },"102": {
    "doc": "Epochs",
    "title": "Tab 3: Preview Epochs",
    "content": "The third tab, labeled Preview Epochs, again plots the epochs, but also shows a table with all the data about the generated epochs. Figure 8: The third tab of the Epoch Builder window, showing a table with full information about each generated epoch. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#tab-3-preview-epochs",
    
    "relUrl": "/docs/user-guide/epochs.html#tab-3-preview-epochs"
  },"103": {
    "doc": "Epochs",
    "title": "New Epoch Features in v0.6+",
    "content": "The new epoch definition engine is similar to the old version, but features some improvements and a slightly different format. This section presents the main differences. | EpochName Column: The epoch name is now located in the first column rather than the last. | Dur instead of at: In the old version, the at parameter (startAt and endAt) determines if the start or the end of a marker is referenced. These parameters no longer appear in the new epoch definition. Instead, use the ‘dur’ keyword in the delay parameters (startDelay and endDelay) to add a delay equal to the duration of the marker (or other event). See this section for more information. | Dynamic Values, Occurrences and Delays: Previously, exact values had to be specified. Now, values can be numeric ranges or regular expressions. Additionally, in the previous version, only a single predefined occurrence had to be specified (startOccur and endOccur). Now, multiple occurrences and the last keyword are supported. Similarly, multiple delays can now be specified when defining epochs. See this section for more information. | epochModify Deprecated: The epochModify column no longer appears in the new epoch definition table. If you want to slice an epoch into smaller sections, you will need to use the delay parameters. See this section for more information. | New Epoch Builder: The epoch Builder interface gas been updated and now features several improvements. Most importantly, users can now right-click inside the epoch definition table’s cells to open context-aware helper menus. | . An example of the old epoch definition: . | startChannel | startValue | startDelay | startAt | startOccur | endChannel | endValue | endDelay | endAt | endOccur | epochName | . | 1 | 200 | 0 | on | 2 | 1 | 200 | 10 | off | 2 | epoch | . The equivalent epoch definition in the new Toolbox: . | epochName | startChannel | startValue | startDelay | startOccur | endChannel | endValue | endDelay | endOccur | . | epoch | 1 | 200 | 0 | 2 | 1 | 200 | 10 + dur | 2 | . When opening physio data files generates in the old Toolbox version, please make sure that the epochs are resolved as intended. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#new-epoch-features-in-v06",
    
    "relUrl": "/docs/user-guide/epochs.html#new-epoch-features-in-v06"
  },"104": {
    "doc": "Epochs",
    "title": "Events",
    "content": "Next to epochs, the Toolbox can also perform events based analysis. Events are similar to epochs, except they only contain a single time point. Where an epoch has a start time and an end time, an event only has an event time. Events can be created and edited the same way as epochs, with the only difference being that a single time point needs to be defined. An event definition table therefore consists of the following variables: eventTime, eventChannel, eventValue, eventOccur and eventDelay. Currently, only the IBI module makes use of events. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/epochs.html#events",
    
    "relUrl": "/docs/user-guide/epochs.html#events"
  },"105": {
    "doc": "Experiment Setup and Design",
    "title": "Experiment Setup and Design",
    "content": "Considerations for optimizing experiments for compatibility with the Toolbox. 👷🏻‍♀️ 🚧 Under construction 🚧 👷🏻 . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/experiment-design.html",
    
    "relUrl": "/docs/user-guide/experiment-design.html"
  },"106": {
    "doc": "Analyzing Eye-Tracking Data",
    "title": "Analyzing Eye-Tracking Data",
    "content": "A short tutorial specific to analyzing eye-tracking data. 👷🏻‍♀️ 🚧 Under construction. 🚧 👷🏻 . ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/eyetracking.html#analyzing-eye-tracking-data",
    
    "relUrl": "/docs/tutorial/eyetracking.html#analyzing-eye-tracking-data"
  },"107": {
    "doc": "Analyzing Eye-Tracking Data",
    "title": "Analyzing Eye-Tracking Data",
    "content": " ",
    "url": "/docs/archive/v0.6.3/docs/tutorial/eyetracking.html",
    
    "relUrl": "/docs/tutorial/eyetracking.html"
  },"108": {
    "doc": "Features",
    "title": "PhysioData Toolbox",
    "content": "The PhysioData Toolbox is a free easy-to-use and fully graphical application for visualizing, segmenting and analyzing physiological data. It currently supports ECG, Skin Conductance, EMG, ICG, Blood Pressure, Respiration, Pupil Size and Gaze AOI hit data. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#physiodata-toolbox",
    
    "relUrl": "/docs/features.html#physiodata-toolbox"
  },"109": {
    "doc": "Features",
    "title": "Overview",
    "content": "The PhysioData Toolbox is designed to fullfil the following purposes: . | PhysioData file format: The Toolbox defines a standard MATLAB-based file format for managing physiological data and analyses (the PhysioData format). | File Converter: A File Converter is included that easily converts various raw data formats into PhysioData files. | Batch import of files: The Toolbox can import complete folders of PhysioData files and visualize their raw data. | Batch preprocessing: Pre-built preprocessing pipelines are packaged as modules and can be easily configured and applied the imported files. See the current modules. | Visual inspection and artifact removal: All modules feature easy-to-use interfaces for reviewing the preprocessed data and manually removing artifacts. | Automatic epoch generation: Epochs can be automatically generated using user-specified rules, which can reference markers and events inside the data file. | Batch epoch analysis and resampling: The Toolbox can automatically summarize or resample all epochs in the imported files, and export the results for further statistical analysis. | . ",
    "url": "/docs/archive/v0.6.3/docs/features.html#overview",
    
    "relUrl": "/docs/features.html#overview"
  },"110": {
    "doc": "Features",
    "title": "Session Manager",
    "content": "The PhysioData Toolbox is operated using the Session Manager window, which can be used to import multiple files and apply user-specified analysis procedures to them. All files can then be analyzed simultaneously, and their results consolidated into a single table. Additionally, the session can be saved at any time and resumed afterwards. All analysis pipelines are fully parametric and non-destructive. &times; Figure 1: The Session Manager, which is the main toolbox window. It manages the PhysioData files, the PhysioAnalyzer modules and the data export. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#session-manager",
    
    "relUrl": "/docs/features.html#session-manager"
  },"111": {
    "doc": "Features",
    "title": "Modules",
    "content": "The Toolbox features various modules, each containing an adjustable analysis pipeline specific to a certain data type. For the full documentation, see the PhysioAnalyzer page in the User Guide. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#modules",
    
    "relUrl": "/docs/features.html#modules"
  },"112": {
    "doc": "Features",
    "title": "Generic Signal Analyzer",
    "content": "Any generic signal, such as skin temperature, can be analyzed using the Generic Signal Analyzer module, which extracts standard descriptive statistics from the signal per epoch. Additionally, like most other modules, the Generic Signal Analyzer allows the user to perform basic signal correction and artifact rejection. Figure 2: A Generic Signal Analyzer tagged HR, showing a heart-rate signal as calculated in real-time using AcqKnowledge. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#generic-signal-analyzer",
    
    "relUrl": "/docs/features.html#generic-signal-analyzer"
  },"113": {
    "doc": "Features",
    "title": "ECG Signal Analyzer",
    "content": "The ECG Signal Analyzer module lets the user preprocess and analyze a raw ECG signal. It can extract various cardiac measures per epoch; such as, mean heart rate, HRV (RMSSD, pNN20 and pNN50), R-peak count, etc. Additionally, the module allows the user to correct misidentified R-peaks and erroneous Interbeat Intervals (IBIs). Figure 3: The ECG Signal Analyzer interface, showing the raw and filtered ECG signals, the detected R-peaks, the IBIs and the instantaneous heart rate. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#ecg-signal-analyzer",
    
    "relUrl": "/docs/features.html#ecg-signal-analyzer"
  },"114": {
    "doc": "Features",
    "title": "IBI Analyzer",
    "content": "The IBI Analyzer module performs heartbeat locked analysis around user-specified events, which can be used to calculate stimulus specific heart rate acceleration and deceleration. Figure 4: The IBI Sequence Analyzer, showing IBIs -5 to 5 surrounding an event (red triangle). ",
    "url": "/docs/archive/v0.6.3/docs/features.html#ibi-analyzer",
    
    "relUrl": "/docs/features.html#ibi-analyzer"
  },"115": {
    "doc": "Features",
    "title": "HRV Analyzer",
    "content": "The Heart Rate Variability (HRV) Analyzer retrieves corrected IBI data from a linked ECG module, detrends it, and performs epoch-based analyses to extract several time-domain, frequency-domain and non-linear HRV measures. Figure 5: The HRV module's GUI. The top graph shows the epochs (green, blue and red rectangles), and the graph below that shows the IBI events (blue circles), the contiguous IBIs (blue line) and the global trend baseline (red line). The bottom left panel shows the name of the current epoch in the dropdown menu, and under it various metrics for that epoch. The bottom right panel shows collapsible graphs that visualize the: detrended IBIs; IBI successive differences; Poincaré plot; and Lomb-Scargle periodogram (for power analysis). ",
    "url": "/docs/archive/v0.6.3/docs/features.html#hrv-analyzer",
    
    "relUrl": "/docs/features.html#hrv-analyzer"
  },"116": {
    "doc": "Features",
    "title": "ICG Ensemble Analyzer",
    "content": "The ICG Ensemble Analyzer module generates one ICG and one ECG ensemble waveform per epoch, and allows the user to score the necessary ICG landmarks. Figure 6: The ICG Ensemble Analyzer (Manual Scoring) GUI, showing: the ICG signal and the R-peak times (top graph, labeled dZ/dt); the current epoch data (leftmost table); the ensemble ECG and ICG curves, as well as the individual waveforms (two center graphs); and, the individual waveform data (rightmost table). ",
    "url": "/docs/archive/v0.6.3/docs/features.html#icg-ensemble-analyzer",
    
    "relUrl": "/docs/features.html#icg-ensemble-analyzer"
  },"117": {
    "doc": "Features",
    "title": "Blood Pressure Analyzer",
    "content": "Standard statistics regarding the systolic, diastolic and mean arterial blood pressures can be extracted using the Blood Pressure Analyzer module. Figure 7: The BP Analyzer GUI, showing the BP signals and the estimated pulse. Note the automatically detected calibration event around 1865 seconds. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#blood-pressure-analyzer",
    
    "relUrl": "/docs/features.html#blood-pressure-analyzer"
  },"118": {
    "doc": "Features",
    "title": "Respiration Analyzer",
    "content": "The Respiration Analyzer lets the user preprocess and analyze a chest or abdomen expansion signal, generated by a force-transducer. The module calculates basic descriptive statistics for inhalation, exhalation, and breath phases, per epoch. Figure 8: The Respiration Module GUI, showing the respiration signal, the durations of the breath, inhalation, and exhalation, and the breath amplitude. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#respiration-analyzer",
    
    "relUrl": "/docs/features.html#respiration-analyzer"
  },"119": {
    "doc": "Features",
    "title": "EMG Analyzer",
    "content": "Filtered, rectified and smoothed EMG signals can be extracted from the raw EMG using the EMG Analyzer module, which outputs descriptive statistical analysis of all these derived signals. Figure 9: The EMG Signal Analyzer interface, showing the raw, filtered, rectified, and smoothed EMG signals. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#emg-analyzer",
    
    "relUrl": "/docs/features.html#emg-analyzer"
  },"120": {
    "doc": "Features",
    "title": "Skin Conductance Analyzer",
    "content": "The Skin Conductance Analyzer module extracts metrics about the skin conductance level (SCL), phasic activity, and Skin Conductance Responses (SCRs) per epoch. Figure 10: The Skin Conductance Analyzer GUI, showing the SCL (in axis labeled Skin Conductance) and the phasic channel (in the axis labeled Phasic SC). ",
    "url": "/docs/archive/v0.6.3/docs/features.html#skin-conductance-analyzer",
    
    "relUrl": "/docs/features.html#skin-conductance-analyzer"
  },"121": {
    "doc": "Features",
    "title": "Pupil Diameter Analyzer",
    "content": "The Pupil Diameter Analyzer module features user-specifiable raw data filters and signal interpolation options, and exports a variety of pupil-size metrics. Figure 11: The Pupil Diameter Analyzer GUI, showing the left, right, and mean pupil diameter. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#pupil-diameter-analyzer",
    
    "relUrl": "/docs/features.html#pupil-diameter-analyzer"
  },"122": {
    "doc": "Features",
    "title": "Area of Interest Hit Analyzer",
    "content": "With the Area of Interest Hit Analyzer, gaze data in the shape of area of interest hit data can be analyzed and metrics such as the total hit duration on an area of interest per epoch, can be obtained. Figure 12: The Area of Interest Hit GUI, showing the hit data per AOI. In the current file there were four AOIs. ",
    "url": "/docs/archive/v0.6.3/docs/features.html#area-of-interest-hit-analyzer",
    
    "relUrl": "/docs/features.html#area-of-interest-hit-analyzer"
  },"123": {
    "doc": "Features",
    "title": "Features",
    "content": " ",
    "url": "/docs/archive/v0.6.3/docs/features.html",
    
    "relUrl": "/docs/features.html"
  },"124": {
    "doc": "File Converter",
    "title": "File Converter",
    "content": "The File Converter is an app that converts various data formats into PhysioData files for use in the Toolbox. | Introduction . | Launching the File Converter | Supported File Types | . | User Interface . | Data Previewer | File Conversion | . | BIOPAC Files | VU-AMS | LIBC Achieva MRI . | Analysis Tips | . | BioSemi | EET Output . | Experimental Design Considerations | . | EyeLink . | Experimental Design Considerations | Analysis Tips | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html",
    
    "relUrl": "/docs/user-guide/file-converter.html"
  },"125": {
    "doc": "File Converter",
    "title": "Introduction",
    "content": "The PhysioData toolbox is designed to only analyze standardized PhysioData files, which are MATLAB files with the physioData extension that comply with the PhysioData file specification. To facilitate the batch conversion of raw physiological data to the PhysioData format, the toolbox includes a separate File Converter application. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#introduction",
    
    "relUrl": "/docs/user-guide/file-converter.html#introduction"
  },"126": {
    "doc": "File Converter",
    "title": "Launching the File Converter",
    "content": "The File Converter can be launched by selecting it from the welcome screen, or by clicking the menu in the top left corner of the Session Manager, then selecting the File Converter. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#launching-the-file-converter",
    
    "relUrl": "/docs/user-guide/file-converter.html#launching-the-file-converter"
  },"127": {
    "doc": "File Converter",
    "title": "Supported File Types",
    "content": "The current version of the File Converter supports the following raw file formats: . | BIOPAC | VU-AMS | BioSemi | LIBC Philips Achieva 3T MRI scanner | E-Prime Extension for Tobii (EET) | EyeLink | . If your raw data is stored in another format, you can still generate PhysioData files for processing in the Toolbox using a custom MATLAB script (more info). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#supported-file-types",
    
    "relUrl": "/docs/user-guide/file-converter.html#supported-file-types"
  },"128": {
    "doc": "File Converter",
    "title": "User Interface",
    "content": "Files can be imported into the File Converter by clicking the Select Files button and selecting the correct file type and import options. Once the raw files have been imported, information about their contents is presented in the Current Raw Files table, with each row below the top row representing a single file. &times; Figure 1: The File Converter interface, showing 5 imported BIOPAC files (PPN_01.acq – PPN_05.acq) with 13 channels each The first column in the Current Raw Files table contains checkboxes used for enabling and disabling individual files for conversion. The File and Info columns to the right of that show the file names and a summary of the file contents, respectively. In the case that the raw files contain signals, the subsequent columns will show their names and units. Similarly, if a file contains pupil diameter data, columns representing the left and right pupil size data will appear. The checkboxes in the top row can be used to enable and disable individual channels for conversion. It is strongly recommended to not convert data that are not required for analysis. Below the table, the Clear File List button resets the converter to its default empty state, and the Converter Options button launches a menu showing custom conversion options for the selected file type. This button is disabled if the file type does not have any custom options, as is the case for BIOPAC files. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#user-interface",
    
    "relUrl": "/docs/user-guide/file-converter.html#user-interface"
  },"129": {
    "doc": "File Converter",
    "title": "Data Previewer",
    "content": "Clicking the Preview Converted Data button converts the first enabled raw file and displays the converted data in a new window called Data Previewer, which is similar to the Toolbox’s Raw Data Viewer. For more information about viewing and navigating through raw data, see the Data Viewers. The Data Previewer only converts the signals currently enabled for conversion in the Raw Files table (i.e., data in columns where the first row has a checked checkbox). Additionally, if available, the Data Previewer uses the currently set custom converter options when generating data for previewing. These options can be viewed by clicking the custom options button in the main File Converter window (below the table), or the same button in the Data Previewer (to the left of the current file menu). Note that previewing does not actually create a PhysioData file. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#data-previewer",
    
    "relUrl": "/docs/user-guide/file-converter.html#data-previewer"
  },"130": {
    "doc": "File Converter",
    "title": "File Conversion",
    "content": "The Convert File button in the main File Converter window starts the file conversion process, which, depending on the file type, may take a few minutes to complete. The resulting PhysioData files are always given the same name as their raw file counterparts, with the exception of the extension. Before conversion, make sure that all files are similar and compatible with the selected conversion options. If the File Converter detects imminent filename collisions, i.e. that similarly named PhysioData files already exist in the destination folder, the following options become available: . | Skip files that already exist (default): If this option is left selected, the raw files that would produce a PhysioData files that already exist are not converted. | Only overwrite the raw data inside the existing PhysioData files: This option causes the File Converter to only rewrite the raw data inside the PhysioData file, if it already exists, leaving any modules settings, states and corrections intact. Use this option if for instance you already have modules and correction in the file that you do not want to override, but you do want to change the raw data. | Completely overwrite existing PhysioData files: When selected, any preexisting PhysioData file with a conflicting name will be completely overwritten. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#file-conversion",
    
    "relUrl": "/docs/user-guide/file-converter.html#file-conversion"
  },"131": {
    "doc": "File Converter",
    "title": "BIOPAC Files",
    "content": "The built-in BIOPAC converter supports AcqKnowledge (v3.9 – v5.0.2) data saved as .acq files or exported as .mat files. Due to a limitation in the BIOPAC File API, only AcqKnowledge .acq files that comply with the following requirements can be converted: . | All channels must have the same sampling rate | All channels must have the same length | . However, AcqKnowledge data that don’t conform to this requirement can still be exported as .mat files and converted. Note that when AcqKnowledge saves data as a .mat file, the events are lost. Alternatively, the data can be saved as a ‘Windows AcqKnowledge 3 Graph’, which is compatible with the BIOPAC File Converter. When using digital markers, and depending on the experimental design, the BIOPAC AcqKnowledge data may contain 8 digital channels that are only used to calculate a separate 8-bit decimal marker channel. If this is the case, these 8 single-bit channels, usually labeled ‘Digital Input’, should be omitted from conversion as they are not necessary for data analysis. The BIOPAC converter does not feature any custom conversion options. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#biopac-files",
    
    "relUrl": "/docs/user-guide/file-converter.html#biopac-files"
  },"132": {
    "doc": "File Converter",
    "title": "VU-AMS",
    "content": "The VU-AMS converter supports converting raw 5FS files recorded using the VU-AMS system. All sub-sampled signals are up-sampled to the master sampling rate through linear interpolation and nearest neighbor extrapolation. If a channel labeled Z0 is present, a -dZ/dt channel is generated using a differentiating 256 order FIR filter with a high-pass cutoff frequency of 1 Hz, and a low-pass cutoff frequency of 10 Hz. The VU-AMS converter does not feature any custom options. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#vu-ams",
    
    "relUrl": "/docs/user-guide/file-converter.html#vu-ams"
  },"133": {
    "doc": "File Converter",
    "title": "LIBC Achieva MRI",
    "content": "PhysLog files generated by the LIBC Philips Achieva 3T MRI scanner can be converted to the PhysioData format using the LIBC Achieva MRI converter. Note that this converter is designed specifically for use with data from the Leiden University scanner, and may not work as intended on data from other scanners, even those of the same make and model. The converter makes the following variables from the raw physlog .log files available: . | v1: The first VCG vector. | v1: The second VCG vector. | resp: The respiration signal. | ppu: The ppu (pulse) signal. | gx: The MR X-gradient. | gy: The MR Y-gradient. | gz: The MR Z-gradient. | . Additionally, the converter produces a channel which is the average of both v1 and v2 called v1v2avg; i.e. v1v2avg = (v1 + v2) / 2. The scanner also logs physiological trigger events in the mark channel inside the physlog file. These events are converted into 3 synthetic signals with spikes at the locations of triggers: VCG_TRIG, PPU_TRIG and RESP_TRIG. The converter assumes a sampling frequency of 496 Hz. The LIBC Achieva MRI converter does not feature any custom options. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#libc-achieva-mri",
    
    "relUrl": "/docs/user-guide/file-converter.html#libc-achieva-mri"
  },"134": {
    "doc": "File Converter",
    "title": "Analysis Tips",
    "content": "When using the ECG module to analyze the VCG data, it has been observed that using v1v2avg as the “ECG” channel, and applying a high-pass filter of 8 Hz and a low-pass of 46 Hz–approximately–works adequately across various participants and conditions. Increasing the high-pass filter frequency may further improve the suppression of noise and other cardiac waves. Note that the ECG module expects an ECG signal in the common mV range. Since this is not the case with the physlog signals, the module’s gain, or the detection and rejection criteria, will need to be modified. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#analysis-tips",
    
    "relUrl": "/docs/user-guide/file-converter.html#analysis-tips"
  },"135": {
    "doc": "File Converter",
    "title": "BioSemi",
    "content": "The BioSemi converter can be used to extract physiological signals from .bdf files and save them in the PhysioData format. Since the PhysioData Toolbox cannot analyze EEG data, only other physiological signals present in the file, such as ECG, EMG, skin conductance, etc., should be extracted. For BioSemi files, the following BioSemi Options can be set: . | Calculation Channels: This field can be used to generate new data from signals in the file. This can for example be useful for generating an ECG signal. The BioSemi options window provides a calculation example. | Markers and Button Presses: Enables the conversion of Markers and/or Button Presses to markers and labels in the PhysioData file, respectively. By default, both Markers and Button Presses are converted. Note, however, that button presses are not debounced. | . Figure 2: The custom conversion options available for BioSemi files. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#biosemi",
    
    "relUrl": "/docs/user-guide/file-converter.html#biosemi"
  },"136": {
    "doc": "File Converter",
    "title": "EET Output",
    "content": "The E-Prime Extensions for Tobii (EET) output converter supports EET files with the .gazedata (EET 2.x – 3.1) and the .txt (EET 3.2) extensions. This converter features the following custom options: . | Eye-tracking Event Generation: In this field, one or more column names of the EET files can be specified. These columns will then be used to generate eye-tracking events by finding the start and end of each contiguous section of values, or a combination of values. | Gap Threshold: The Toolbox assumes that a time gap between subsequent rows in the gazedata file indicates a break in a section, even if the rows otherwise form a contiguous section. The gap is classified as a difference in row-timestamps with duration larger than N times the sample duration (1/fs). N must be larger than 1, and can be inf. Setting it to inf effectively turns off the above mentioned assumption. | AOI Analysis: In this field, one column name of the EET files can be specified. This column should hold the current area of interest (AOI) hit data. It thus holds the AOI name that is currently looked at (if any). In EET 3.2 files, the ComponentName column can be used for AOI Analysis. The ComponentName column is automatically created in EET 3.2 files and contains the (sub)object or slide state that is currently being looked at. | . Figure 3: The custom conversion options available for EET files. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#eet-output",
    
    "relUrl": "/docs/user-guide/file-converter.html#eet-output"
  },"137": {
    "doc": "File Converter",
    "title": "Experimental Design Considerations",
    "content": "There are a few considerations one should keep in mind when designing an E-Prime task with EET eye tracking and when aiming to analyze the data with the PhysioData Toolbox. The first is the Eye-tracking Event Generation column(s). This column should hold data relevant for event generation (usually String data) and is crucial, as it will be impossible to create epochs without it. The event generation column could for example hold the currently running object in E-Prime, such as “Stimulus” or “Fixation”. When segmentation requires more detailed information, multiple columns can be used for event generation. For example, the currently running object, and the condition of the current trial (e.g. “congruent” and “incongruent”). See the figure below for example event generation columns in the gazedata file. By default, E-Prime does not save any event data in the gazedata file, these data have to be defined by the user. See here for instructions on how to incorporate Tobii eye tracking in an E-Prime experiment, including adding event data to the gazedata files. Another consideration is the AOI column used for the AOI Analysis (not relevant when only pupil data is analyzed). The AOI column should hold the name of the AOI the participant was looking at. By default, E-Prime 3 (when used with EET 3.2) saves a variable called ComponentName. This variable holds the component of the experiment (e.g. Slide sub-object) the participant is looking at. This variable could function as an AOI column. However, whether this variable is suited should be evaluated. See the figure below for an example AOI column in the gazedata. It is strongly recommended to convert gazedata from an initial pilot to check whether the event generation column(s) and (if applicable) the AOI column are sufficient for the purpose of the study, before starting data collection. Figure 4: EET example gazedata obtained with a (fictitious) E-Prime task. In the task, each trial consisted of a Fixation followed by a Stimulus. The Stimulus was a Slide object with a picture of a face with a certain expression (happy, angry or sad). By using empty text sub-objects, several AOIs were drawn: AOIFace (face excluding the eyes, nose and mouth), AOIEyes, AOINose, and AOIMouth. The task saved the ObjectOnScreen variable, holding the currently running object (Fixation or Stimulus), the Condition variable, holding the emotion of the person in the picture (happy, angry or sad), and the AOI variable, holding the AOI that was being looked at. Events can be generated using both the ObjectOnScreen and Condition variable in the following way: ObjectOnScreen;Condition. This will create the following events: 'Stimulus angry', 'Stimulus happy', etc. The AOI column can be used for the AOI Analysis. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#experimental-design-considerations",
    
    "relUrl": "/docs/user-guide/file-converter.html#experimental-design-considerations"
  },"138": {
    "doc": "File Converter",
    "title": "EyeLink",
    "content": "The EyeLink converter can be used to extract raw pupil-size data from SR research’s EyeLink .edf files. This converter features the following custom options: . | Remove EyeLink System Events: The File Converter converts all messages available in the .edf file to eye-tracking events, except the events that match the regular expression specified in this field. Leaving the field blank converts all messages. Many EyeLink system-events are not actually used by the PhysioData Toolbox and can therefore be omitted from conversion. The default value removes these system-events. | DataViewer Options: If messages were sent with an time-offset prefix as defined by DataViewer, then the timestamps of those messages can be corrected accordingly by the File Converter. Messages should have the following format: &lt;offset&gt; &lt;msg&gt;, where &lt;offset&gt; is the message delay in ms. | . Figure 5: The custom conversion options available for EyeLink files. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#eyelink",
    
    "relUrl": "/docs/user-guide/file-converter.html#eyelink"
  },"139": {
    "doc": "File Converter",
    "title": "Experimental Design Considerations",
    "content": "When collecting pupil size with an EyeLink eye tracker, the use of a head stabilizer (chinrest) is required and it is advised to keep the camera distance fixed for all participants. Also, make sure that the AREA or DIAMETER setting in the EyeLink recording software is consistent for all participants. For more information on collecting pupil size with EyeLink, see Recording and Analyzing Pupil Data (Pupillometry) on the SR Research Support Forum (note that you need to log-in or register to be able to view the thread). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#experimental-design-considerations-1",
    
    "relUrl": "/docs/user-guide/file-converter.html#experimental-design-considerations-1"
  },"140": {
    "doc": "File Converter",
    "title": "Analysis Tips",
    "content": "The Pupil Diameter module expects the pupil diameter to be in mm. This is not the case for EyeLink data, where pupil diameter is reported in arbitrary pixels. Therefore, the module’s gain or detection and rejection criteria will need to be modified. EyeLink pupil diameter data can be converted to mm, for instructions see this FAQ on the SR Research Support Forum (log-in required). Converting the pupil diameter to mm can be done in the PhysioData Toolbox, by using the Gain setting in the Pupil Diameter module, or it can be done after processing the data in the PhysioData Toolbox, in for example Excel, R or SPSS. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/file-converter.html#analysis-tips-1",
    
    "relUrl": "/docs/user-guide/file-converter.html#analysis-tips-1"
  },"141": {
    "doc": "HRV Analyzer",
    "title": "HRV Analyzer",
    "content": "The HRV Analyzer calculates basic HRV (Heart Rate Variability) statistics for each epoch. | Introduction | User Corrections | HRV Analyses . | Time-Domain Analysis | Frequency-Domain Analysis | Non-Linear Analysis | . | Processing and Analysis Pipeline . | Step 1: IBI sourcing and Global Detrending | Step 2: Epoch Segmentation and Detrending | Step 3: Calculating Time-Domain Metrics | Step 4: Calculating Frequency-Domain Metrics | Step 5: Poincaré Analysis | . | Settings | Metrics | References | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html"
  },"142": {
    "doc": "HRV Analyzer",
    "title": "Introduction",
    "content": "The HRV Analyzer retrieves corrected IBI (Inter Beat Interval) data from a linked ECG module, detrends it, and performs epoch-based analyses to extract several time-domain, frequency-domain and non-linear HRV measures. &times; Figure 1: The HRV module's GUI. The top graph shows the epochs (green, blue and red rectangles), and the graph below that shows the IBI events (blue circles), the contiguous IBIs (blue line) and the global trend baseline (red line). The bottom left panel shows the name of the current epoch in the dropdown menu, and under it various metrics for that epoch. The bottom right panel shows collapsible graphs that visualize the: detrended IBIs; IBI successive differences; Poincaré plot; and Lomb-Scargle periodogram (for power analysis). The two topmost graphs of the HRV module visualize the epochs, the IBI data that were retrieved from the ECG module and—if enabled—the global trend baseline. Below those are two panels labeled Epoch Data and Results and Epoch Specific Plots, which show the analysis results and plots of the selected epoch. The time-domain, frequency-domain, and non-linear results are visualized for the current epoch in the GUI’s two bottom panels. Users can navigate to another epoch by selecting it from the dropdown menu in the Epoch Data and Results panel, or by clicking the buttons next to it. Additionally, epochs can be selected by clicking on the epoch rectangles in the epoch graph. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#introduction"
  },"143": {
    "doc": "HRV Analyzer",
    "title": "User Corrections",
    "content": "The HRV module itself does not allow users to correct artifacts, this must instead be done in the linked ECG module. Any changes made to the IBIs in the linked ECG module are automatically transmitted to the HRV module, and the graphs and results table are automatically updated. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#user-corrections"
  },"144": {
    "doc": "HRV Analyzer",
    "title": "HRV Analyses",
    "content": "The HRV module performs a collection of time-domain, frequency-domain and non-linear analyses on detrended IBIs located within a specific epoch. See the Metrics section for a full overview of the output. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#hrv-analyses",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#hrv-analyses"
  },"145": {
    "doc": "HRV Analyzer",
    "title": "Time-Domain Analysis",
    "content": "The HRV module extracts the following standard time-domain metrics from the detrended IBI data: . | Percentage of absolute differences between successive IBIs that exceed 20 ms (pNN20) and 50 ms (pNN50). | IBI standard deviation. | Root Mean Squared of Successive Differences (RMSSD). | . The RMSSD and the successive IBI differences from which it was calculated are visualized in the module’s Successive Differences graph in the Epoch Specific Plots panel. Figure 2: The detrended epoch-specific IBIs (top) and the differences between them (bottom). For visualization purposes, the heart rate acceleration events are plotted in pink and the heart rate deceleration events in aquamarine. Note that a heart rate acceleration is defined as an increase in heart rate, which equals a decrease in inter beat interval. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#time-domain-analysis",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#time-domain-analysis"
  },"146": {
    "doc": "HRV Analyzer",
    "title": "Frequency-Domain Analysis",
    "content": "The Lomb-Scargle method is used to estimate the IBI time-series’ Power Spectral Density (PSD), from which the Very Low Frequency (VLF), Low Frequency (LF), and High Frequency (HF) powers are computed. Figure 3: A Power Spectral Density estimate computed using the Lomb-Scargle periodogram method. The Very Low, Low and High Frequency bands are visualized in purple, red and green, respectively. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#frequency-domain-analysis",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#frequency-domain-analysis"
  },"147": {
    "doc": "HRV Analyzer",
    "title": "Non-Linear Analysis",
    "content": "The HRV module generates a Poincaré plot for the non-linear analysis of HRV. A Poincaré plot is a scatter plot where each IBI (IBIn) is plotted against the subsequent IBI (IBIn+1), with the former and latter representing the horizontal and vertical axes, respectively. The Poincaré plot refers to IBIn and IBIn+1 as RRn and RRn+1 in order to better comply with convention. Figure 4: A Poincaré plot showing IBIn vs IBIn+1 points. Heart rate accelerations are plotted in pink, while decelerations are plotted in aquamarine. The ellipses represent 1, 2 and 3 times SD1 and SD2; i.e., the spread perpendicular to and along the identity line. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#non-linear-analysis",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#non-linear-analysis"
  },"148": {
    "doc": "HRV Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "The data processing and analysis pipeline used by the HRV module is described below: . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#processing-and-analysis-pipeline"
  },"149": {
    "doc": "HRV Analyzer",
    "title": "Step 1: IBI sourcing and Global Detrending",
    "content": "The corrected IBIs from the linked ECG module are retrieved. If enabled by the user, the IBI trend is then calculated by first resampling the IBIs at 4 Hz, and then using the smoothness priors approach 1 and the user-specified lambda value to compute the trend baseline. Figure 5: The high-pass cutoff frequency of the smoothness priors detrending filter as a function of lambda (&#955;), as computed for a 10 minute epoch. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-1-ibi-sourcing-and-global-detrending",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-1-ibi-sourcing-and-global-detrending"
  },"150": {
    "doc": "HRV Analyzer",
    "title": "Step 2: Epoch Segmentation and Detrending",
    "content": "The epoch-specific IBIs are isolated by copying all IBIs and rejecting those located outside of the current epoch, with the ‘IBI location’ for a given IBI event being defined as the timestamp of the R-peak that ends that inter beat interval. If smoothness priors detrending is enabled by the user, the epoch-specific IBIs are detrended by subtracting from each IBI its corresponding trend baseline value, as visualized by the red line in the IBI graphs. The epoch-specific IBIs are then also linearly detrended. This is done subsequent to the smoothness priors detrending, or in absence of it if that is disabled. All subsequent steps are performed on the epoch-specific detrended IBIs unless otherwise specified. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-2-epoch-segmentation-and-detrending",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-2-epoch-segmentation-and-detrending"
  },"151": {
    "doc": "HRV Analyzer",
    "title": "Step 3: Calculating Time-Domain Metrics",
    "content": "First, the standard deviation of the IBIs is calculated, which gets reported as the IBI_std_detrended metric. Because the detrended IBIs are used, this standard deviation should be less than the standard deviation calculated by the ECG module, which uses the actual non-detrended IBIs. Subsequently, the detrended IBIs that are ‘contiguous’—i.e., directly adjacent to each other—are identified and used to calculate the successive differences. The root mean squared of these differences is then calculated and reported as RMSSD_detrended. This metric is also calculated by the ECG Signal Analyzer module, but from the non-detrended IBIs. However, since RMSSD is not strongly influenced by slower IBI oscillations, the RMSSDs reported by both modules should not differ substantially. Additionally, the fraction of absolute successive differences that exceed 20 and 50 ms are calculated and reported as a percentage in pNN20_detrended and pNN50_detrended respectively. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-3-calculating-time-domain-metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-3-calculating-time-domain-metrics"
  },"152": {
    "doc": "HRV Analyzer",
    "title": "Step 4: Calculating Frequency-Domain Metrics",
    "content": "First, the PSD of the detrended IBI time-series is estimated using MATLAB’s implementation of the Lomb-Scargle periodogram and a frequency resolution of 0.0001 Hz. An error is thrown if the epoch does not feature enough IBIs to resolve the required frequency range. If enabled in the module’s settings, the PSD is then smoothed using a ‘loess’ filter and the specified span. Any negative PSD values that may result from the smoothing are set to 0. The band powers are then calculated from the smoothed PSD for the following ranges, adjustable in the module’s settings: . | Very Low Frequency (VLF): 0.0033 – 0.04 Hz. | Low Frequency (LF): 0.04 – 0.15 Hz. | High Frequency (HF): 0.15 – 0.4 Hz. | . By default, the detrending lambda is set to 500, which equals an approximate high-pass cutoff frequency of 0.04 Hz given the resampling frequency of 4 Hz. This strongly attenuates the VLF power, so analyzing sub 0.04 Hz frequencies may require that either the smoothness priors detrending be disabled or that the lambda be increased. The absolute powers are reported in ms2 as the metric XF_power, where XF is either VLF, LF or HF. Additionally, the percentages of each power band as a fraction of the total power is reported in the XF_powerPercent metric. For each of the VLF, LF, and HF bands, the highest peak is detected and its value and frequency are logged. These data are exported as XF_psdPeak and XF_psdPeakFreq, respectively. No data is exported for a certain band if that band does not contain a peak. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-4-calculating-frequency-domain-metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-4-calculating-frequency-domain-metrics"
  },"153": {
    "doc": "HRV Analyzer",
    "title": "Step 5: Poincaré Analysis",
    "content": "To generate the Poincaré plot, all the epoch-specific IBIs that have a directly subsequent IBI are identified. These IBIs are labeled IBIn and their subsequent IBIs are labeled IBIn+1. The Poincaré plot is then generated by plotting IBIn against IBIn+1, with the former and latter representing the horizontal (X) and vertical (Y) axes, respectively. A diagonal identity line (X = Y) is then generated, and the standard deviations of the Poincaré data-points is calculated in the direction of the identity line (SD2) and in the direction perpendicular to it (SD1). Depending on the module’s Poincaré plot IBI source setting, either the original IBIs or the detrended IBIs are used. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-5-poincar%C3%A9-analysis",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#step-5-poincaré-analysis"
  },"154": {
    "doc": "HRV Analyzer",
    "title": "Settings",
    "content": "The HRV must be linked to an ECG module in order for it to function. This is done by filling in the tag of the ECG module in the Tag of the ECG Analyzer field. The auto-generated list below shows the settings available in the HRV Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Tag of the ECG Analyzer: The tag of the ECG Analyzer from which the accepted IBIs are used. | Generate epochs from: Specifies how epochs are generated. | . | Global Detrending Settings: The IBI series can be detrended using the smoothing priors method, which can be enabled and configured using the settings below. | Smoothing priors detrending [-]: The lambda for the smoothing priors detrending. | . | PSD Estimation Settings: The Power Spectral Density is estimated using the Lomb-Scargle method, then divided into the Very Low, Low and High Frequency bands using the settings below. | VLF power band [Hz]: The lower and upper limits of the Very Low Frequency band. | LF power band [Hz]: The lower and upper limits of the Low Frequency band. | HF power band [Hz]: The lower and upper limits of the High Frequency band. | LS Periodogram smoothing [Hz]: The window size of the moving average smoothing filter applied to the LS periodogram. | . | Poincaré Plot Settings: The Poincaré plot can be generated either from the original IBIs or from the detrended IBIs. | Poincaré plot IBI source [ ]: The IBIs to use when generating the Poincaré plot. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#settings"
  },"155": {
    "doc": "HRV Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table below lists all the metrics produced by the HRV Analyzer module. Table 1: The metrics calculated by the HRV Analyzer module. | Variable: | Unit: | Description: | . | timeDomain_error | - | Time-domain analysis errors. | . | RMSSD_detrended | ms | The Root Mean Squared of the Successive Differences between contiguous IBIs, as computed from the detrended IBIs. | . | IBI_std_detrended | ms | Standard Deviation of the accepted discrete IBI data points (SD normalized by (N-1), where N is the sample size), as computed from the detrended IBIs. | . | pNN20_detrended | % | Percentage of absolute differences between successive IBIs that are greater than 20 ms, as computed from the detrended IBIs. | . | pNN50_detrended | % | Percentage of absolute differences between successive IBIs that are greater than 50 ms, as computed from the detrended IBIs. | . | LS_error | - | Lomb-Scargle periodogram calculation errors. | . | VLF_powerPercent | % | The power of the Very Low Frequency band, calculated using the Lomb-Scargle method, as a percentage of the sum of the VLF, LF and HF powers. | . | VLF_power | ms^2 | The absolute power of the Very Low Frequency band, as calculated using the Lomb-Scargle method. | . | VLF_psdPeak | s^2/Hz | The highest power spectral density peak in the Very Low Frequency band. Empty values may indicate that the band did not feature any peaks. | . | VLF_psdPeakFreq | Hz | The frequency at the highest power spectral density peak inside the Very Low Frequency band. Empty values may indicate that the band did not feature any peaks. | . | LF_powerPercent | % | The power of the Low Frequency band, calculated using the Lomb-Scargle method, as a percentage of the sum of the VLF, LF and HF powers. | . | LF_power | ms^2 | The absolute power of the Low Frequency band, as calculated using the Lomb-Scargle method. | . | LF_psdPeak | s^2/Hz | The highest power spectral density peak in the Low Frequency band. Empty values may indicate that the band did not feature any peaks. | . | LF_psdPeakFreq | Hz | The frequency at the highest power spectral density peak inside the Low Frequency band. Empty values may indicate that the band did not feature any peaks. | . | HF_powerPercent | % | The power of the High Frequency band, calculated using the Lomb-Scargle method, as a percentage of the sum of the VLF, LF and HF powers. | . | HF_power | ms^2 | The absolute power of the High Frequency band, as calculated using the Lomb-Scargle method. | . | HF_psdPeak | s^2/Hz | The highest power spectral density peak in the High Frequency band. Empty values may indicate that the band did not feature any peaks. | . | HF_psdPeakFreq | Hz | The frequency at the highest power spectral density peak inside the High Frequency band. Empty values may indicate that the band did not feature any peaks. | . | LF_HF_ratio | - | The Low Frequency power divided by the High Frequency power. | . | poincare_error | - | Poincare calculation errors. | . | poincare_SD1 | ms | The poincare SD1: the standard deviation of RRn against RRn+1, in the direction perpendicular to the diagonal RRn = RRn+1 line. | . | poincare_SD2 | ms | The poincare SD2: the standard deviation of RRn against RRn+1, in the direction of the diagonal RRn = RRn+1 line. | . | poincare_SD2_SD1_ratio | - | The poincare SD2 divided by the poincare SD1. | . | HR_mean | BPM | Mean of the continuous Heart Rate, as interpolated from the accepted IBI data points. | . | R_peakCount | count | Count of accepted R-peaks inside current epoch, including user-defined added R-peaks. | . | IBI_mean | s | Arithmetic mean of the accepted discrete IBIs. IBI values are defined as: IBI(n) = Rt(n)-Rt(n-1), and are timestamped using: IBIt(n) = Rt(n). | . | IBI_min | s | Min value of the accepted discrete IBI data points. | . | IBI_max | s | Max value of the accepted discrete IBI data points. | . | IBI_std | s | Standard Deviation of the accepted discrete IBI data points (SD normalized by (N-1), where N is the sample size). | . | IBI_count | count | Count of accepted IBI data points inside current epoch. | . | IBI_coverage | % | The percentage-wise IBI coverage of the epoch; i.e., 100*(sum of the IBIs)/(Epoch Duration). | . | HRV_ssdCount | count | Count of succesive IBIs inside current epoch. Nonadjacent IBIs are not considered succesive. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#metrics"
  },"156": {
    "doc": "HRV Analyzer",
    "title": "References",
    "content": ". | Tarvainen, M. P., Ranta-Aho, P. O., &amp; Karjalainen, P. A. (2002). An advanced detrending method with application to HRV analysis. IEEE Transactions on Biomedical Engineering, 49, 172-175. doi: 10.1109/10.979357 &#8617; . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/hrv-module.html#references",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/hrv-module.html#references"
  },"157": {
    "doc": "IBI Sequence Analyzer",
    "title": "IBI Sequence Analyzer",
    "content": "The IBI Analyzer module performs heartbeat locked analysis around user-specified events, which can be used to calculate stimulus specific heart rate acceleration and deceleration. | Introduction | User Corrections | Processing and Analysis Pipeline | Settings | Metrics | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ibi-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ibi-module.html"
  },"158": {
    "doc": "IBI Sequence Analyzer",
    "title": "Introduction",
    "content": "The IBI Sequence Analyzer performs event-based IBI sequence extraction using the IBIs generated and corrected in an ECG Signal Analyzer, and events defined using Event Definition Rules. Per event, the neighboring IBIs are detected and indexed. This module requires that an ECG Signal Analyzer be present in the PhysioAnalyzer file. The IBIs used in the IBI Sequence Analyzer are automatically updated when the linked ECG Signal Analyzer changes. The output of this module consists of the IBIs surrounding events, and their delays relative to those events. As such, with some post processing, this module allows anticipatory and evoked IBIs to be analyzed both as a function of their beat index (i.e., beat -1, beat 0, beat 1, beat 2, etc. around a stimulus); and, through interpolation, as a function of relative time (i.e., IBI at -1, 0, 1, 2 etc. seconds around a stimulus). &times; Figure 1: The IBI Sequence Analyzer, showing IBIs -5 to 5 surrounding an event (red triangle). The size of the IBI circles increase with their index, which allows the user to detect when IBIs from one event overlap IBIs from another event. Note that IBI(-1) is the first IBI to occur after the event, however, it is not characterized as IBI(0) due to the threshold being set at 0.5. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ibi-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ibi-module.html#introduction"
  },"159": {
    "doc": "IBI Sequence Analyzer",
    "title": "User Corrections",
    "content": "The IBI module itself does not allow users to correct artifacts, this must instead be done in the linked ECG module. Any changes made to the IBIs in the linked ECG module are automatically transmitted to the IBI module, and the graphs and results table are automatically updated. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ibi-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ibi-module.html#user-corrections"
  },"160": {
    "doc": "IBI Sequence Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "When indexing the IBIs around events, the IBI corresponding to the event itself, IBI(0), is first identified. IBI(0) is the first IBI after an event, unless the event occurs after a certain fraction of that IBI, in which case the next IBI becomes IBI(0). The time before which the event must occur so that a given IBI remains IBI(0) is calculated using Eq 1. \\[\\begin{equation} t_{cutoff} = t_{IBIstart} + (threshold \\cdot IBI) \\tag{Eq. 1} \\end{equation}\\] After IBI(0) is defined, the IBIs spanning from the setting Lower Index to the setting Upper Index, relative to IBI(0), are extracted; e.g., if Lower Index = -2 and Upper Index = 5, two IBIs before IBI(0) and five after are considered, for 8 in total. Note, only events where all neighboring IBIs are present are analyzed. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ibi-module.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ibi-module.html#processing-and-analysis-pipeline"
  },"161": {
    "doc": "IBI Sequence Analyzer",
    "title": "Settings",
    "content": "The IBI module must be linked to an ECG module in order for it to function. This is done by filling in the tag of the ECG module in the Tag of the ECG Analyzer field. The auto-generated list below shows the settings available in the IBI Sequence Analyzer module: . | General Settings: Name, source and event settings for this IBI Sequencer. An ECG Analyzer must exist, so that its (corrected) IBIs can be used for sequencing. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Tag of the ECG Analyzer: The tag of the ECG Analyzer from which the (corrected) IBIs are to be used. | Generate events from: Specifies how events are generated. | . | Sequencing Settings: This analyzer extracts the IBI values around predefined events. First, the IBI corresponding to the event–IBI(0)–is detected; then, the IBIs spanning from ‘Lower Index’ to ‘Upper Index’, relative to IBI(0), are extracted. IBI(0) is the first IBI after an event, unless the event occurs after IBIstart+(threshold*IBI), then the next IBI becomes IBI(0). | Lower index: The lower index of the IBIs to be analyzed. | Upper index: The upper index of the IBIs to be analyzed. | IBI(0) threshold: The threshold for classifying IBI(0). | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ibi-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ibi-module.html#settings"
  },"162": {
    "doc": "IBI Sequence Analyzer",
    "title": "Metrics",
    "content": "The output of the IBI Sequence Analyzer is determined by the settings; for each IBI index, two variables are produced. See table below. Empty rows in the output may indicate that that event features missing IBIs. The auto-generated table belows lists all the metrics produced by the IBI Sequence Analyzer module. Table 1: The metrics calculated by the IBI Sequence Analyzer module. | Variable: | Unit: | Description: | . | IBI_index | s | The value of the IBI with the given index, per event. | . | Delay_IBI_index | s | The time of the IBI with the given index, relative to the event. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/ibi-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/ibi-module.html#metrics"
  },"163": {
    "doc": "ICG Ensemble Analyzer",
    "title": "ICG Ensemble Analyzer",
    "content": "The ICG Ensemble Module generates one ICG and one ECG ensemble waveform per epoch, and allows the user to score the necessary ICG landmarks. | Introduction | User Corrections . | Rejecting or Accepting Waveforms | Scoring | . | Settings | Metrics | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html"
  },"164": {
    "doc": "ICG Ensemble Analyzer",
    "title": "Introduction",
    "content": "The ICG Ensemble Analyzer module performs epoch-based analysis of ensemble ICG and ECG signals, and allows the user to manually score the Q, B, C, and X points on the ensembles. In addition, the user can exclude deviant waveforms from the ensemble. Waveforms are sections of the ICG and ECG signals that straddle each R-peak, and the ensemble is the grand average curve of the individual waveforms, . &times; Figure 1: The ICG Ensemble Analyzer (Manual Scoring) GUI, showing: the ICG signal and the R-peak times (top graph, labeled dZ/dt); the current epoch data (leftmost table); the ensemble ECG and ICG curves, as well as the individual waveforms (two center graphs); and, the individual waveform data (rightmost table). Note that the first waveform in the table can be excluded from the ensemble by unchecking the 'Use Waveform' box. The rejected waveform is visualized by a triangle in the Wave-Skip graph, above its R-peak location. To ensemble the ICG and ECG signals, a valid ECG Signal Analyzer module must be present in the PhysioData file. The R-peak times from this ECG module, as well as the user specified waveform start and end offsets, are used to slice the ICG and ECG signals into individual waveforms. Only waveforms that completely fit inside one or more epochs are further processed. The filtered ECG signal from the ECG module is used for the ECG waveforms, and the ICG signal is taken from the user specified channel, and optionally pre-processed. The ICG Ensemble Analyzer only analyzes the ICG (-dZ/dt) signal, the Generic Signal Analyzer module can be used to calculate descriptive statistics from the Z-signal; e.g., mean Z value per epoch. Similarly, ECG based metrics are only calculated in the ECG module, not the ICG module itself. For convenience and compatibility, consider defining the necessary epochs in the ECG module, then referring to them in the ICG and Generic Signal Analyzers. The toolbox cannot generate a -dZ/dt signal from a Z signal, but this can be done beforehand using a custom MATLAB script. The waveform rejection criteria, and the placement strategy for the Q, B, C and X points are at the researchers’ own discretion, and fall outside of the scope of this document. Because the Q-point is used to mark the onset of the PEP, ‘R-onset PEP’ can technically be calculated by placing the Q-point at the R onset. Figure 2: The ECG (top) and ICG (bottom) ensembles, and their landmarks. The R and C points are automatically detected, whereas the Q, B and X points must be manually scored by the user. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#introduction"
  },"165": {
    "doc": "ICG Ensemble Analyzer",
    "title": "User Corrections",
    "content": "With the exception of basic pre-filtering, the ICG Ensemble Analyzer module does not allow the user to modify the ICG signal. It is, however, possible to include or exclude individual waveforms from the ensembles, and to custom place the ICG and ECG landmarks (except the R-peaks). The Epoch Data and Waveform Data tables, and the Waveform Graphs display information about the currently selected epoch, and allow that epoch’s ensemble to be scored. To change the currently selected epoch, choose another one from the dropdown menu in the Epoch Data table, or click on the desired epoch in the epoch graph. The filtered ECG signal and the R-peak times, and hence also the ensembles, are dependent on the linked ECG module, and are automatically updated whenever the ECG module’s data is changed. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#user-corrections"
  },"166": {
    "doc": "ICG Ensemble Analyzer",
    "title": "Rejecting or Accepting Waveforms",
    "content": "Once a waveform is rejected, neither the ICG nor ECG waveforms corresponding to that R-peak will be used to calculate the ensemble averages of any epoch that that R-peak may be in. Rejected waves are visualized in the wave-skip graph as triangles above their R-peak times. Additionally, rejected waveforms are plotted as dashed lines in the Waveform Graphs. Individual waveforms can be rejected and included one at a time by checking or unchecking their Use Waveform box in the Waveform Data table. The analyzer module calculates a deviation metric for each ICG waveform to facilitate the identification and rejection of abnormal waveforms. This metric, the Normalized Root Mean Squared Deviation (NRMSD) is calculated as root mean squared of the deviation between each sample of a ICG waveform \\((\\small ICG{i})\\) and the corresponding sample of the ICG ensemble \\((\\small \\widehat{ICG}_{i})\\). The RMSD is then normalized using the range of the ensemble, as in Equation 1. \\[\\begin{equation} \\small NRMSD = \\sqrt[]{ \\frac{\\sum_{i=1}^{n}(\\widehat{ICG}_{i} - ICG{i})^{2}}{n} } \\cdot (\\widehat{ICG}_{max} - \\widehat{ICG}_{min}) \\tag{Eq. 1} \\end{equation}\\] The Sort button toggles the table sort between increasing R-peak time and decreasing NRMSD. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#rejecting-or-accepting-waveforms",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#rejecting-or-accepting-waveforms"
  },"167": {
    "doc": "ICG Ensemble Analyzer",
    "title": "Scoring",
    "content": "The Q-point can be scored by right-clicking inside the ECG waveform graph axes at the desired Q-point time, and selecting the Place Q-Point at this time from the context menu. Similarly, the B and X points can be scored by right-clicking inside the ICG waveform graph axes. All manually scored points are automatically placed on their respective ensemble curves at the sample that is closest to the user-specified time; i.e., a sampling rate of 1000 Hz allows scoring with 1 ms accuracy. To facilitate the scoring of the ECG and ICG landmarks, the first time derivative, acceleration, and the second time derivative, jerk, of both signals are calculated. Clicking the Ensemble | Accel. + Jerk | Waves button toggles between showing the waveforms or the derivatives. As the derivatives are arbitrarily scaled to fit the ensemble curve range, they should only be used for visual aid when scoring. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#scoring",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#scoring"
  },"168": {
    "doc": "ICG Ensemble Analyzer",
    "title": "Settings",
    "content": "The ICG Ensemble Analyzer assumes that the unit of the ICG signal is -Ω/s. If this is not the case, fill in an appropriate gain value (multiplier) to transform the signal into -Ω/s. The auto-generated list below shows the settings available in the ICG Ensemble Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Tag of the ECG Analyzer: The tag of the ECG Analyzer from which the accepted R-peaks are used. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings: The gain is the value with which the raw -dZ/dt signal needs to be multiplied to convert it into -Ω/s. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Highpass filter [Hz]: The high-pass filter and its cutoff frequency. | Lowpass filter [Hz]: The low-pass filter and its cutoff frequency. | . | Epoch Ensembling Settings: Settings for generating the ensembled -dZ/dt signal, per epoch. These settings cannot be changed. | Start of waveform vs. R-peak [s]: The relative delay of the start of the ensembled ICG waveform, relative to the R-peak. | End of waveform vs. R-peak [s]: The relative delay of the end of the ensembled ICG waveform, relative to the R-peak. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#settings"
  },"169": {
    "doc": "ICG Ensemble Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the ICG Ensemble Analyzer module. Table 1: The metrics calculated by the ICG Ensemble Analyzer module. | Variable: | Unit: | Description: | . | RQ | ms | Time of scored Q-Point on the ensembled ECG curve, relative to the R-Point. | . | Q_Amp | mV | Amplitude of scored Q-Point on the ensembled ECG curve. | . | RB | ms | Time of scored B-Point on the ensembled ICG curve, relative to the R-Point. | . | B_Amp | -ohm/sec | Amplitude of scored B-Point on the ensembled ICG curve. | . | RC | ms | Time of scored C-Point (dZdt-max) on the ensembled ICG curve, relative to the R-Point. | . | C_Amp | -ohm/sec | Amplitude of scored C-Point (dZdt-max) on the ensembled ICG curve. | . | RX | ms | Time of scored X-Point on the ensembled ICG curve, relative to the R-Point. | . | X_Amp | -ohm/sec | Amplitude of scored X-Point on the ensembled ICG curve. | . | HR | BPM | Average instantaneous Heart Rate, in BPM. | . | PEP | ms | The Pre-Ejection Period (PEP = RB-RQ). | . | PEPplausibility | - | The range of plausible PEP values for the given HR. | . | LVET | ms | The Left Ventricular Ejection Time (LVET = RX-RB). | . | LVETplausibility | - | The range of plausible LVET values for the given HR. | . | nWaveforms | count | Number of complete waveforms inside the epoch. | . | nAcceptedWaveforms | count | Number of accepted waveforms inside the epoch. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/icg-ensemble-module.html#metrics"
  },"170": {
    "doc": "Home",
    "title": "PhysioData Toolbox",
    "content": "The PhysioData Toolbox is a free easy-to-use and fully graphical application for visualizing, segmenting and analyzing physiological data. Jan 27th, 2022: Version 0.6.3 released (see what’s new). 📥 Get the Toolbox: . Download and Install . 👀 See the Toolbox features: . Features . 💡 Learn how to use Toolbox: . Tutorial . 📖 Read the full manual: . User Guide . 🎓 Cite the Toolbox: . Sjak-Shie, E. E. (2022). PhysioData Toolbox (Version 0.6.3) [Computer software]. Retrieved from https://PhysioDataToolbox.leidenuniv.nl . ",
    "url": "/docs/archive/v0.6.3/#physiodata-toolbox",
    
    "relUrl": "/#physiodata-toolbox"
  },"171": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/docs/archive/v0.6.3/",
    
    "relUrl": "/"
  },"172": {
    "doc": "Download and Installation",
    "title": "Download and Installation",
    "content": "The PhysioData Toolbox can be downloaded as a zip file containing the executables and supplementary files: . ❗ The Toolbox is only compatible with Windows. PhysioData Toolbox v0.6.3 . The Toolbox requires the free MATLAB 2020b Component Runtime (v9.9): . MATLAB Runtimes . See installation guide below. | Installation . | SmartScreen Warning | . | License and Support | Troubleshooting | . ",
    "url": "/docs/archive/v0.6.3/docs/installation.html",
    
    "relUrl": "/docs/installation.html"
  },"173": {
    "doc": "Download and Installation",
    "title": "Installation",
    "content": "Before running the Toolbox, download and install the free MATLAB 2020b Component Runtime (v9.9). You will need admin rights to install it. Ask your IT department to install it if you don’t have the necessary permissions. If you already have MATLAB 2020b including the Compiler Toolbox, you should already have the correct runtime installed. Once the MATLAB runtime is ready: . | Download and unpack the Toolbox zip file, preferably to local storage. | Run the PhysioDataToolbox.exe file. | . If this is your first time using the Toolbox, follow the Basic Walkthrough to get acquainted with the Toolbox features. ❕ 🙁 Problems? See Troubleshooting below. ",
    "url": "/docs/archive/v0.6.3/docs/installation.html#installation",
    
    "relUrl": "/docs/installation.html#installation"
  },"174": {
    "doc": "Download and Installation",
    "title": "SmartScreen Warning",
    "content": "When running PhysioDataToolbox.exe for the first time, especially recently released versions, you might get a Windows SmartScreen warning. This is because even though the PhysioData Toolbox executable is signed, it is considered unrecognized until it has built a reputation with the Microsoft SmartScreen system (more info). To run the Toolbox anyway, click More Info, then Run anyway. &times; Figure 1: When running a new version of the Toolbox for the first time, you might encounter a Windows SmartScreen warning. To run the Toolbox, click More info then Run anyway. If that options does not appear, you will need to unblock the executable. More info below. In Windows 11, the Run Anyway option may not appear. In that case, to run the Toolbox, you must manually unblock it. To do so: . | Right-click the PhysioDataToolbox.exe file. | Click Properties. If that option does not appear, first click Show more options. | In Properties, under the General tab, enable the Unblock checkbox. | . More information about this procedure can be found here. ",
    "url": "/docs/archive/v0.6.3/docs/installation.html#smartscreen-warning",
    
    "relUrl": "/docs/installation.html#smartscreen-warning"
  },"175": {
    "doc": "Download and Installation",
    "title": "License and Support",
    "content": "The Toolbox is in active development and is made freely available ‘as is’ to students and researchers. The software has undergone thorough testing and validation, but is presented without guarantee, and without warranty of fitness for a particular purpose. Always double-check the results, and please report any errors, inconsistencies and suggestions to the development team. The PhysioData Toolbox is meant strictly for non-diagnostic, non-medical and non-commercial use. This Toolbox sends anonymous usage data to an online analytics server for tracking how often the Toolbox and its various features are used. These data are necessary for rationalizing the continued development and maintenance of the Toolbox and its components. No physiological (meta)data, analysis results or personally identifiable information is collected. If you use the PhysioData Toolbox, please cite it using the following information: . Sjak-Shie, E. E. (2022). PhysioData Toolbox (Version 0.6.3) [Computer software]. Retrieved from https://PhysioDataToolbox.leidenuniv.nl . If you require support, or if you have any questions, comments or suggestions, please contact us at PhysioDataToolbox@fsw.leidenuniv.nl. ",
    "url": "/docs/archive/v0.6.3/docs/installation.html#license-and-support",
    
    "relUrl": "/docs/installation.html#license-and-support"
  },"176": {
    "doc": "Download and Installation",
    "title": "Troubleshooting",
    "content": ". | Ensure correct runtime installation: Make sure that the correct version of the MATLAB Component Runtime–MATLAB 2020b Component Runtime (v9.9)–has been properly installed. An older or newer version will not suffice. | Unpack zip to suitable location: Before running the Toolbox executables, please ensure that the zip file is unpacked to a folder where you have write-access, preferably on a local drive. Additionally, do not put the Toolbox in a folder controlled by a file-synchronization service (e.g. Dropbox). | Wait: When running PhysioDataToolbox.exe for the first time, it will attempt to create a folder named PhysioDataToolbox_mcr in the same directory as the executable, and unpack its dependencies there. This may take several minutes, especially when running the Toolbox on network or non-SSD drives. Please be patient. Subsequent launches should be much faster. | Ask for help: Contact the developers and explain your predicament. | . ",
    "url": "/docs/archive/v0.6.3/docs/installation.html#troubleshooting",
    
    "relUrl": "/docs/installation.html#troubleshooting"
  },"177": {
    "doc": "Overview",
    "title": "Overview",
    "content": "The Toolbox features various PhysioAnalyzers–modules containing an adjustable analysis pipeline specific to a certain data type. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/overview.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/overview.html"
  },"178": {
    "doc": "Overview",
    "title": "Introduction",
    "content": "The Toolbox has one main PhysioAnalyzer module, called the Generic Signal Analyzer. This module performs basic preprocessing and descriptive analysis on miscellaneous time series, such as a temperature recording. All other modules are derivatives of the Generic Signal Analyzer, and extend it by incorporating preprocessing and analysis steps specific for their target data type. Some modules reference data in other modules, and therefore require that the other modules be present in the file in order to function. For instance, the ICG module uses the R-peaks from an ECG module. PhysioAnalyzer modules can be added and removed from files by using the Session Manager. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/overview.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/overview.html#introduction"
  },"179": {
    "doc": "Overview",
    "title": "PhysioAnalyzer Modules",
    "content": "The current version of the Toolbox features the following modules: . | Generic Signal Analyzer: Performs generic analysis on signals. | ECG Signal Analyzer: Analyzes an ECG signal. | IBI Sequence Analyzer: Performs analysis of IBIs around events. | HRV Analyzer: Analyzes Heart Rate Variability. | ICG Ensemble Analyzer: Analyzes an ICG (-dZ/dt) signal using ensembling. | Blood Pressure Analyzer: Analyzes a blood pressure signal. | Respiration Analyzer: Analyzes a respiration signal. | EMG Analyzer: Performs analysis on an EMG signal. | Skin Conductance Analyzer: Analyzes a Skin Conductance signal. | Pupil Diameter Module: Analyzes pupil diameters. | Area of Interest Hit Analyzer: Analyzes Area of Interest (AOI) hits in an eye-tracking dataset. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/overview.html#physioanalyzer-modules",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/overview.html#physioanalyzer-modules"
  },"180": {
    "doc": "PhysioAnalyzers",
    "title": "PhysioAnalyzers",
    "content": "The Toolbox features various PhysioAnalyzers–modules containing an adjustable analysis pipeline specific to a certain data type. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules.html"
  },"181": {
    "doc": "Generic Signal Analyzer",
    "title": "Generic Signal Analyzer",
    "content": "The Generic Signal Analyzer analyzes generic signals and calculates a variety of standard descriptive metrics. | Introduction | User Corrections | Processing and Analysis Pipeline . | Low-Pass and High-pass Filtering | . | Settings | Metrics | Resampled Signals | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html"
  },"182": {
    "doc": "Generic Signal Analyzer",
    "title": "Introduction",
    "content": "The Generic Signal Analyzer is the ‘standard’ PhysioAnalyzer module, which all other modules are based on. This PhysioAnalyzer type performs basic descriptive analyses on miscellaneous signals, and allows the user to indicate noisy sections that the toolbox can then interpolate over. Unlike the other PhysioAnalyzers, the units and labels in the Generic Signal Analyzer are taken directly from the raw data channels. These cannot be edited in this version of the toolbox. This module can be used for signals such as: body temperature, heart-rate, etc. &times; Figure 1: A Generic Signal Analyzer tagged HR, showing a heart-rate signal as calculated in real-time using AcqKnowledge. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#introduction"
  },"183": {
    "doc": "Generic Signal Analyzer",
    "title": "User Corrections",
    "content": "Artifact removal in the Generic Signal Analyzer module occurs through the user marking sections of the signal as invalid. These sections, aka Raw-Skip zones, are not extracted from the raw data, but are instead linearly interpolated before high-pass and/or low-pass filtration. In the case that a section extends beyond the start or end of the signal, extrapolation in that section occurs via the nearest-neighbor method. | Removing raw data artifacts: To mark or unmark a section of the raw signal for interpolation, left-click in the graph at the start-time of the desired section, drag the mouse, and release at the end-time of the desired section. Choose the desired action from the pop-up menu: . | Disregard Data: Disregard Data tells the toolbox to reject the raw data samples within the marked section, and replace them with linearly interpolated values. | Use Data: Use Data tells the toolbox to use the raw data inside the section. This is the default state, and the opposite of the Disregard option. As such, it can be used to remove a section previously marked as ‘Disregarded’. | . | . Figure 2: Marking a correction zone for interpolation: after the red section has been selected by dragging the left mouse button, the pop-up menu presents two options: disregard the raw data and interpolate; or, use the raw data. Figure 3: The heart-rate signal, which featured two artifacts, has been corrected by inserting two interpolation zones. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#user-corrections"
  },"184": {
    "doc": "Generic Signal Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "In the Generic Signal Analyzer, the desired channel is extracted from the current file’s raw data using the user specified channel. Then, the user-specified corrections, gain and filtering options are applied. When the analysis is run, the final filtered signal is sliced into a single segment per epoch, and descriptive analysis is performed on each segment. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#processing-and-analysis-pipeline"
  },"185": {
    "doc": "Generic Signal Analyzer",
    "title": "Low-Pass and High-pass Filtering",
    "content": "Before applying the digital filters, the cutoff frequencies are normalized using Equation 1, where the resulting ω0 must be between 0 and 1. If this is not the case, the signal is not filtered or analyzed. This behavior is fundamental to how the the Toolbox applies MATLAB digital filters, and holds true for all physioanalyzer modules. \\[\\begin{equation} \\omega _{0} = \\frac{2\\cdot f_{cutoff}}{f_{sampling}} \\tag{Eq. 1} \\end{equation}\\] . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#low-pass-and-high-pass-filtering",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#low-pass-and-high-pass-filtering"
  },"186": {
    "doc": "Generic Signal Analyzer",
    "title": "Settings",
    "content": "The auto-generated list below shows the settings available in the Generic Signal Analyzer module. | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings: Settings for processing the raw signal. The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Highpass filter [Hz]: The high-pass filter and its cutoff frequency. | Lowpass filter [Hz]: The low-pass filter and its cutoff frequency. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#settings"
  },"187": {
    "doc": "Generic Signal Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the Generic Signal Analyzer module. Table 1: The metrics calculated by the Generic Signal Analyzer module. | Variable: | Unit: | Description: | . | mean | - | The mean of the signal inside the current epoch. | . | min | - | The minimum of the signal inside the current epoch. | . | minPointTime | s | The time where the minimum of the signal (inside the epoch) was reached, relative to the start of the epoch. | . | max | - | The maximum of the signal inside the current epoch. | . | maxPointTime | s | The time where the maximum of the signal (inside the epoch) was reached, relative to the start of the epoch. | . | std | - | The standard deviation (nanstd) of the signal inside the current epoch. | . | validSampleCount | count | The count of the valid samples inside the current epoch. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#metrics"
  },"188": {
    "doc": "Generic Signal Analyzer",
    "title": "Resampled Signals",
    "content": "The Generic Signal Analyzer module resamples the filtered signal. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#resampled-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/physioanalyzer.html#resampled-signals"
  },"189": {
    "doc": "PhysioData File Format",
    "title": "PhysioData File Format",
    "content": "This page contains information about the PhysioData file format and examples of custom PhysioData file generation in MATLAB. | Introduction . | PhysioAnalyzers | . | File Specification and Format . | File Contents Outline | . | MATLAB Examples . | Basic Example 1 | Other Examples | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html"
  },"190": {
    "doc": "PhysioData File Format",
    "title": "Introduction",
    "content": "The Toolbox can only read data from PhysioData files, which are standard MATLAB MAT files that correspond to the Toolbox’s data format, and have the .physioData extension. PhysioData files can be generated using the File Converter or a custom MATLAB script. Using a custom MATLAB script to generate PhysioData file has the following benefits: . | Any Suitable Raw Data: If the raw data format is not supported by the File Converter, it can still be saved as a PhysioData file using a custom MATLAB script and analyzed by the Toolbox. | Pre-generated Epoch: If the logic needed to generate epochs is not supported by the Toolbox’s epoch resolution engine, or the data required to generate the epochs are saved in separate files, the desired epochs can be pre-generated using a MATLAB script and still analyzed using the Toolbox. Additionally, this method allows the inclusion of custom metadata in the epoch table, which will be copied to the results table. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#introduction",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#introduction"
  },"191": {
    "doc": "PhysioData File Format",
    "title": "PhysioAnalyzers",
    "content": "The PhysioData Toolbox is essentially a collection of graphical user interfaces that allow users to visualize and process the data inside PhysioData files. The processing occurs using specific modules called PhysioAnalyzers. Each such module is designed to analyze one specific type of signal; e.g., the ECG Signal Analyzer module analyzes a raw ECG signal, extracts the heart rate and other cardiac metrics, and allows the user to review and correct the generated data. Analyzing data using the toolbox consists of the user first creating a PhysioAnalyzer module and defining its Settings, then propagating that to one or more imported PhysioData files. The settings determine: the source of the raw data (e.g. the channel); the gain and filtering parameters; the epoch definition; etc. Subsequently, the user can visualize the PhysioAnalyzer data and insert corrections, scored landmarks, etc. These user-added data is referred to as the State of the PhysioAnalyzer module. The derived signals generated by the PhysioAnalyzer modules (e.g. the filtered ECG signals and the Heart Rate) are not saved to in the PhysioData file, only the necessary information to generate these signals from the raw data is: i.e. its type (aka class name, e.g. ECG_Module), and its Settings and State. The Toolbox internally refers to these data as the PhysioAnalyzer template, and saves it in the base of the PhysioData file inside a struct named physioAnalyzerTemplates. The Toolbox was not designed to allow user-modification of the physioAnalyzerTemplates variable. Using the Raw Data, the Settings and the State, the Toolbox dynamically generates the PhysioAnalyzer data when it is requested. As such, no derived data is saved to disk other than when generating a Data Archive. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#physioanalyzers",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#physioanalyzers"
  },"192": {
    "doc": "PhysioData File Format",
    "title": "File Specification and Format",
    "content": "PhysioData files are MATLAB MAT v7.3 files with the .physioData extension. The Toolbox only saves data inside the PhysioData file using built-in MATLAB types: structs, cell arrays, tables, etc. PhysioData files can contain physiological signals, eye-tracking data, and timing metadata. These raw data are visualized by the Raw Data Viewer, as described here. 🚧 This page is still under development and does not currently contain information about eye-tracking data inside PhysioData files. Please note the following: . | No Strings: The PhysioData file does not use Strings, only character arrays (use single quotes, more info). Cell arrays of chars are used to represent arrays of strings. | Sampling Frequency: All signals must have the same sampling frequency and the same number of samples. The sampling frequency (pdtData.data.signals.fs) must be between 10 and 10000 Hz. | User Variables: When loading and subsequently saving a PhysioData file, the Toolbox will strip any base variables not part of the official file specification; other non-compliant variables may be deleted as well. To include additional data inside PhysioData files, place them in the UserData variable. This variable will also be included when a Data Archive is generated. | Marker Signals: If a signal fulfils the definition of a “Marker signal”, the Toolbox will extract markers from it and make those markers available for referencing when generating epochs (more info about markers). | Loading and Saving PhysioData Files: To load the data from a PhysioData file into MATLAB, call the load function with the -mat flag: pdtData = load(filename, '-mat');. Similarly, to save the data as a PhysioDat file, call save with the -struct flag and the name of the struct that corresponds to the PhysioData file format: save('filename', '-struct', 'pdtData');. Make sure to specify the physioData extension. | Updating a PhysioData File: The raw data inside a PhysioData file—including the pre-generated epochs—can be modified without losing the PhysioAnalyzer module’s settings and state by calling MATLAB’s save function with the ‘-append’ flag. This will append the desired base variable to the PhysioData file and keep the PhysioAnalyzer modules, which are saved in the physioAnalyzerTemplates variable, intact. | File Version Warning: When generating PhysioData files in MATLAB and opening them in the Toolbox, a warning may be encountered upon loading the files specifying that they not generated using the current version of the Toolbox. The warning will not be shown again after the file has been saved by the Toolbox. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#file-specification-and-format",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#file-specification-and-format"
  },"193": {
    "doc": "PhysioData File Format",
    "title": "File Contents Outline",
    "content": "The tree below visualizes the most user-relevant contents of a PhysioData file, as represented in MATLAB by a struct. Outline 1: The contents of an PhysioData file. The bold strings with frames indicate the field-name if the parent is a struct, and the variable-name otherwise. Click on the triangle to expand or collapse a node. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#file-contents-outline",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#file-contents-outline"
  },"194": {
    "doc": "PhysioData File Format",
    "title": "MATLAB Examples",
    "content": "Any suitable data can be converted into a PhysioData file for use in the Toolbox using custom MATLAB scripts. Download the code and data for the examples below from this GitHub repo by clicking on the Code button and Download ZIP. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#matlab-examples",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#matlab-examples"
  },"195": {
    "doc": "PhysioData File Format",
    "title": "Basic Example 1",
    "content": "This example shows how to create a PhysioData file from ECG and EDA (skin conductance) data saved inside a tsv file. It also shows how to add custom referenceable events (labels) and pre-generated epochs. Code 1: An example showing the basic elements of saving signals and timing metadata inside a PhysioData file. Find this example and its data in the /code_examples/Generating_PhysioData_Files/ folder of the examples repo. | ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#basic-example-1",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#basic-example-1"
  },"196": {
    "doc": "PhysioData File Format",
    "title": "Other Examples",
    "content": "This page is still under construction and will be extended as needed. If you require help generating PhysioData files in MATLAB, please contact the Toolbox developers. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physiodata-file-format.html#other-examples",
    
    "relUrl": "/docs/user-guide/physiodata-file-format.html#other-examples"
  },"197": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Pupil Diameter Analyzer",
    "content": "The Pupil Diameter Analyzer performs epoch-based analysis of pupil diameter data. | Introduction | User Corrections . | Fast-Mode . | Eye Selection | Zone-Type Selection | . | . | Processing and Analysis Pipeline . | Step 1: Filtering the Raw Data . | Removing Dilation-Speed Outliers and Edge-Artifacts | Removing Trend-line Outliers | Removing Isolated and Sparse Samples | . | Step 2: Processing the Valid Samples | . | Settings | Metrics | Resampled Signals | References | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html"
  },"198": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Introduction",
    "content": "The Pupil Diameter Analyzer performs epoch-based analysis of pupil diameter data. The module performs outlier rejection and filters the data using user-specified settings and criteria. In addition, the module allows the user to amend or override the filter’s rejections. The purpose of the module is to generate smooth pupil diameter signals that are suitable for epoch-based analyses, or further processing1. &times; Figure 1: The Pupil Diameter analyzer gui. Aside from the standard epoch plot at the top, the GUI consists of the following graphs: . | Force Reject: The Force Reject correction graph shows the zones in which the user overrides the filter’s rejection of raw samples; i.e., the user forces the inclusion of the samples within the marked zone. Both the Force Reject and Force Accept graphs feature two bars, one for the right pupil (green-colored bottom bar) and one for the left (red-colored top bar) pupil. | Force Accept: The Force Accept correction graph shows the zones in which the user overrides the filter’s inclusion of raw samples; i.e., the user forces the exclusion of samples. | Pupil Diameter: The pupil diameter graph shows the raw and valid pupil diameter samples, as well as the interpolated and filtered pupil diameter signals. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#introduction"
  },"199": {
    "doc": "Pupil Diameter Analyzer",
    "title": "User Corrections",
    "content": "The toolbox allows the user to override the previously described filters by forcing the acceptance or rejection of raw data samples, regardless of the filer and threshold violation. It is advisable to first determine the optimal automatic filtering settings for all files, then to review, and, if necessary, correct the filtering algorithm. The Pupil Diameter module includes a popup window for visualizing the filter thresholds and intermediate steps, see Figure. To show, click the Show Filters button in the PhysioAnalyzer Viewer. The information in this window can be used to review the efficacy of the filter settings on the current data. Figure 2: The Pupil Diameter module's filter visualization window. As described at the start of this section, the user can overrule the automatic sample rejection algorithm. This can be done by selecting a time section of the data by right-clicking and dragging inside the graph, then selecting one of the following actions, per eye: . | Keep as is: Nothing is changed for the corresponding eye. | Force acceptance of samples in selected range: Force that the module uses the raw samples inside the selected range, for the given eye. | Force rejection of samples in selected range: Force that the module discards the raw samples inside the selected range, for the given eye. | Remove user overrides in selected range: Remove any force-accept or force-reject zones inside the selected range, for the given eye. | . The filter settings and data correction approach are the responsibility of the researcher, and are currently out of the scope of this document. The module automatically ensures that a force-accept zone and a force-reject zone do not overlap for a given eye. As such, adding one zone where the other exists removes the overlap from the pre-existing zone. As with other modules, the user correction graphs are light green when no zones are present. Figure 3 shows a section of pupil diameter data obtained using a Tobii Glasses II eye-tracker. It is noticeable that the system had trouble detecting the right pupil diameter between 524 and 562 seconds, resulting in a cloud of erroneous samples, which is in stark contrast to the smooth and coherent pupil diameter signals seen in the rest of the recording. Due to the nature of the noise and the filter settings used, the erroneous right-pupil samples were not rejected by the raw data filters. Consequently, the mean pupil diameter signal was distorted by the contribution of the incorrect right-pupil filtered signal, which was generated by interpolating the erroneous right-pupil samples. To remedy this, the user can insert a force-reject zone for the right-pupil samples covering the noisy section. This will prevent the toolbox from using any right-pupil samples within that zone. Additionally, given that the section exceeds the maximum interpolation distance, the toolbox will not generate the interpolated smooth signal for that section, for the right pupil diameter. As a result, the mean pupil diameter signal in the force-reject section will be generated solely from the left pupil data, which contains far less noise. See figures below. Similarly, in cases where the filter rejected valid samples, and the issue cannot be easily corrected by tweaking the settings, the user can force the acceptance of rejected samples by inserting a force-accept zone. Figure 3: A Pupil diameter dataset showing measurement artifacts in the right pupil diameter samples. To correct this, the user can complement the raw data filter by manually rejecting the erroneous samples. Figure 4: Inserting a rejection zone. The desired section is selected by left-clicking in the pupil diameter graph and dragging the highlighted section while holding down the mouse button. Once the desired section has been selected, releasing the mouse button opens a popup menu with several correction options. Figure 5: Force reject samples. In the current example, the 'Force rejection' option is chosen for the right eye to manually remove the erroneous samples. Figure 6: Once a 'force-reject' zone has been inserted, no raw samples for the eye it was defined for are used. In this case, the erroneous contribution of the noisy right pupil samples is removed, leaving a smooth 'mean pupil diameter' signal generated solely from the left pupil data (in the force-reject zone). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#user-corrections"
  },"200": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Fast-Mode",
    "content": "This module features a special variation of the “fast-mode” correction feature, which can be enable thought the Menu button of the PhysioAnalyzer Viewer (more info). When Fast-Mode is enabled: left-to-right selections add Force-Reject zones, while right-to-left selections clear both Force-Reject and Force-Accept zones. Eye Selection . By default, the Fast-Mode applies the zone-actions to all available eyes. To select a specific eye: . | To only affect the left-eye: Hold down Z while selecting the zone; or, hide the right-eye’s raw samples by clicking it in the legend. | To only affect the right-eye: Hold down X while selecting the zone; or, hide the left-eye’s raw samples by clicking it in the legend. | . Zone-Type Selection . By default, the Fast-Mode creates a Force-Reject zone. To create a Force-Accept zone, hold down C while selecting the zone. This can be done in combination with the Z and X keys to insert a Force-Accept zone for a specific eye. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#fast-mode",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#fast-mode"
  },"201": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "The toolbox features a robust and customizable preprocessing pipeline, which can be broken down into two steps: (1) filtering the raw data to extract the subset of valid samples; and, (2) upsampling and smoothing the valid samples. Before the filtering commences, the raw data can be multiplied by a constant value, the gain. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#processing-and-analysis-pipeline"
  },"202": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Step 1: Filtering the Raw Data",
    "content": "Raw eye-tracking data often contain samples that are purely the result of noise or artifacts, and therefore carry no useful information for pupil size analysis. Identifying and removing these samples, however, is not a trivial task. This filtering pipeline is aimed at identifying three types of often occurring invalid pupil size samples: (1) dilation speed outliers and edge artifacts; (2) trend-line deviation outliers; and (3), temporally isolated samples. In addition, pupil size samples that are simply outside of a predefined feasible range can be rejected via the user specified minimum and maximum accepted values. Figure 7: Raw pupil diameter data showing the different kinds of artifacts that are targeted by the raw data filter presented in this paper. The invalid samples targeted for rejection are shown circled. A. Certain artifacts, especially those caused by blinks, are characterized by large inter-sample changes in pupil size; i.e., disproportionately large dilation speeds, as visualized by the arrows. Additionally, the edges of eye-blink gaps may show slopes caused by the onset of eyelid occlusion. B. Outlying clusters of erroneous data-points can be identified by their abnormally large deviation from a smooth trend-line (solid black line). C. Small islands of spurious samples can be identified by their temporal isolation from other samples, as visualized by the horizontal arrows.   . Removing Dilation-Speed Outliers and Edge-Artifacts . Dilation speed outliers are samples that feature a disproportionately large absolute pupil size change relative to their adjacent samples. Because the changes between samples due to actual pupil dilation and constriction are generally less than those resulting from artifacts, such as system errors or blinks, detecting outliers in these changes is an effective way of spotting and rejecting invalid samples. To detect dilation speed outliers, the Median Absolute Deviation (MAD), which is a robust and outlier resilient data dispersion metric, is calculated from the dilation speed series, multiplied by a constant (n), and summed with the median dilation speed. Samples with dilation speeds above the threshold can now be marked as outliers and rejected. Dilation speed filter settings: . | Speed-filter MAD threshold [-]: The number (n) of MADs used as a threshold to reject outliers. | Absolute speed-filter threshold [mm/ms]: Any samples with dilation speeds above this value are rejected. This criteria can be used if the rejection should occur according to some metric other than MADs, such as standard deviation. The absolute threshold, such as the standard deviation of the dilation speeds of all pupil diameter samples inside epochs, can be calculated using a custom MATLAB script. | . After the dilation speed outliers have been removed, artifacts around gaps in the data may still remain, especially if these gaps are the result of eye blinks, which may cause pupil size underestimation due to eye-lid occlusion. Therefore, it is sensible to reject the samples that border certain gaps in the data. In order to identify ‘gaps’, the toolbox looks for sections of missing samples with durations within a specifiable range: the gap lower and upper bounds. Once these gaps have been found, samples that form its leading and trailing edges are removed. Gap detections and edge-artifact removal settings: . | Gap lower-bounds [ms]: The minimum duration a gap needs to have to be classified as such. | Gap upper-bounds [ms]: The maximum duration a gap may have in order to still be classified as such. | Backward gap-padding [ms]: The duration of the section before the start of the gap in which samples are rejected. | Forward gap-padding [ms]: The duration of the section after the end of the gap in which samples are rejected. | . Removing Trend-line Outliers . Certain eye-trackers, especially those with higher sampling rates, may produce small groups of clearly invalid samples which, since they are clustered together, are resistant to dilation speed filtering. Instead, these invalid samples can be identified by their strong departure from the signal’s trend-line, which can be generated by interpolating and smoothing the data that remain after the previous filtering steps. Outliers in absolute trend-line deviations can then be identified and rejected in a similar manner to dilation speed outliers by feeding the absolute trend-line deviations into the MAD filter. Subsequently, a new trend-line can be generated using the now remaining samples, and the outlier detection process repeated on all samples considered in the first deviation filter pass. This multi-pass approach allows for the reintroduction of valid samples that were previously rejected due to the invalid samples ‘pulling away’ the trend-line. These trend-line outliers can be removed in the toolbox using the Residuals filter, which features the following settings: . | Residuals-filter passes [-]: The number of passes that the filter will make. | Residuals-filter MAD threshold [ms]: The MAD multiplier; i.e., the number of MADs to use as the rejection threshold. | Residuals filter low-pass filter [ms]: The cutoff frequency of the low-pass filter used to generate the smooth trend-line from the non-rejected samples. | . Removing Isolated and Sparse Samples . Another feature of raw pupil size samples that may indicate invalidity is their sparsity. Since a proper pupil size signal is fairly solid, with continuous gaps during blinks and look-away moments, secluded samples are likely to be the result of noise or a momentary eye-tracker glitch, such as erroneous pupil detection during shut eyes. The toolbox can look for these sample-islands, which are clusters of samples that are temporally separated from other samples, and reject them. The sparsity filter includes the following settings: . | Island isolation criteria [ms]: The minimum distance used to consider samples ‘separated’. The toolbox scans raw non-missing pupil diameter samples for gaps greater than this distance, and identifies the sample-island clusters—upon which the criterion below is applied. | Minimum allowable island size [ms]: Once islands have been identified, those smaller than the minimum allowable size are removed. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#step-1-filtering-the-raw-data",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#step-1-filtering-the-raw-data"
  },"203": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Step 2: Processing the Valid Samples",
    "content": "At this point, depending on whether monocular or binocular data was collected, one or two valid subsets of the original raw samples remain. If data from both eyes are available, the toolbox uses them to generate a third time-series: the mean pupil size signal. When doing so for the time-points where one pupil’s data is missing, the dynamic offset between the sizes of the two pupils is taken into account. To increase the temporal resolution and smoothness of the data, the data-points are interpolated at 1000 Hz, then low-pass filtered at the specified cutoff frequency. Subsequently, the toolbox can set sections that were interpolated over unacceptably large gaps to ‘missing’. Valid samples processing settings: . | Smoothing low-pass filter frequency [Hz]: The cutoff frequency of the low-pass smoothing filter applied to the interpolated signals generated from the valid samples (the samples that were not rejected). The recommended cutoff frequency is 4 Hz . | Maximum interpolation gap [ms]: The maximum allowable interpolation gap. Sections that were generated by interpolating over gaps larger than this criterion are set to missing, and not used in the analysis. | . Figure 8: A non-toolbox plot showing the result of the preprocessing pipeline. Shown are: the raw pupil diameter samples of the right and left eyes (blue and red dots, respectively), and the interpolated and low pass filtered 'mean pupil diameter' signal (green line). The mean pupil diameter signal was generated from the valid raw samples of both pupils, including during the absence of one pupil's data, in which case the local pupil size difference was estimated and used to generate the 'mean pupil size' value (as can be seen at 0.6 seconds). The settings used stipulated that signals were not to be interpolated over gaps larger than 250 ms, hence the missing data around 3.3 seconds. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#step-2-processing-the-valid-samples",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#step-2-processing-the-valid-samples"
  },"204": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Settings",
    "content": "The Pupil diameter analyzer assumes that the unit of the pupils size time series is mm. If this is not the case, fill in an appropriate gain value (multiplier) to transform the raw data into mm. If this is not possible–e.g. when using an eye-tracker that reports pixels (e.g. EyeLink), or when measuring the pupil area–the Toolbox will still report the results as mm. The auto-generated list below shows the settings available in the Pupil Diameter Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Eye-Tracking dataset number: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . Tip: you can use infinity (‘inf’ w/o quotes) as a criteria in the settings below. | Gain and Pupil Size Restrictions: The gain, which is the value that the raw signal is pre-multiplied by, and the minimum and maximum allowable pupil size. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is pre-multiplied. | Minimum allowable pupil size [mm]: The minimum pupil diameter criteria used to reject raw samples. | Maximum allowable pupil size [mm]: The maximum pupil diameter criteria used to reject raw samples. | . | Isolated Samples Criteria: ‘Sample-islands’ are clusters of samples that are temporally separated from other samples. The minimum distance used to consider samples ‘separated’ can be specified here. When clusters are considered separated, they need to have the minimum size specified in here; sample islands smaller than this temporal width and separated from other samples by the distance mentioned above are marked as invalid. | Island isolation criteria [ms]: ‘Sample-islands’ are clusters of samples that are temporally separated from other samples. The ‘island isolation criteria’ specifies the minimum distance to another sample a cluster needs to have in order to be considered an island. | Minimum allowable island size [ms]: When islands are detected, they need to satisfy the minimum allowable size criteria–samples in clusters that don’t, are rejected. | . | Dilation Speed Filter Criteria: Specify here the number of Median Absolute Deviations (MADs) to use as the cutoff threshold when applying the speed filter. Usually a value between 4 (aggressive) and 16 (permissive) works well, but this depends on the dataset and Eye-Tracker characteristics. An absolute threshold can also be set manually. | Speed-filter MAD threshold [n]: The number of MADs to use as the cutoff threshold when applying the speed-filter. | Absolute speed-filter threshold [mm/ms]: The absolute threshold of the speed-filter. If enabled, all samples with dilation speeds above the threshold are rejected. | . | Edge Removal Filter Criteria: Pupil size data may contain artifacts at the edges of ‘gaps’. These artifacts are e.g. caused by the Eye-Tracker reporting the size of a pupil which is still partially occluded by the eyelid during the start or end of a blink. Specify here the duration criteria used to classify missing data as a ‘gap’, then indicate the section right before the start of the gap (the backwards padding distance) and the section right after the gap (the forward padding distance) within which samples are to be rejected. | Gap lower-bounds [ms]: The minimum duration a gap needs to have to be classified as such. | Gap upper-bounds [ms]: The maximum duration a gap needs to have to be classified as such. | Backward gap-padding [ms]: The duration of the section before the start of a gap in which samples are rejected. | Forward gap-padding [ms]: The duration of the section after the end of a gap in which samples are rejected. | . | Deviation Filter Criteria: After passing through the filters described above, a subset of the original pupil size samples remain and form the input for the Deviation Filter. This filter generates a smooth trendline by lowpass filtering the remaining samples, then calculates the deviation of each sample relative to this trendline. Samples featuring a deviation outside of a threshold, which is a multiple of the median, are then removed. This process can be performed in multiple passes. | Residuals-filter low-pass frequency [Hz]: The cutoff frequency of the low-pass filter used to smooth the residuals-filter’s trendline. | Residuals-filter MAD threshold [n]: The number of MADs to use as the cutoff threshold when applying the residuals-filter. | Residuals-filter passes [n]: The number of passes the residuals-filter makes. | . | Smoothing and Interpolation Gaps: Finally, the remaining valid samples are interpolated and upsampled to 1000 Hz, then low-pass filtered to create smooth and continuous signals. Optionally, the maximum gap over which interpolation is allowed can be specified. | Smoothing low-pass filter frequency [Hz]: The cutoff frequency of the low-pass filter used to smooth the interpolated pupil diameter signal. | Maximum interpolation gap [ms]: The maximum gap to interpolate over when generating the interpolated signal. Gaps larger than the limit are set to missing. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#settings"
  },"205": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the Pupil Diameter Analyzer module. Table 1: The metrics calculated by the Pupil Diameter Analyzer module. | Variable: | Unit: | Description: | . | meanDia_BothEyes | mm | The mean pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of both pupils. | . | minDia_BothEyes | mm | The minimum pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of both pupils. | . | maxDia_BothEyes | mm | The maximum pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of both pupils. | . | signalCoverage_BothEyes | % | The approximate percentage of the epoch in which data from the interpolated signal is available. | . | meanDia_LeftEye | mm | The mean pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of the left pupil. | . | minDia_LeftEye | mm | The minimum pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of the left pupil. | . | maxDia_LeftEye | mm | The maximum pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of the left pupil. | . | signalCoverage_LeftEye | % | The approximate percentage of the epoch in which data from the interpolated signal is available. | . | meanDia_RightEye | mm | The mean pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of the right pupil. | . | minDia_RightEye | mm | The minimum pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of the right pupil. | . | maxDia_RightEye | mm | The maximum pupil diameter, calculated per epoch from the interpolated and smoothed signal generated from the valid samples of the right pupil. | . | signalCoverage_RightEye | % | The approximate percentage of the epoch in which data from the interpolated signal is available. | . | countRawSamples_LeftEye | - | The total number of left eye raw pupil diameter samples inside the epoch. Only Non-NaN samples are counted. | . | countRawSamples_RightEye | - | The total number of right eye raw pupil diameter samples inside the epoch. Only Non-NaN samples are counted. | . | countValidSamples_LeftEye | - | The count of the valid left eye pupil diameter samples inside the epoch. The 'valid samples' are the samples that were not rejected by the filters or the user, and were used to generate the interpolated signal. | . | meanValidSamples_LeftEye | mm | The mean of the valid left eye pupil diameter samples inside the epoch. | . | minValidSamples_LeftEye | mm | The minimum of the valid left eye pupil diameter samples inside the epoch. | . | maxValidSamples_LeftEye | mm | The maximum of the valid left eye pupil diameter samples inside the epoch. | . | stdValidSamples_LeftEye | mm | The standard deviation of the valid left eye pupil diameter samples inside the epoch. | . | countValidSamples_RightEye | - | The count of the valid right eye pupil diameter samples inside the epoch. The 'valid samples' are the samples that were not rejected by the filters or the user, and were used to generate the interpolated signal. | . | meanValidSamples_RightEye | mm | The mean of the valid right eye pupil diameter samples inside the epoch. | . | minValidSamples_RightEye | mm | The minimum of the valid right eye pupil diameter samples inside the epoch. | . | maxValidSamples_RightEye | mm | The maximum of the valid right eye pupil diameter samples inside the epoch. | . | stdValidSamples_RightEye | mm | The standard deviation of the valid right eye pupil diameter samples inside the epoch. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#metrics"
  },"206": {
    "doc": "Pupil Diameter Analyzer",
    "title": "Resampled Signals",
    "content": "When exporting the resampled epoch signals, the Pupil Diameter Analyzer resamples the filtered pupil size signals. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#resampled-signals",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#resampled-signals"
  },"207": {
    "doc": "Pupil Diameter Analyzer",
    "title": "References",
    "content": ". | The filtering pipeline described in this section is largely taken from: Kret, E., &amp; Sjak-Shie, E. E. (2018). Preprocessing pupil size data: Guidelines and code. Behavioral Research Methods, 1-7. Available at: https://rdcu.be/2QCd. &#8617; . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/pupil-module.html#references",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/pupil-module.html#references"
  },"208": {
    "doc": "Respiration Analyzer",
    "title": "Respiration Analyzer",
    "content": "The Respiration Analyzer preprocesses and analyzes a chest or abdomen expansion signal. | Introduction | User Corrections | Processing and Analysis Pipeline . | Step 1: Filtering the signal | Step 2: Generating the Moving Mean Signal | Step 2: Detecting the Intercepts | Step 3: Finding Inhalation and Exhalation Onsets | Step 4: Defining Breaths | Step 5: Generating the Smooth Breath Period Signal | Step 6: Data Analysis | . | Settings | Metrics | References | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html"
  },"209": {
    "doc": "Respiration Analyzer",
    "title": "Introduction",
    "content": "The Respiration Analyzer preprocesses a chest or abdomen expansion signal generated by a force-transducer, and calculates basic descriptive statistics for inhalation, exhalation, and breath phases, per epoch. The respiration module defines a single breath as an inhalation followed directly by an exhalation. Breaths cannot exist without both an inhalation and an exhalation phase. The current version does not classify a breath-hold phase. Breaths, inhalations, and exhalations are timestamped at the end of their cycle. &times; Figure 1: The Respiration Module GUI. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#introduction",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#introduction"
  },"210": {
    "doc": "Respiration Analyzer",
    "title": "User Corrections",
    "content": "The Respiration Analyzer module allows users to remove complete breath cycles by selecting a section in the main graph and selecting the ‘disregard’ option, which adds a ‘Resp-skip’ zone to the module. Any breath that overlaps any skip zones, even partially, are completely removed. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#user-corrections",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#user-corrections"
  },"211": {
    "doc": "Respiration Analyzer",
    "title": "Processing and Analysis Pipeline",
    "content": "The data processing and analysis pipeline used by the Respiration module is described below. The method is based on the approach described by Lu et al. (2006)1. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#processing-and-analysis-pipeline",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#processing-and-analysis-pipeline"
  },"212": {
    "doc": "Respiration Analyzer",
    "title": "Step 1: Filtering the signal",
    "content": "The raw respiration transducer signal is fetched from the specified channel, and multiplied by the specified gain. If enabled, the signal is then low and/or high pass filtered at the specified cutoff frequencies. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-1-filtering-the-signal",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-1-filtering-the-signal"
  },"213": {
    "doc": "Respiration Analyzer",
    "title": "Step 2: Generating the Moving Mean Signal",
    "content": "The article1 calculates a moving average signal from the respiration signal, then uses the locations of the intercepts between these signals to search for the inhalation and exhalation transitions. The article uses a Fast Fourier transform (FFT) to estimate the respiration period (T) of the signal, then uses this to dimension the moving average window, which they give a width of 2T. Since the Toolbox does not assume steady state free-breathing, the respiration rate is instead estimated using a half-overlap moving window, across the whole signal, in order to take varying T values into account. The signal is first resampled to 100 Hz, high-pass filtered at 0.05 Hz, and split into windows of 60 seconds, with 15 second overlaps on each side. Then, using FFT, the T is estimated per window, and that window is filtered using a moving mean filter with a window length equal to T_multiplier times the estimated T of that window, with T_multiplier being a user-specifiable setting. The windows are then reassembled into a single signal, smoothed using a 1-second moving mean filter, and resampled to the original respiration signal frequency. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-2-generating-the-moving-mean-signal",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-2-generating-the-moving-mean-signal"
  },"214": {
    "doc": "Respiration Analyzer",
    "title": "Step 2: Detecting the Intercepts",
    "content": "First, the Toolbox searches for the up and down-intercepts of the moving mean signal produced by step 2, and the filtered respiration signal produced by step 1. Secondly, all up-intercepts that do not follow a down-intercept, and all down-intercepts that do not follow up-intercepts are iteratively deleted until the intercept series alternates between up and down intercepts. Thirdly, all intercept intervals that are shorter than 100 ms are removed, with intercept intervals being defined as down-intercepts times minus the corresponding up-intercept times. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-2-detecting-the-intercepts",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-2-detecting-the-intercepts"
  },"215": {
    "doc": "Respiration Analyzer",
    "title": "Step 3: Finding Inhalation and Exhalation Onsets",
    "content": "Inhalation onsets are detected by searching backwards from each up-intercept, and looking for the first sample that features a positive gradient; i.e., searching for the start of the slope, on the filtered respiration signal, which intercepts the moving mean signal. The onset is then placed on the first sample after the start of the slope that features a gradient larger than the specified percentage of the maximum gradient of the slope. Note that the end of the slope is defined as the last sample with a positive gradient. If the max/min method for inhalation/exhalation onset detection was chosen, the start and end of the slopes are instead defined as the minimum and maximum values of the filtered respiration signals between the down-intercepts surrounding the up-intercept in question. The exhalations are detected in the same way, albeit in inverse. The end of each inhalation and exhalation phase is defined as occurring on the sample before the next inhalation or exhalation start. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-3-finding-inhalation-and-exhalation-onsets",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-3-finding-inhalation-and-exhalation-onsets"
  },"216": {
    "doc": "Respiration Analyzer",
    "title": "Step 4: Defining Breaths",
    "content": "Using the inhalation and exhalation onsets and offsets detected in step 3, breaths are defined as starting at an inhalation onset, and ending at the subsequent exhalation offset, with an inhalation/exhalation transaction in between. Subsequently, inhalations with a duration shorter than the specified minimum threshold are detected and merged into the surrounding exhalation. Similarly, short exhalations are merged into the surrounding inhalations. Inhalations with amplitudes that are smaller than the local moving mean minus a multiplier times the local moving standard deviation are then also merged into the surrounding exhalations. The moving mean and moving standard deviation are calculated using the user-specified window span, and the rejection threshold is calculated using the user-specified multiplier. Inhalation and exhalation amplitudes are defined as the value of the filtered respiration signal at the end of the phase, minus that at the start of the phase. Breaths that feature inhalations that are larger than the local moving mean plus the multitier times the local moving standard deviation are completely removed. Next, the exhalation amplitude outliers are processed in the same way. Breaths containing either inhalations or exhalation with durations that are larger than the specified maximum are then completely removed. Next, breaths containing either inhalations or exhalation with durations that are larger than the local moving mean plus the multitier times the local moving standard deviation are also completely removed. Lastly, all breaths that overlap the user-specified resp-skip zones are removed, even if they only partly overlap the skip zone. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-4-defining-breaths",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-4-defining-breaths"
  },"217": {
    "doc": "Respiration Analyzer",
    "title": "Step 5: Generating the Smooth Breath Period Signal",
    "content": "A breath period is defined as the duration from the start of a breath to the end, with the breath being timestamped at the end of that breath. A smooth breath period signal is generated by smoothing the breath time series using the lowess method, with a span being the user-specified smoothing window width. The smoothed breath period time-series are then interpolated at 50 Hz using the pchip method to form the smooth continuous breath period signal. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-5-generating-the-smooth-breath-period-signal",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-5-generating-the-smooth-breath-period-signal"
  },"218": {
    "doc": "Respiration Analyzer",
    "title": "Step 6: Data Analysis",
    "content": "When analyzing the data, the minimum, mean, median, maximum and standard deviation of the inhalation, exhalation and breath durations, and the breath amplitude, are calculated for each epoch. Inhalations, exhalations and breaths are only included inside an epoch if they start and end inside the epoch. Additionally, the total number of full breaths, and the breath coverage—which is the sum of all breath durations as a percentage of the epoch duration—are calculated. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#step-6-data-analysis",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#step-6-data-analysis"
  },"219": {
    "doc": "Respiration Analyzer",
    "title": "Settings",
    "content": "The auto-generated list below shows the settings available in the Respiration Analyzer module: . | General Settings: Name, source and epoch settings for this PhysioAnalyzer. | Analyzer prefix (tag): The tag (name) of this PhysioAnalyzer. The tag must be unique and start with a letter, and may only contain alphanumeric characters. | Channel-number of signal: The channel number (index) of the signal to be analyzed. | Generate epochs from: Specifies how epochs are generated. | . | Preprocessing Settings Settings for processing the raw respiration signal. This module assumes that a force transducer was used to measure the chest or abdominal expansion, with upward slopes corresponding to inhalations. | Gain (signal multiplier) [x]: The gain is the value with which the raw signal is multiplied before being further processed and analyzed. | Lowpass filter [Hz]: The low-pass filter and its cutoff frequency. | Highpass filter [Hz]: The high-pass filter and its cutoff frequency. | . | Inhalation and Exhalation Detection: The Toolbox detects inhalations and exhalations by analyzing the intercepts of the respiration signal and its moving mean. Inhalations or exhalations that violate duration or amplitude criteria are automatically rejected. The onset of each inhalation/exhalation can be detected by looking at the min/max of the signal, or the start of the slope, and corrected using a slope gradient threshold. | Moving-mean multiplier [-]: The moving mean is calculated using an adaptive moving window with a length equal to the local estimated respiration period times this multiplier. | Min. &amp; max. inhalation duration [s]: Inhalations must have a duration between these limits. | Min. &amp; max. exhalation duration [s]: Exhalations must have a duration between these limits. | Outlier filter threshold and span [s]: The std multiplier and window span, in seconds, of the moving mean std outlier rejection filter. | Inhalation/Exhalation detection [ ]: The start of the inhalation and exhalation can be detected by either looking for the minimum or maximum, or looking for the onset of the slopes. | Slope gradient threshold [%]: Each inhalation or exhalation starts when the absolute gradient exceeds the absolute maximum during the slope. | Smoothing window width [s]: The breath periods are smoothed using a lowess filter with this span, in seconds. | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#settings",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#settings"
  },"220": {
    "doc": "Respiration Analyzer",
    "title": "Metrics",
    "content": "The auto-generated table belows lists all the metrics produced by the Respiration Analyzer module. Table 1: The metrics calculated by the Respiration Analyzer module. | Variable: | Unit: | Description: | . | Min_inhalation_dur | s | The minimum inhalation duration, per epoch. | . | Mean_inhalation_dur | s | The mean inhalation duration, per epoch. | . | Median_inhalation_dur | s | The median inhalation duration, per epoch. | . | Max_inhalation_dur | s | The maximum inhalation duration, per epoch. | . | Std_inhalation_dur | s | The standard deviation of the inhalation durations, per epoch. | . | Min_exhalation_dur | s | The minimum exhalation duration, per epoch. | . | Mean_exhalation_dur | s | The mean exhalation duration, per epoch. | . | Median_exhalation_dur | s | The median exhalation duration, per epoch. | . | Max_exhalation_dur | s | The maximum exhalation duration, per epoch. | . | Std_exhalation_dur | s | The standard deviation of the exhalation durations, per epoch. | . | Min_breath_dur | s | The minimum breath duration, per epoch. | . | Mean_breath_dur | s | The mean breath duration, per epoch. | . | Median_breath_dur | s | The median breath duration, per epoch. | . | Max_breath_dur | s | The maximum breath duration, per epoch. | . | Std_breath_dur | s | The standard deviation of the breath durations, per epoch. | . | Min_breath_amp | V | The minimum breath amplitude, per epoch. | . | Mean_breath_amp | V | The mean breath amplitude, per epoch. | . | Median_breath_amp | V | The median breath amplitude, per epoch. | . | Max_breath_amp | V | The maximum breath amplitude, per epoch. | . | Std_breath_amp | V | The standard deviation of the breath amplitudes, per epoch. | . | fullBreathsCount | - | The number of complete breaths detected inside the epoch. | . | breathCoverage | % | Percentage of the epoch covered by full breaths; i.e. the total breath duration over the epoch duration, multiplied by 100. | . | mean_InterpBreathPeriod | s | The mean of the breath period, calculated as the mean of the smooth interpolated breath period (i.e. breath duration) signal, per epoch. | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#metrics",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#metrics"
  },"221": {
    "doc": "Respiration Analyzer",
    "title": "References",
    "content": ". | Lu, W., Nystrom, M. M., Parikh, P. J., Fooshee, D. R., Hubenschmidt, J. P., Bradley, J.D., &amp; Low, D. A. (2006). A semi-automatic method for peak and valley detection in free-breathing respiratory waveforms. Medical Physics, 33, 3634-3636. &#8617; &#8617;2 . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/physioanalyzer-modules/resp-module.html#references",
    
    "relUrl": "/docs/user-guide/physioanalyzer-modules/resp-module.html#references"
  },"222": {
    "doc": "Session Manager",
    "title": "Session Manager",
    "content": "The Session Manager is the main window of the PhysioData Toolbox. It is used for managing PhysioData files, and assigning and running analysis pipelines. | Concepts and Terminology . | PhysioData Files | Raw Data . | Signals | Eye-tracking dataset | . | Epochs | PhysioAnalyzer Modules | Saving | . | Interface . | PhysioData Files Panel | PhysioAnalyzer Configurator Panel | . | Data Export Panel . | Generating Epoch Summaries | Generating Resampled Epoch Signals | Generating a Data Archive | . | . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html",
    
    "relUrl": "/docs/user-guide/session-manager.html"
  },"223": {
    "doc": "Session Manager",
    "title": "Concepts and Terminology",
    "content": "From the Session Manager, users can: import PhysioData files; create PhysioAnalyzer modules and propagate them to the files; launch viewers to review and interact with the data in the files; batch analyze the data inside the files; and save the current session. These concepts, and the terminology required to understand the PhysioData Toolbox and its user interaction mechanics, are laid out below. &times; Figure 1: The Session Manager, which is the main toolbox window. It manages the PhysioData files, the PhysioAnalyzers and the data export. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#concepts-and-terminology",
    
    "relUrl": "/docs/user-guide/session-manager.html#concepts-and-terminology"
  },"224": {
    "doc": "Session Manager",
    "title": "PhysioData Files",
    "content": "PhysioData files are specifically formatted MATLAB files that contain raw data, and all settings and user-corrections necessary to analyze those data. By design, the Toolbox saves all information necessary to analyze an individual file inside that same file, which obviates the need for separate ‘analysis definition’ files. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#physiodata-files",
    
    "relUrl": "/docs/user-guide/session-manager.html#physiodata-files"
  },"225": {
    "doc": "Session Manager",
    "title": "Raw Data",
    "content": "Physiological data and metadata that have been converted to the PhysioData specification are referred to as raw data. These data can be analyzed by the Toolbox, but are never altered. The Toolbox supports two types of raw data: signals and eye-tracking datasets. Signals . Signals refer to a collection of uniformly sampled time-series (e.g. a ECG and EMG data), optionally including events, which are named moments inside the recording (e.g. ‘Start Recording’ or ‘End Trial 1’). A signal inside a collection thereof may be referred to as channel and referenced by means of a ‘channel number’ (e.g. the ECG and EMG data are in channels 1 and 2, respectively). A special type of signal is a marker channel, which is a digital signal with activity that reflects sections and/or events inside the recording. Eye-tracking dataset . An eye-tracking dataset contains pupil-size and gaze data, as well as named moments (eye-tracking events) and named segments (eye-tracking sections). ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#raw-data",
    
    "relUrl": "/docs/user-guide/session-manager.html#raw-data"
  },"226": {
    "doc": "Session Manager",
    "title": "Epochs",
    "content": "Analyzing continuous recordings usually involves segmenting the data into time-sections of interest, aka epochs, and analyzing them independently. These epochs are generally defined relative to markers or events inside the raw data. A fundamental aim of the toolbox is to automate the epoch-based batch-analyses of signals by providing a flexible rule-based method for defining how data must be segmented. A collection of user-defined rules by which a signal is to be segmented is referred to as an Epoch Definition table. These user-created definitions are used by the Toolbox to automatically identify, isolate, name, and analyze special sections of recorded data. Additionally, PhysioData files can contain ‘File Epochs’, which are pre-generated custom epochs. This allows users to create and analyze custom epochs that cannot be generated using the epoch definition table . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#epochs",
    
    "relUrl": "/docs/user-guide/session-manager.html#epochs"
  },"227": {
    "doc": "Session Manager",
    "title": "PhysioAnalyzer Modules",
    "content": "PhysioAnalyzer modules are components that define the analysis pipeline, user-interaction and visualization scheme for a specific type of data. For example, the ECG Signal Analyzer defines how a raw ECG signal is processed and what settings are used in this procedure, as well as how the data is visualized and which user-corrections are possible (e.g. rejecting faulty sections). These modules can be created, modified and applied to the desired PhysioData files using the PhysioAnalyzer Configurator panel in the Session Manager. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#physioanalyzer-modules",
    
    "relUrl": "/docs/user-guide/session-manager.html#physioanalyzer-modules"
  },"228": {
    "doc": "Session Manager",
    "title": "Saving",
    "content": "Saving commits the PhysioAnalyzer modules and their data, including the user corrections, to their respective PhysioData files so that they can be reloaded in the future. During a PhysioData Toolbox session, all PhysioAnalyzer data are kept in memory and persist only for the current session. It is not until the user saves the data that they’re stored to disk. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#saving",
    
    "relUrl": "/docs/user-guide/session-manager.html#saving"
  },"229": {
    "doc": "Session Manager",
    "title": "Interface",
    "content": "In addition to the panels described below, the Session Manager features a directory bar showing the Current Directory, which is the folder from which the current PhysioData files have been imported. This directory is set using the Open button, and can be rescanned by clicking the Refresh button. Clicking the Menu button reveals options, including a shortcut to the File Converter application and to the PhysioData Toolbox website. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#interface",
    
    "relUrl": "/docs/user-guide/session-manager.html#interface"
  },"230": {
    "doc": "Session Manager",
    "title": "PhysioData Files Panel",
    "content": "The PhysioData Files panel is used for managing the imported PhysioData files. The imported PhysioData files and their included PhysioAnalyzers are displayed in the file tree. Each top-level node displays the filename and the tags of that file’s PhysioAnalyzers. Green and Red tags indicate that a PhysioAnalyzers has or has not been marked as accepted by the user. A lightning bolt indicates that the file’s raw data is loaded into memory. Figure 2: The PhysioData Files panel, showing the imported PhysioData files and their PhysioAnalyzers. File 001 is expanded, showing it has a Blood Pressure Analyzer tagged BP, an ECG analyzer tagged ECG, an HRV analyzer tagged HRV, and a Skin Conductance Analyzer tagged SC. Additionally, the ECG analyzer is expanded showing its settings and state. Each file node can the expanded to reveal the PhysioAnalyzer modules it contains, which in turn can be expanded to reveal that module’s settings and state. Clicking the View Raw Data button opens the Raw Data Viewer, which visualizes all raw data inside the file currently selected in the tree. Similarly, the View Analyses button opens the PhysioAnalyzer Viewer, which displays the file’s PhysioAnalyzer modules and their data. The Remove Analyses button launches a selection window allowing the users to choose which PhysioAnalyzers to remove from the selected files. The current session can be saved using the Save button, which stores the PhysioAnalyzers, including all user corrections, inside their corresponding PhysioData files. It is important to note that the toolbox does not automatically save anything. As such, it is strongly recommended to save often if the changes made are to be kept. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#physiodata-files-panel",
    
    "relUrl": "/docs/user-guide/session-manager.html#physiodata-files-panel"
  },"231": {
    "doc": "Session Manager",
    "title": "PhysioAnalyzer Configurator Panel",
    "content": "The PhysioAnalyzer Configurator panel is used for defining or modifying the PhysioAnalyzers, and then propagating them to selected PhysioData files. The Current PhysioAnalyzer Configurations tree shows the currently defined PhysioAnalyzers and their settings. These PhysioAnalyzers are not linked to any files, and do not contain any state (user corrections). It is not until the user applies the PhysioAnalyzer to the PhysioData files using the Apply to PhysioData Files button that the PhysioAnalyzer settings are propagated to the selected files, and linked to data. Figure 3: The PhysioAnalyzer Configurator panel in the Session Manager. This panel features a tree showing the defined PhysioAnalyzers and their settings, and buttons for creating and applying these PhysioAnalyzers to the files. The checkboxes can be used to select only a subset of the settings for applications. New PhysioAnalyzers can be created by clicking the Create New Analyzer button, which opens a list of available PhysioAnalyzers. Once the desired PhysioAnalyzer is selected, a window opens allowing the user to modify the settings. This window can be reopened at any time by selecting the PhysioAnalyzer and clicking View/Edit Analyzer. Analyzers can be removed by selecting them and clicking the Remove Analyzer button. PhysioAnalyzers can be imported from a PhysioData file by first selecting the desired file in the PhysioAnalyzer file tree, then clicking the Import From PhysioData File button. This copies the settings of all the PhysioAnalyzers inside the selected PhysioData file to the PhysioAnalyzer Configurator. The PhysioAnalyzer tree allows the user to check and uncheck individual PhysioAnalyzers and any of their settings. If a PhysioData file already contains a PhysioAnalyzer of the same type and with the same tag, only the checked setting(s) within that PhysioAnalyzer will be updated. This allows the user to change only certain settings across selected files, leaving other settings intact. Once the Apply to PhysioData Files button is clicked, the user is presented with a summary of the settings that are to be pushed to the files, and some additional options. Checking the Mark overwritten PhysioAnalyzers as ‘Unaccepted’ box will reset the accepted status of each PhysioAnalyzer that new settings were pushed to, while the Clear State option clears the state (all user corrections and scored items) from the affected PhysioAnalyzers. Figure 4: The summary and options window that pops up when applying PhysioAnalyzers to PhysioData files. Note that in this case, only the following settings will be pushed to the files: channel number, epochs definitions, high-pass filter settings, and minimum R-peak value. All other settings and all PhysioAnalyzers with different tags will be left unaffected. Note that the Remove Analyzer and View/Edit Analyzer buttons act on the selected PhysioAnalyzers (highlighted in blue), while the Apply to PhysioData Files button acts on the checked PhysioAnalyzers and their checked settings, regardless of selection. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#physioanalyzer-configurator-panel",
    
    "relUrl": "/docs/user-guide/session-manager.html#physioanalyzer-configurator-panel"
  },"232": {
    "doc": "Session Manager",
    "title": "Data Export Panel",
    "content": "The Data Export panel contains options for batch analyzing and exporting the raw and processed data for further analysis. Figure 5: The Data Export panel in the Session Manager. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#data-export-panel",
    
    "relUrl": "/docs/user-guide/session-manager.html#data-export-panel"
  },"233": {
    "doc": "Session Manager",
    "title": "Generating Epoch Summaries",
    "content": "The PhysioData Toolbox can perform batch epoch-based descriptive statistical analysis. When the Epoch Summaries button is clicked, all epochs inside all PhysioAnalyzers inside the selected PhysioData files are analyzed and the results are saved as one Excel file, one MATLAB file, or a set of files. The results are stored as tables with each epoch on a separate row, and all the variables as columns. Figure 6: The epoch analysis results saved as an Excel file. The first column shows the unique Epoch identifier, and its cells’ background colors are grouped by file. See each module’s page for information about which variables (metrics) they calculate. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#generating-epoch-summaries",
    
    "relUrl": "/docs/user-guide/session-manager.html#generating-epoch-summaries"
  },"234": {
    "doc": "Session Manager",
    "title": "Generating Resampled Epoch Signals",
    "content": "Instead of generating summaries of data per epoch, it is also possible to export resampled data of each epoch. When the Resampled Epoch Signals button is clicked, the user is asked which module (PhysioAnalyzer) to resample and the desired sampling rate (ranging from 50 Hz to 1 Hz) can be selected. The signal sections that fall withing the epochs are then resampled and saved as Excel file, MATLAB file, or several tsv files. See each module’s page for information about which signals they resample. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#generating-resampled-epoch-signals",
    
    "relUrl": "/docs/user-guide/session-manager.html#generating-resampled-epoch-signals"
  },"235": {
    "doc": "Session Manager",
    "title": "Generating a Data Archive",
    "content": "Next to epoch summaries and resampled epoch signals, the toolbox can also export all PhysioAnalyzer data as MATLAB files (by using the Data Archive button). This is useful for when the user wants to have access to the data generated by the PhysioAnalyzers, before it is condensed into epoch summaries, or resampled. It is advisable to create a data archive of MATLAB files once everything has been satisfactorily corrected and reviewed. Since the PhysioData files do not actually contain the signals generated by the PhysioAnalyzers, it will be impossible to regenerate these signals and hence recreate the analysis without the version of the PhysioData Toolbox originally used. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/session-manager.html#generating-a-data-archive",
    
    "relUrl": "/docs/user-guide/session-manager.html#generating-a-data-archive"
  },"236": {
    "doc": "Style Ref",
    "title": "Page Abstract Title",
    "content": "Abstract text comes here. It is more prominent than normal body text, and appears above the TOC. Add buttons below for links that visitors will probably need to click. Special button . | First Chapter (using images) . | Linking to image | . | Second Chapter | Footnotes and References | Lists . | Header H2 | . | Style Conventions. | Header Capitalization | Emphasizing words | . | References | . ",
    "url": "/docs/archive/v0.6.3/style-ref.html#page-abstract-title",
    
    "relUrl": "/style-ref.html#page-abstract-title"
  },"237": {
    "doc": "Style Ref",
    "title": "First Chapter (using images)",
    "content": "When inserting images, use the image.html include. if you add an ID, you can link to the image later. See below. &times; Figure 1: The is a big image. Specifying a max width: . Figure 2: This is the same big image, but with a max-width set. Notice that the caption wraps. Figure 3: No shadow Text goes here. Text goes here. Text goes here. Text goes here. Text goes here. Text goes here. Text goes here. Text goes here. ",
    "url": "/docs/archive/v0.6.3/style-ref.html#first-chapter-using-images",
    
    "relUrl": "/style-ref.html#first-chapter-using-images"
  },"238": {
    "doc": "Style Ref",
    "title": "Linking to image",
    "content": "Link to an image by using its id: See the test image for more details. U can also use this with headers: see chapter. You must remove all caps and symbols though. ",
    "url": "/docs/archive/v0.6.3/style-ref.html#linking-to-image",
    
    "relUrl": "/style-ref.html#linking-to-image"
  },"239": {
    "doc": "Style Ref",
    "title": "Second Chapter",
    "content": "Separate chapters by horizontal line. ",
    "url": "/docs/archive/v0.6.3/style-ref.html#second-chapter",
    
    "relUrl": "/style-ref.html#second-chapter"
  },"240": {
    "doc": "Style Ref",
    "title": "Footnotes and References",
    "content": "Just use inline references, with a foot note link. Foot notes are then inserted at the end of the page, in the references chapter. The EMG preprocessing is based on a pipeline proposed by van Boxtel et al. (2010)1. The references need to be explicitly numbered, so just add them in the order they appear in the text. Not alphabetically. ",
    "url": "/docs/archive/v0.6.3/style-ref.html#footnotes-and-references",
    
    "relUrl": "/style-ref.html#footnotes-and-references"
  },"241": {
    "doc": "Style Ref",
    "title": "Lists",
    "content": "Just use normal lists. List header/intro: . | Item 1 | Item 2 | Item 3 | . or: . | Item 1 header: Item 1 description comes here. Note the two trailing spaces in the header. A sub list is started as such: . | Item 1.a header: Item 1.a description . | Item 2.a header: Item 2.a description . | . | Item 2 header: Item 2 description. | Item 3 header: Item 3 description. | . ",
    "url": "/docs/archive/v0.6.3/style-ref.html#lists",
    
    "relUrl": "/style-ref.html#lists"
  },"242": {
    "doc": "Style Ref",
    "title": "Header H2",
    "content": "More normal text. This is a smaller image, at its native size. Figure 4: Small image with long caption at its native size (no size specified). Captions wraps. ",
    "url": "/docs/archive/v0.6.3/style-ref.html#header-h2",
    
    "relUrl": "/style-ref.html#header-h2"
  },"243": {
    "doc": "Style Ref",
    "title": "Style Conventions.",
    "content": " ",
    "url": "/docs/archive/v0.6.3/style-ref.html#style-conventions",
    
    "relUrl": "/style-ref.html#style-conventions"
  },"244": {
    "doc": "Style Ref",
    "title": "Header Capitalization",
    "content": "Capitalize every word of Titles, and H1 and H2. ",
    "url": "/docs/archive/v0.6.3/style-ref.html#header-capitalization",
    
    "relUrl": "/style-ref.html#header-capitalization"
  },"245": {
    "doc": "Style Ref",
    "title": "Emphasizing words",
    "content": "Use bold for emphasizing Buttons, Windows, tabs, concepts (e.g. epochs, Save) Use ‘single quotations’ for event names, epoch names, etc (e.g. ‘Habituation_Start’). Use back-ticks for values that are filled in (for example in the Epoch Definition Table, e.g. 1:last, ECG). ",
    "url": "/docs/archive/v0.6.3/style-ref.html#emphasizing-words",
    
    "relUrl": "/style-ref.html#emphasizing-words"
  },"246": {
    "doc": "Style Ref",
    "title": "References",
    "content": ". | Van Boxtel, A. (2010). Filter for optimal smoothing of acoustic and electric blink reflex EMG responses to determine blink response magnitude. Biological Psychology, 85, 299-305. &#8617; . | . ",
    "url": "/docs/archive/v0.6.3/style-ref.html#references",
    
    "relUrl": "/style-ref.html#references"
  },"247": {
    "doc": "Style Ref",
    "title": "Style Ref",
    "content": " ",
    "url": "/docs/archive/v0.6.3/style-ref.html",
    
    "relUrl": "/style-ref.html"
  },"248": {
    "doc": "Tips, Tricks and FAQ",
    "title": "Tips, Tricks and FAQ",
    "content": "Handy tips and tricks for using the Toolbox, and answers to some frequently asked questions. 👷🏻‍♀️ 🚧 Under construction 🚧 👷🏻 . ",
    "url": "/docs/archive/v0.6.3/docs/user-guide/tips-tricks-faq.html",
    
    "relUrl": "/docs/user-guide/tips-tricks-faq.html"
  },"249": {
    "doc": "Tutorial",
    "title": "Tutorial",
    "content": "The tutorial will introduce new PhysioData Toolbox users to its core concepts and features, and its basic usage. ",
    "url": "/docs/archive/v0.6.3/docs/tutorial.html",
    
    "relUrl": "/docs/tutorial.html"
  },"250": {
    "doc": "User Guide",
    "title": "User Guide",
    "content": "The User Guide contains all references for the PhysioData Toolbox v0.6.3. See the Tutorial first to get acquainted with the Toolbox’s basic features. ",
    "url": "/docs/archive/v0.6.3/docs/user-guide.html",
    
    "relUrl": "/docs/user-guide.html"
  }
}
